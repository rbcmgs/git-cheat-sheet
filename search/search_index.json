{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Cheats","text":"<p>A categorized compendium of the most useful, commonly referenced git commands, workflows, and tips for daily use and troubleshooting.</p> <p>Hand-crafted with \u2764\ufe0f for rapid reference.</p> <p>Not intended as a replacement for the official git documentation</p>"},{"location":"#quick-command-reference","title":"Quick Command Reference","text":""},{"location":"#setup-configuration","title":"Setup &amp; Configuration","text":""},{"location":"#check-git-version","title":"Check Git Version","text":"<p>Verify your Git installation</p> <pre><code>git --version\n</code></pre>"},{"location":"#set-identity","title":"Set Identity","text":"<p>Configure your name for commits</p> <pre><code>git config --global user.name \"Your Name\"\n</code></pre> <p>Configure your email for commits</p> <pre><code>git config --global user.email \"your.email@example.com\"\n</code></pre>"},{"location":"#editor-configuration","title":"Editor Configuration","text":"<p>Set VS Code as default editor</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Set Vim as default editor</p> <pre><code>git config --global core.editor \"vim\"\n</code></pre> <p>Set Notepad++ as default editor</p> <pre><code>git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n</code></pre> <p>Set Sublime Text as default editor</p> <pre><code>git config --global core.editor \"'subl' -w\"\n</code></pre>"},{"location":"#view-configuration","title":"View Configuration","text":"<p>Display all configurations</p> <pre><code>git config --list\n</code></pre> <p>View a specific config value</p> <pre><code>git config user.name\n</code></pre>"},{"location":"#configuration-scopes","title":"Configuration Scopes","text":"<p>System-wide configuration (all users)</p> <pre><code>git config --system &lt;key&gt; &lt;value&gt;\n</code></pre> <p>User configuration (current user)</p> <pre><code>git config --global &lt;key&gt; &lt;value&gt;\n</code></pre> <p>Repository configuration (current repo only)</p> <pre><code>git config --local &lt;key&gt; &lt;value&gt;\n</code></pre>"},{"location":"#repository-operations","title":"Repository Operations","text":""},{"location":"#create-new-repository","title":"Create New Repository","text":"<p>Initialize a new Git repository in current directory</p> <pre><code>git init\n</code></pre>"},{"location":"#clone-existing-repository","title":"Clone Existing Repository","text":"<p>Clone via HTTPS</p> <pre><code>git clone https://github.com/username/repository.git\n</code></pre> <p>Clone via SSH</p> <pre><code>git clone git@github.com:username/repository.git\n</code></pre> <p>Clone to specific directory</p> <pre><code>git clone https://github.com/username/repository.git my-project\n</code></pre> <p>Clone specific branch</p> <pre><code>git clone -b branch-name https://github.com/username/repository.git\n</code></pre> <p>Clone with limited history (shallow clone)</p> <pre><code>git clone --depth=1 https://github.com/username/repository.git\n</code></pre>"},{"location":"#ignore-files","title":"Ignore Files","text":"<p>Create gitignore file to specify ignored files</p> <pre><code>touch .gitignore\n</code></pre>"},{"location":"#basic-workflow","title":"Basic Workflow","text":""},{"location":"#check-status","title":"Check Status","text":"<p>View repository status</p> <pre><code>git status\n</code></pre> <p>View condensed status output</p> <pre><code>git status -s\n</code></pre>"},{"location":"#stage-changes","title":"Stage Changes","text":"<p>Stage a specific file</p> <pre><code>git add filename.txt\n</code></pre> <p>Stage all changes</p> <pre><code>git add .\n</code></pre> <p>Stage all changes (including deleted files)</p> <pre><code>git add -A\n</code></pre> <p>Stage changes interactively</p> <pre><code>git add -p\n</code></pre>"},{"location":"#commit-changes","title":"Commit Changes","text":"<p>Commit with a message</p> <pre><code>git commit -m \"Description of changes\"\n</code></pre> <p>Add tracked files and commit in one step</p> <pre><code>git commit -am \"Description of changes\"\n</code></pre> <p>Amend the previous commit</p> <pre><code>git commit --amend\n</code></pre>"},{"location":"#view-changes","title":"View Changes","text":"<p>Show unstaged changes</p> <pre><code>git diff\n</code></pre> <p>Show staged changes</p> <pre><code>git diff --staged\n</code></pre> <p>Show changes by filename only</p> <pre><code>git diff --name-only\n</code></pre>"},{"location":"#undo-changes","title":"Undo Changes","text":"<p>Restore file from HEAD</p> <pre><code>git restore filename.txt\n</code></pre> <p>Unstage changes (keep in working directory)</p> <pre><code>git restore --staged filename.txt\n</code></pre> <p>Restore file from a specific commit</p> <pre><code>git restore --source=HEAD~1 filename.txt\n</code></pre>"},{"location":"#file-operations","title":"File Operations","text":"<p>Remove files from Git and filesystem</p> <pre><code>git rm filename.txt\n</code></pre> <p>Remove files from Git but keep in filesystem</p> <pre><code>git rm --cached filename.txt\n</code></pre> <p>Remove directory recursively</p> <pre><code>git rm -r directory\n</code></pre> <p>Move or rename files</p> <pre><code>git mv oldname.txt newname.txt\n</code></pre>"},{"location":"#branching-merging","title":"Branching &amp; Merging","text":""},{"location":"#branch-management","title":"Branch Management","text":"<p>Create a new branch</p> <pre><code>git branch branch-name\n</code></pre> <p>Create and switch to new branch</p> <pre><code>git checkout -b branch-name\n</code></pre> <p>Alternative to create and switch to new branch (Git 2.23+)</p> <pre><code>git switch -c branch-name\n</code></pre> <p>List local branches</p> <pre><code>git branch\n</code></pre> <p>List all branches (local and remote)</p> <pre><code>git branch -a\n</code></pre> <p>Switch to an existing branch</p> <pre><code>git checkout branch-name\n</code></pre> <p>Alternative to switch branches (Git 2.23+)</p> <pre><code>git switch branch-name\n</code></pre> <p>Delete a branch (safe, prevents deletion of unmerged branches)</p> <pre><code>git branch -d branch-name\n</code></pre> <p>Force delete a branch</p> <pre><code>git branch -D branch-name\n</code></pre> <p>Rename current branch</p> <pre><code>git branch -m new-name\n</code></pre> <p>Rename specific branch</p> <pre><code>git branch -m old-name new-name\n</code></pre> <p>Push and track branch</p> <pre><code>git push -u origin branch-name\n</code></pre> <p>Compare branches</p> <pre><code>git diff branch1..branch2\n</code></pre>"},{"location":"#merging","title":"Merging","text":"<p>Merge a branch into current branch</p> <pre><code>git merge branch-name\n</code></pre> <p>Merge with no fast-forward (always creates merge commit)</p> <pre><code>git merge --no-ff branch-name\n</code></pre> <p>Merge and squash commits into a single one</p> <pre><code>git merge --squash branch-name\n</code></pre> <p>Abort an in-progress merge</p> <pre><code>git merge --abort\n</code></pre>"},{"location":"#rebasing","title":"Rebasing","text":"<p>Rebase current branch onto another</p> <pre><code>git rebase branch-name\n</code></pre> <p>Interactive rebase for editing commits</p> <pre><code>git rebase -i commit-hash\n</code></pre> <p>Continue rebase after resolving conflicts</p> <pre><code>git rebase --continue\n</code></pre>"},{"location":"#cherry-picking","title":"Cherry-picking","text":"<p>Apply a specific commit to current branch</p> <pre><code>git cherry-pick commit-hash\n</code></pre>"},{"location":"#handle-conflicts","title":"Handle Conflicts","text":"<p>Get a specific file from another branch</p> <pre><code>git checkout branch-name -- filename\n</code></pre> <p>List conflicting files</p> <pre><code>git diff --name-only --diff-filter=U\n</code></pre>"},{"location":"#remote-operations","title":"Remote Operations","text":""},{"location":"#remote-management","title":"Remote Management","text":"<p>Add a remote repository</p> <pre><code>git remote add origin https://github.com/username/repo.git\n</code></pre> <p>List all remotes with URLs</p> <pre><code>git remote -v\n</code></pre>"},{"location":"#sync-with-remotes","title":"Sync with Remotes","text":"<p>Download remote data without merging</p> <pre><code>git fetch origin\n</code></pre> <p>Download and merge from remote</p> <pre><code>git pull origin branch-name\n</code></pre> <p>Download and rebase instead of merging</p> <pre><code>git pull --rebase origin branch-name\n</code></pre> <p>Upload local commits to remote</p> <pre><code>git push origin branch-name\n</code></pre> <p>Push and set up tracking</p> <pre><code>git push -u origin branch-name\n</code></pre> <p>Delete a remote branch</p> <pre><code>git push origin --delete branch-name\n</code></pre> <p>List remote branches</p> <pre><code>git branch -r\n</code></pre>"},{"location":"#stash-clean","title":"Stash &amp; Clean","text":""},{"location":"#stash-management","title":"Stash Management","text":"<p>Save working changes temporarily</p> <pre><code>git stash\n</code></pre> <p>List all stashes</p> <pre><code>git stash list\n</code></pre> <p>Show stash details</p> <pre><code>git stash show -p\n</code></pre> <p>Apply stash without removing it</p> <pre><code>git stash apply\n</code></pre> <p>Apply and remove stash</p> <pre><code>git stash pop\n</code></pre> <p>Remove a stash</p> <pre><code>git stash drop\n</code></pre> <p>Remove all stashes</p> <pre><code>git stash clear\n</code></pre> <p>Stash specific files only</p> <pre><code>git stash push file1.txt file2.txt\n</code></pre> <p>Stash with a descriptive message</p> <pre><code>git stash push -m \"Work in progress on feature X\"\n</code></pre>"},{"location":"#working-directory-cleanup","title":"Working Directory Cleanup","text":"<p>Preview what would be removed</p> <pre><code>git clean -n\n</code></pre> <p>Remove untracked files</p> <pre><code>git clean -f\n</code></pre> <p>Remove untracked files and directories</p> <pre><code>git clean -fd\n</code></pre>"},{"location":"#history-inspection","title":"History &amp; Inspection","text":""},{"location":"#view-history","title":"View History","text":"<p>Show commit history</p> <pre><code>git log\n</code></pre> <p>Show compact history</p> <pre><code>git log --oneline\n</code></pre> <p>Show history with branch graph</p> <pre><code>git log --graph --oneline\n</code></pre> <p>Show history for a specific file</p> <pre><code>git log -- filename.txt\n</code></pre> <p>Show history with changes</p> <pre><code>git log -p\n</code></pre>"},{"location":"#inspect-changes","title":"Inspect Changes","text":"<p>See who changed each line in a file</p> <pre><code>git blame filename.txt\n</code></pre> <p>Show changes between working directory and HEAD</p> <pre><code>git diff\n</code></pre> <p>Show changes between staged and HEAD</p> <pre><code>git diff --staged\n</code></pre> <p>Compare two commits</p> <pre><code>git diff commit1 commit2\n</code></pre> <p>Compare two branches</p> <pre><code>git diff branch1 branch2\n</code></pre> <p>Show details of a specific commit</p> <pre><code>git show commit-hash\n</code></pre> <p>Search for specific content in history</p> <pre><code>git log -S\"search string\"\n</code></pre>"},{"location":"#tags-releases","title":"Tags &amp; Releases","text":""},{"location":"#tag-management","title":"Tag Management","text":"<p>Create a lightweight tag</p> <pre><code>git tag v1.0.0\n</code></pre> <p>Create an annotated tag</p> <pre><code>git tag -a v1.0.0 -m \"Version 1.0.0\"\n</code></pre> <p>List all tags</p> <pre><code>git tag\n</code></pre> <p>Show tag details</p> <pre><code>git show v1.0.0\n</code></pre> <p>Push specific tag to remote</p> <pre><code>git push origin v1.0.0\n</code></pre> <p>Push all tags to remote</p> <pre><code>git push --tags\n</code></pre> <p>Delete a local tag</p> <pre><code>git tag -d v1.0.0\n</code></pre> <p>Delete a remote tag</p> <pre><code>git push origin --delete v1.0.0\n</code></pre> <p>Checkout a tagged version</p> <pre><code>git checkout v1.0.0\n</code></pre> <p>Create a tag for a previous commit</p> <pre><code>git tag v0.9.0 commit-hash\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#fix-mistakes","title":"Fix Mistakes","text":"<p>Modify the last commit</p> <pre><code>git commit --amend\n</code></pre> <p>Undo last commit but keep changes staged</p> <pre><code>git reset --soft HEAD~1\n</code></pre> <p>Undo last commit and unstage changes</p> <pre><code>git reset HEAD~1\n</code></pre> <p>Discard all local changes</p> <pre><code>git reset --hard HEAD\n</code></pre> <p>View reference history log</p> <pre><code>git reflog\n</code></pre> <p>Recover deleted work from reflog</p> <pre><code>git branch recover-branch HEAD@{1}\n</code></pre> <p>Cancel current merge operation</p> <pre><code>git merge --abort\n</code></pre> <p>Create branch when in detached HEAD state</p> <pre><code>git checkout -b new-branch\n</code></pre> <p>Force push with safety mechanism</p> <pre><code>git push --force-with-lease\n</code></pre> <p>Optimize repository</p> <pre><code>git gc --aggressive\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced Usage","text":""},{"location":"#git-hooks","title":"Git Hooks","text":"<p>Path to pre-commit hook</p> <pre><code>.git/hooks/pre-commit\n</code></pre>"},{"location":"#object-inspection","title":"Object Inspection","text":"<p>Examine Git objects</p> <pre><code>git cat-file -p HEAD\n</code></pre>"},{"location":"#external-repositories","title":"External Repositories","text":"<p>Add a submodule</p> <pre><code>git submodule add https://github.com/user/repo\n</code></pre> <p>Add a subtree</p> <pre><code>git subtree add --prefix=lib https://github.com/user/repo main\n</code></pre>"},{"location":"#debugging","title":"Debugging","text":"<p>Find the commit that introduced a bug</p> <pre><code>git bisect start\ngit bisect bad  # Mark current commit as bad\ngit bisect good v1.0  # Mark a known good commit\n</code></pre>"},{"location":"#history-rewriting","title":"History Rewriting","text":"<p>Interactive history editing</p> <pre><code>git rebase -i HEAD~5\n</code></pre> <p>Rewrite complete history</p> <pre><code>git filter-repo --path path/to/remove --invert-paths\n</code></pre>"},{"location":"#patch-management","title":"Patch Management","text":"<p>Create a patch file</p> <pre><code>git format-patch -1 HEAD\n</code></pre> <p>Apply a patch file</p> <pre><code>git am &lt; patch-file.patch\n</code></pre>"},{"location":"#repository-management","title":"Repository Management","text":"<p>Create a portable repository bundle</p> <pre><code>git bundle create repo.bundle --all\n</code></pre> <p>Search code in repository</p> <pre><code>git grep -n \"TODO\"\n</code></pre> <p>Create additional working directory</p> <pre><code>git worktree add ../feature feature-branch\n</code></pre> <p>Partial repository checkout</p> <pre><code>git sparse-checkout set path/to/dir\n</code></pre>"},{"location":"#development-workflows","title":"Development Workflows","text":""},{"location":"#feature-development","title":"Feature Development","text":"<p>Start a new feature branch</p> <pre><code>git checkout -b feature/new-feature\n</code></pre> <p>Push new feature branch to remote</p> <pre><code>git push -u origin feature/new-feature\n</code></pre>"},{"location":"#working-with-forks","title":"Working with Forks","text":"<p>Add original repository as upstream</p> <pre><code>git remote add upstream https://github.com/original/repo.git\n</code></pre> <p>Sync fork with original repository</p> <pre><code>git fetch upstream &amp;&amp; git merge upstream/main\n</code></pre>"},{"location":"#gitflow-operations","title":"GitFlow Operations","text":"<p>Start a new feature using GitFlow</p> <pre><code>git flow feature start feature-name\n</code></pre> <p>Finish a feature using GitFlow</p> <pre><code>git flow feature finish feature-name\n</code></pre> <p>Start a new release using GitFlow</p> <pre><code>git flow release start 1.0.0\n</code></pre> <p>Finish a release using GitFlow</p> <pre><code>git flow release finish 1.0.0\n</code></pre> <p>Create a hotfix using GitFlow</p> <pre><code>git flow hotfix start 1.0.1\n</code></pre>"},{"location":"#exploring-git-topics","title":"Exploring Git Topics","text":"<p>Git Fundamentals</p> <ul> <li>Setting up Git and initializing repositories</li> <li>Essential everyday Git commands and workflows</li> </ul> <p>Branch Management</p> <ul> <li>Creating, managing, and navigating branches</li> <li>Combining branches with merge and rebase operations</li> </ul> <p>Remote Collaboration</p> <ul> <li>Working with remote repositories (push, pull, fetch)</li> <li>Temporarily storing changes and cleaning working directory</li> </ul> <p>Project History &amp; Versions</p> <ul> <li>Marking release points and version management</li> <li>Viewing project history and comparing changes</li> </ul> <p>Customization &amp; Troubleshooting</p> <ul> <li>Git configuration and command shortcuts</li> <li>Solving common Git problems</li> </ul> <p>Advanced Usage</p> <ul> <li>Advanced Git techniques and features</li> <li>Established Git workflows for teams</li> <li>Automating tasks with GitHub Actions</li> <li>Additional Git learning resources and references</li> </ul>"},{"location":"advanced-topics/","title":"Advanced Git Techniques","text":"<p>Elevate your Git mastery with powerful advanced techniques that enhance productivity and provide deeper insight into your repositories.</p>"},{"location":"advanced-topics/#git-hooks-and-automation","title":"Git Hooks and Automation","text":"<p>Git hooks are scripts that automatically run before or after specific Git events like commit, push, or merge.</p>"},{"location":"advanced-topics/#client-side-hooks","title":"Client-side Hooks","text":"<p>Client-side hooks run on your local machine:</p> <pre><code># Common client-side hooks and locations (.git/hooks/)\npre-commit       # Run before a commit is finalized\nprepare-commit-msg  # Edit default commit message\ncommit-msg      # Validate commit messages\npost-commit     # Run after a commit is completed\npre-rebase      # Run before rebasing\npost-checkout   # Run after checkout or switch\npre-push        # Run before pushing changes\n</code></pre> <p>Example <code>pre-commit</code> hook to check for trailing whitespace:</p> <pre><code>#!/bin/sh\n# .git/hooks/pre-commit\n\ngit diff --cached --name-only --diff-filter=ACM | while read file; do\n    # Check for trailing whitespace\n    if grep -q '[[:blank:]]$' \"$file\"; then\n        echo \"Error: Trailing whitespace found in $file\"\n        exit 1\n    fi\ndone\n</code></pre>"},{"location":"advanced-topics/#server-side-hooks","title":"Server-side Hooks","text":"<p>Server-side hooks run on remote repositories:</p> <pre><code># Common server-side hooks (.git/hooks/ on server)\npre-receive       # Run before refs are updated\nupdate            # Per-branch security check\npost-receive      # Run after entire push completes\n</code></pre> <p>Example <code>post-receive</code> hook to trigger CI/CD:</p> <pre><code>#!/bin/bash\n# .git/hooks/post-receive\n\nwhile read oldrev newrev ref\ndo\n    branch=$(echo $ref | cut -d'/' -f3)\n    if [ \"$branch\" = \"main\" ]; then\n        echo \"Deploying main branch...\"\n        # Deployment script logic here\n        /path/to/deploy_script.sh\n    fi\ndone\n</code></pre>"},{"location":"advanced-topics/#creating-custom-hooks","title":"Creating Custom Hooks","text":"<ol> <li>Create a script in <code>.git/hooks/</code> with the appropriate name</li> <li>Make it executable</li> <li>Write the script in any language (bash, Python, Ruby, etc.)</li> </ol> <pre><code># Create and make executable\ntouch .git/hooks/pre-commit\nchmod +x .git/hooks/pre-commit\n</code></pre>"},{"location":"advanced-topics/#sharing-hooks","title":"Sharing Hooks","text":"<p>Hooks aren't cloned with repositories, but can be shared using:</p> <pre><code># Set a shared hooks directory\ngit config core.hooksPath '/path/to/shared/hooks'\n\n# Initialize templates with hooks\ngit config --global init.templateDir '~/.git-templates'\nmkdir -p ~/.git-templates/hooks\n# Add your hooks to this directory\n</code></pre> <p>\ud83d\udca1 Tip: Consider using tools like Husky or pre-commit for more manageable Git hooks.</p>"},{"location":"advanced-topics/#git-internals","title":"Git Internals","text":"<p>Understanding Git's internal data model helps you leverage its full power.</p>"},{"location":"advanced-topics/#object-types","title":"Object Types","text":"<p>Git stores four types of objects:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Object  \u2502 Description               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 blob    \u2502 File content              \u2502\n\u2502 tree    \u2502 Directory listing         \u2502\n\u2502 commit  \u2502 Commit metadata and tree  \u2502\n\u2502 tag     \u2502 Named reference to object \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"advanced-topics/#references","title":"References","text":"<p>References are pointers to commits:</p> <pre><code># Examine references\ngit show-ref           # Show all references\ngit symbolic-ref HEAD  # Show what HEAD points to\n</code></pre> <p>Core references:</p> <ul> <li>HEAD: Current active reference</li> <li>refs/heads/: Local branches</li> <li>refs/remotes/: Remote branches</li> <li>refs/tags/: Tags</li> </ul>"},{"location":"advanced-topics/#the-git-database","title":"The Git Database","text":"<p>Git stores objects in <code>.git/objects</code>:</p> <pre><code># List all objects\nfind .git/objects -type f | sort\n\n# Create and view raw objects\necho 'test content' | git hash-object -w --stdin\n# Returns a hash like: a8a940627d132695a9769df4f5c48254c6b310f5\n\n# View the content of an object\ngit cat-file -p a8a940627d132695a9769df4f5c48254c6b310f5\n</code></pre>"},{"location":"advanced-topics/#packfiles","title":"Packfiles","text":"<p>Git optimizes storage by packing objects:</p> <pre><code># Force Git to create a packfile\ngit gc\n\n# List packed objects\ngit verify-pack -v .git/objects/pack/pack-*.idx\n\n# See where an object is stored\ngit rev-list --objects --all | grep a8a940\n</code></pre>"},{"location":"advanced-topics/#inspecting-git-objects","title":"Inspecting Git Objects","text":"<p>Examine Git's internal data:</p> <pre><code># Display commits with their trees\ngit log --pretty=raw\n\n# Display a specific tree\ngit ls-tree HEAD\n\n# Show a specific commit's metadata\ngit cat-file -p HEAD\n\n# Display a specific file's blob object\ngit hash-object path/to/file\ngit cat-file -p $(git hash-object path/to/file)\n</code></pre> <p>\ud83d\udca1 Tip: Understanding Git's object model helps with advanced operations like history rewriting and recovery.</p>"},{"location":"advanced-topics/#submodules-and-subtrees","title":"Submodules and Subtrees","text":"<p>Manage external dependencies within your Git repository.</p>"},{"location":"advanced-topics/#working-with-submodules","title":"Working with Submodules","text":"<p>Submodules are repositories nested within a repository:</p> <pre><code># Add a submodule\ngit submodule add https://github.com/username/repo path/to/submodule\n\n# Clone a repository with submodules\ngit clone --recurse-submodules https://github.com/username/main-repo\n\n# Initialize submodules in an existing checkout\ngit submodule init\ngit submodule update\n\n# Combined update and init\ngit submodule update --init --recursive\n\n# Update all submodules to latest\ngit submodule update --remote\n\n# Execute a command in each submodule\ngit submodule foreach 'git checkout main &amp;&amp; git pull'\n</code></pre>"},{"location":"advanced-topics/#working-with-subtrees","title":"Working with Subtrees","text":"<p>Subtrees merge external repositories into a subdirectory:</p> <pre><code># Add a subtree\ngit subtree add --prefix=path/to/subtree https://github.com/username/repo main --squash\n\n# Update a subtree\ngit subtree pull --prefix=path/to/subtree https://github.com/username/repo main --squash\n\n# Push changes back to subtree remote\ngit subtree push --prefix=path/to/subtree https://github.com/username/repo main\n</code></pre>"},{"location":"advanced-topics/#choosing-between-submodules-and-subtrees","title":"Choosing Between Submodules and Subtrees","text":"Feature Submodules Subtrees Workflow External repositories remain separate External code merged into your repo Tracking Points to a specific commit Full history can be included Updates Manual update required Can pull upstream changes Learning curve Steeper Simpler for users Best for Fixed dependencies Libraries you might modify <p>\u26a0\ufe0f Warning: Submodules point to specific commits. If the remote repository is deleted or commits are garbage collected, you might lose access to the code.</p>"},{"location":"advanced-topics/#bisect-and-blame","title":"Bisect and Blame","text":"<p>Find where and when specific changes were introduced.</p>"},{"location":"advanced-topics/#using-git-bisect","title":"Using Git Bisect","text":"<p>Binary search through history to find bug-introducing commits:</p> <pre><code># Start a bisect session\ngit bisect start\n\n# Mark the current version as bad (has the bug)\ngit bisect bad\n\n# Mark a known good commit (no bug)\ngit bisect good v1.0\n\n# Git checks out a middle commit\n# Test the application, then mark the commit\ngit bisect good  # If this commit doesn't have the bug\n# OR\ngit bisect bad   # If this commit has the bug\n\n# Continue until Git identifies the first bad commit\n# When done, reset to your original state\ngit bisect reset\n</code></pre> <p>Automate the process with a test script:</p> <pre><code># Automate the bisect process\ngit bisect start HEAD v1.0\ngit bisect run ./test_script.sh\n</code></pre>"},{"location":"advanced-topics/#using-git-blame","title":"Using Git Blame","text":"<p>Track changes to specific lines:</p> <pre><code># Show who changed each line in a file\ngit blame path/to/file\n\n# Limit to specific line range\ngit blame -L 10,20 path/to/file\n\n# Ignore whitespace changes\ngit blame -w path/to/file\n\n# Show the boundary commits\ngit blame -b path/to/file\n\n# Move lines within a file detection\ngit blame -M path/to/file\n\n# Move lines between files detection\ngit blame -C path/to/file\n</code></pre>"},{"location":"advanced-topics/#advanced-annotation-techniques","title":"Advanced Annotation Techniques","text":"<p>More ways to trace changes:</p> <pre><code># Combine log and diff for deeper investigation\ngit log -p path/to/file\n\n# See all commits affecting a specific line range\ngit log -L 10,20:path/to/file\n\n# Track a specific function's history\ngit log -L :functionName:path/to/file\n\n# Find who changed a line that no longer exists\ngit log -S \"deleted text\" -- path/to/file\n</code></pre> <p>\ud83d\udca1 Tip: Combine bisect and blame when investigating complex bugs: use bisect to find when the bug was introduced, then blame to see who wrote the code.</p>"},{"location":"advanced-topics/#advanced-history-rewriting","title":"Advanced History Rewriting","text":"<p>Modify your Git history for cleaner commits and better project organization.</p>"},{"location":"advanced-topics/#interactive-rebase","title":"Interactive Rebase","text":"<p>Fine-grained control over commit history:</p> <pre><code># Interactive rebase for the last 5 commits\ngit rebase -i HEAD~5\n\n# Interactive rebase from a specific commit\ngit rebase -i 7abc123^\n</code></pre> <p>Interactive rebase commands:</p> <ul> <li><code>pick</code> - Keep the commit</li> <li><code>reword</code> - Change commit message</li> <li><code>edit</code> - Pause for changes</li> <li><code>squash</code> - Combine with previous commit (keep both messages)</li> <li><code>fixup</code> - Combine with previous commit (discard message)</li> <li><code>drop</code> - Remove the commit</li> <li><code>exec</code> - Run a command after each step</li> </ul> <p>Advanced rebase options:</p> <pre><code># Automatically squash/fixup commits marked as such\ngit rebase -i --autosquash HEAD~5\n\n# Continue after resolving conflicts\ngit rebase --continue\n\n# Skip the current commit during rebase\ngit rebase --skip\n\n# Abort the entire rebase operation\ngit rebase --abort\n</code></pre>"},{"location":"advanced-topics/#filter-branch","title":"Filter-branch","text":"<p>Rewrite large sections of history:</p> <pre><code># Remove a specific file from all commits\ngit filter-branch --tree-filter 'rm -f path/to/large-file' HEAD\n\n# Remove a file only from past history, not recent commits\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch path/to/file' HEAD\n\n# Change author info globally\ngit filter-branch --env-filter '\n    if [ \"$GIT_AUTHOR_EMAIL\" = \"old@example.com\" ]; then\n        export GIT_AUTHOR_EMAIL=\"new@example.com\"\n        export GIT_AUTHOR_NAME=\"New Name\"\n    fi\n    if [ \"$GIT_COMMITTER_EMAIL\" = \"old@example.com\" ]; then\n        export GIT_COMMITTER_EMAIL=\"new@example.com\"\n        export GIT_COMMITTER_NAME=\"New Name\"\n    fi\n' --tag-name-filter cat -- --all\n</code></pre> <p>\u26a0\ufe0f Warning: <code>filter-branch</code> is powerful but slow. Modern Git recommends <code>git filter-repo</code> instead.</p>"},{"location":"advanced-topics/#git-filter-repo","title":"Git Filter-repo","text":"<p>A faster, more powerful alternative to filter-branch:</p> <pre><code># First, install git-filter-repo\n\n# Remove a specific file from history\ngit filter-repo --path path/to/large-file --invert-paths\n\n# Replace email addresses\ngit filter-repo --email-callback 'return email.replace(b\"old@example.com\", b\"new@example.com\")'\n\n# Set a mailmap\ngit filter-repo --mailmap ../mailmap.txt\n</code></pre>"},{"location":"advanced-topics/#rewriting-author-information","title":"Rewriting Author Information","text":"<p>Change commit authorship:</p> <pre><code># Amend the last commit with new author info\ngit commit --amend --author=\"New Author &lt;email@example.com&gt;\"\n\n# Change author info during interactive rebase\n# Mark a commit for edit, then:\ngit commit --amend --author=\"New Author &lt;email@example.com&gt;\" --no-edit\ngit rebase --continue\n\n# Use git-filter-repo for bulk changes\ngit filter-repo --name-callback 'return name.replace(b\"Old Name\", b\"New Name\")'\n</code></pre> <p>\u26a0\ufe0f Warning: Rewriting history changes commit IDs. Never rewrite history that's been shared with others unless you've coordinated with them.</p>"},{"location":"advanced-topics/#patches-and-bundles","title":"Patches and Bundles","text":"<p>Git provides tools for exchanging changes outside of typical remote workflows.</p>"},{"location":"advanced-topics/#creating-and-applying-patches","title":"Creating and Applying Patches","text":"<p>Share changes via patch files:</p> <pre><code># Create a patch from the last commit\ngit format-patch -1\n\n# Create patches for all commits not in main\ngit format-patch main\n\n# Create a patch series with cover letter\ngit format-patch -n master --cover-letter\n\n# Apply a patch\ngit apply path/to/patch.patch  # Without committing\ngit am path/to/patch.patch     # Apply and create commit\n\n# Apply a mailbox of patches\ngit am path/to/patches/*.patch\n\n# Handle patch application conflicts\ngit am --abort     # Abort the patch application\ngit am --skip      # Skip the current patch\ngit am --continue  # Continue after resolving conflicts\n</code></pre>"},{"location":"advanced-topics/#working-with-git-bundles","title":"Working with Git Bundles","text":"<p>Transport commits without a remote server:</p> <pre><code># Create a bundle of all commits\ngit bundle create repo.bundle --all\n\n# Create a bundle of commits not in a remote\ngit bundle create commits.bundle origin/main..HEAD\n\n# Verify a bundle\ngit bundle verify commits.bundle\n\n# List commits in a bundle\ngit bundle list-heads commits.bundle\n\n# Clone from a bundle\ngit clone -b main commits.bundle new-repo\n\n# Pull from a bundle\ngit pull commits.bundle main\n</code></pre>"},{"location":"advanced-topics/#email-based-workflows","title":"Email-based Workflows","text":"<p>Send and receive changes via email:</p> <pre><code># Configure Git for email\ngit config --global sendemail.smtpserver smtp.example.com\ngit config --global sendemail.smtpuser username\n\n# Send patches via email\ngit format-patch -1 --stdout | git send-email --to=recipient@example.com\n\n# Send a patch series\ngit send-email *.patch --cover-letter --annotate\n\n# Apply emailed patches\ngit am &lt; received-patch.patch\n</code></pre> <p>\ud83d\udca1 Tip: Patches and bundles are useful for offline collaboration or when working with contributors who don't have direct repository access.</p>"},{"location":"advanced-topics/#advanced-searching-and-filtering","title":"Advanced Searching and Filtering","text":"<p>Find specific changes and code in large repositories.</p>"},{"location":"advanced-topics/#advanced-log-filtering","title":"Advanced Log Filtering","text":"<p>Filter commit history with precision:</p> <pre><code># Show commits matching a pattern\ngit log --grep=\"bug fix\"\n\n# Case-insensitive search\ngit log --grep=\"feature\" --regexp-ignore-case\n\n# Filter by author\ngit log --author=\"Jane Smith\"\n\n# Filter by committer\ngit log --committer=\"John Doe\"\n\n# Filter by date range\ngit log --since=\"2023-01-01\" --until=\"2023-01-31\"\n\n# Filter by file\ngit log -- path/to/file.js\n\n# Filter by content changes\ngit log -S\"function getName\" --patch\n\n# Show only merge commits\ngit log --merges\n\n# Show commits that added or removed a specific string\ngit log -p -S\"SearchString\"\n</code></pre>"},{"location":"advanced-topics/#git-grep","title":"Git Grep","text":"<p>Search the working directory:</p> <pre><code># Search for a pattern in tracked files\ngit grep \"TODO\"\n\n# Show line numbers\ngit grep -n \"TODO\"\n\n# Search only specific files\ngit grep \"function\" -- \"*.js\"\n\n# Case-insensitive search\ngit grep -i \"error\"\n\n# Show context lines around matches\ngit grep -A 2 -B 2 \"important function\"\n\n# Search across all branches\ngit grep \"TODO\" $(git show-ref --heads)\n</code></pre>"},{"location":"advanced-topics/#searching-commit-content","title":"Searching Commit Content","text":"<p>Find when a specific code pattern was introduced:</p> <pre><code># Search through commit diffs\ngit log -p -S\"function getUserData\" --all\n\n# Search using regex\ngit log -p -G\"user[A-Z][a-z]+Data\" --all\n\n# Find when a specific line was changed\ngit log -L '/function start/,/function end/':file.js\n</code></pre>"},{"location":"advanced-topics/#pickaxe-search","title":"Pickaxe Search","text":"<p>Track the evolution of specific code:</p> <pre><code># Find when a string was added or removed\ngit log -S\"importantString\" --oneline\n\n# Find commits that changed the number of occurrences of a string\ngit log -G\"pattern\" --patch\n\n# Combine with author filter\ngit log -S\"SecurityFix\" --author=\"Security Team\" --patch\n</code></pre> <p>\ud83d\udca1 Tip: For complex searches, combine multiple search flags to narrow down results.</p>"},{"location":"advanced-topics/#git-attributes-and-features","title":"Git Attributes and Features","text":"<p>Configure special handling for different file types.</p>"},{"location":"advanced-topics/#setting-attributes","title":"Setting Attributes","text":"<p>Git attributes control how Git handles specific files:</p> <pre><code># Create a .gitattributes file\ntouch .gitattributes\n\n# Common .gitattributes entries\n*.txt text\n*.png binary\n*.jpg binary\n*.sh text eol=lf\n*.bat text eol=crlf\n</code></pre>"},{"location":"advanced-topics/#keyword-expansion","title":"Keyword Expansion","text":"<p>Set up RCS-style keyword expansion:</p> <pre><code># In .gitattributes\n*.txt ident\n\n# In the text file, use:\n# $Id$\n# $Date$\n</code></pre> <p>Enabling ident filter:</p> <pre><code>git config --global filter.indent.clean \"sed -e 's/\\$Id[^$]*\\\\$/\\$Id\\\\$/'\"\ngit config --global filter.indent.smudge \"sed -e 's/\\$Id\\\\$/\\$Id: $(git describe)\\\\$/'\"\n</code></pre>"},{"location":"advanced-topics/#export-ignore","title":"Export-ignore","text":"<p>Exclude files from archives:</p> <pre><code># In .gitattributes - exclude from git archive\n/tests export-ignore\n/.github export-ignore\n/docs export-ignore\n.gitignore export-ignore\n.gitattributes export-ignore\n</code></pre>"},{"location":"advanced-topics/#merge-strategies","title":"Merge Strategies","text":"<p>Define custom merge strategies:</p> <pre><code># In .gitattributes\ndatabase.xml merge=ours\n\n# Configure Git to use the strategy\ngit config merge.ours.driver \"true\"\n</code></pre> <p>Common merge drivers:</p> <ul> <li><code>ours</code> - Always keep our version</li> <li><code>theirs</code> - Always keep their version</li> <li><code>union</code> - Include both versions (for text files)</li> </ul>"},{"location":"advanced-topics/#diff-drivers","title":"Diff Drivers","text":"<p>Configure how Git generates diffs for special files:</p> <pre><code># In .gitattributes\n*.png diff=exif\n\n# Configure the diff driver\ngit config diff.exif.textconv exiftool\n</code></pre> <p>Example diff drivers:</p> <pre><code># Word documents\n*.docx diff=word\ngit config diff.word.textconv \"docx2txt &lt; \\\"$1\\\"\"\n\n# PDF documents\n*.pdf diff=pdf\ngit config diff.pdf.textconv \"pdftotext \\\"$1\\\" -\"\n</code></pre> <p>\ud83d\udca1 Tip: Git attributes can dramatically improve the handling of binary files and specialized file formats. They can also enforce consistent line endings across teams.</p>"},{"location":"advanced-topics/#working-with-monorepos","title":"Working with Monorepos","text":"<p>Techniques for managing large repositories with multiple projects.</p>"},{"location":"advanced-topics/#sparse-checkouts","title":"Sparse Checkouts","text":"<p>Check out only parts of a repository:</p> <pre><code># Enable sparse checkout\ngit config core.sparseCheckout true\n\n# Define what to check out\necho \"path/to/include/\" &gt;&gt; .git/info/sparse-checkout\necho \"another/path/\" &gt;&gt; .git/info/sparse-checkout\necho \"!path/to/exclude/\" &gt;&gt; .git/info/sparse-checkout\n\n# Update working directory\ngit read-tree -mu HEAD\n\n# Using cone mode (Git 2.25+)\ngit sparse-checkout init --cone\ngit sparse-checkout set path/to/include another/path\n</code></pre>"},{"location":"advanced-topics/#partial-clones","title":"Partial Clones","text":"<p>Clone only part of a repository:</p> <pre><code># Exclude blobs (file contents) at clone time\ngit clone --filter=blob:none https://github.com/user/repo.git\n\n# Exclude trees (directories) for single branch\ngit clone --filter=tree:0 --single-branch https://github.com/user/repo.git\n\n# Filter with blobless option (Git 2.27+)\ngit clone --filter=blob:none --also-filter-submodules https://github.com/user/repo.git\n\n# Fetch file content on demand\ngit rev-list --objects --all --filter=blob:limit=1m\n</code></pre>"},{"location":"advanced-topics/#git-extensions-for-large-repos","title":"Git Extensions for Large Repos","text":"<p>Tools to help manage large repositories:</p> <pre><code># Git LFS setup\ngit lfs install\ngit lfs track \"*.psd\"\ngit lfs track \"*.zip\"\ngit add .gitattributes\ngit add file.psd\ngit commit -m \"Add large file\"\n\n# VFS for Git (previously GVFS) for extremely large repos\n# This is a specialized system used by very large projects\n</code></pre> <p>\ud83d\udca1 Tip: For monorepos, consider implementing project-specific hooks and CI workflows to isolate changes and testing.</p>"},{"location":"advanced-topics/#custom-git-commands","title":"Custom Git Commands","text":"<p>Create your own Git commands for specialized workflows.</p>"},{"location":"advanced-topics/#creating-custom-commands","title":"Creating Custom Commands","text":"<p>Make new Git commands with aliases or scripts:</p> <pre><code># Create an alias command\ngit config --global alias.new-command '!git command1 &amp;&amp; git command2'\n\n# Create a Git command script\n# 1. Create a script file named git-custom-cmd\n#!/bin/bash\n# Script content here\n\n# 2. Make it executable\nchmod +x git-custom-cmd\n\n# 3. Place it on your PATH\n# Now you can use: git custom-cmd\n</code></pre>"},{"location":"advanced-topics/#useful-custom-commands","title":"Useful Custom Commands","text":"<p>Example custom commands:</p> <pre><code># Show a compact log with graph\ngit config --global alias.compact-log 'log --graph --pretty=format:\"%C(yellow)%h%Creset %C(blue)%an%Creset:%C(red)%d%Creset %s %C(green)(%cr)%Creset\" --abbrev-commit'\n\n# Show all uncommitted changes\ngit config --global alias.changes '!git diff &amp;&amp; git diff --staged'\n\n# List all aliases\ngit config --global alias.aliases '!git config --get-regexp \"^alias\\\\.\" | sed -e \"s/^alias\\\\.//g\" -e \"s/\\\\ /\\\\ =\\\\ /g\"'\n\n# See last 10 commits in a pretty format\ngit config --global alias.recent 'log -10 --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short'\n</code></pre>"},{"location":"advanced-topics/#extending-git","title":"Extending Git","text":"<p>More advanced extensions:</p> <pre><code># Create a Git extension for complex operations\ncat &gt; ~/bin/git-find-merge &lt;&lt;EOF\n#!/bin/bash\ncommit=\\$1\nfor branch in \\$(git for-each-ref --format=\"%(refname)\" refs/heads); do\n    if git rev-list \\$branch | grep -q \"\\$commit\"; then\n        echo \\$branch\n    fi\ndone\nEOF\nchmod +x ~/bin/git-find-merge\n\n# Usage\ngit find-merge 7abc123\n</code></pre> <p>\ud83d\udca1 Tip: Custom commands can greatly streamline team-specific or project-specific workflows. Share them with your team for consistent processes.</p>"},{"location":"advanced-topics/#advanced-branch-management","title":"Advanced Branch Management","text":"<p>Advanced techniques for branch organization and management.</p>"},{"location":"advanced-topics/#orphan-branches","title":"Orphan Branches","text":"<p>Create branches with no connection to existing history:</p> <pre><code># Create an orphan branch\ngit checkout --orphan new-branch\n\n# Clean the working directory\ngit rm -rf .\n\n# Create new content and commit\necho \"New content\" &gt; file.txt\ngit add file.txt\ngit commit -m \"Initial commit in orphan branch\"\n</code></pre> <p>Use cases:</p> <ul> <li>GitHub Pages branches (<code>gh-pages</code>)</li> <li>Separate documentation history</li> <li>Starting fresh without previous baggage</li> </ul>"},{"location":"advanced-topics/#worktrees","title":"Worktrees","text":"<p>Work on multiple branches simultaneously without switching:</p> <pre><code># Add a new worktree\ngit worktree add ../path/to/worktree branch-name\n\n# Add a new worktree with a new branch\ngit worktree add -b new-branch ../path/to/worktree main\n\n# List worktrees\ngit worktree list\n\n# Remove a worktree\ngit worktree remove ../path/to/worktree\n\n# Prune worktree information\ngit worktree prune\n</code></pre>"},{"location":"advanced-topics/#reference-specifications","title":"Reference Specifications","text":"<p>Advanced refspec usage:</p> <pre><code># Push a local branch to a differently named remote branch\ngit push origin local-branch:remote-branch\n\n# Delete a remote branch\ngit push origin :branch-to-delete\n\n# Pull a remote branch to a differently named local branch\ngit pull origin remote-branch:local-branch\n\n# Fetch all branches\ngit fetch origin '+refs/heads/*:refs/remotes/origin/*'\n\n# Fetch pull requests from GitHub\ngit fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*'\n</code></pre>"},{"location":"advanced-topics/#namespaces","title":"Namespaces","text":"<p>Organize refs with namespaces:</p> <pre><code># Create a namespaced tag\ngit tag refs/namespaces/project/tags/v1.0\n\n# Create a namespaced branch\ngit branch refs/namespaces/experiment/branches/feature\n\n# Push namespaced refs\ngit push origin 'refs/namespaces/project/*:refs/namespaces/project/*'\n</code></pre> <p>\ud83d\udca1 Tip: Worktrees are especially useful for quickly switching context, like fixing a bug while in the middle of developing a feature, without stashing changes.</p>"},{"location":"advanced-topics/#performance-optimization","title":"Performance Optimization","text":"<p>Techniques to make Git operations faster and more efficient.</p>"},{"location":"advanced-topics/#repository-maintenance","title":"Repository Maintenance","text":"<p>Keep your repository efficient:</p> <pre><code># Remove unnecessary files\ngit gc\n\n# More aggressive optimization\ngit gc --aggressive\n\n# Optimize how files are stored\ngit repack -a -d\n\n# Prune unreachable objects immediately\ngit prune\n\n# Verify the database integrity\ngit fsck\n\n# Count objects for size information\ngit count-objects -v\n</code></pre>"},{"location":"advanced-topics/#shallow-clones-and-sparse-checkouts","title":"Shallow Clones and Sparse Checkouts","text":"<p>Optimize Git for large repositories:</p> <pre><code># Shallow clone (only recent history)\ngit clone --depth=1 https://github.com/user/repo.git\n\n# Fetch additional history later\ngit fetch --unshallow\n\n# Fetch specific depth\ngit fetch --depth=100\n\n# Sparse checkout (only specific directories)\ngit sparse-checkout set dir1/ dir2/\n</code></pre>"},{"location":"advanced-topics/#optimizing-git-config","title":"Optimizing Git Config","text":"<p>Settings to improve performance:</p> <pre><code># Faster status operations\ngit config --global core.untrackedCache true\ngit config --global core.fsmonitor true\n\n# Parallel operations\ngit config --global submodule.fetchJobs 8\ngit config --global fetch.parallel 8\n\n# Reuse recorded resolutions\ngit config --global rerere.enabled true\n\n# Delta compression options\ngit config --global core.preloadIndex true\ngit config --global core.deltaBaseCacheLimit 2g\n</code></pre> <p>\ud83d\udca1 Tip: Periodic maintenance (<code>git gc</code> and <code>git prune</code>) keeps your repository lean and operations fast. Schedule these as regular tasks for large repositories.</p>"},{"location":"advanced-topics/#command-summary","title":"Command Summary","text":"Command Description Example <code>git hook</code> Automation scripts <code>.git/hooks/pre-commit</code> <code>git cat-file</code> Inspect Git objects <code>git cat-file -p HEAD</code> <code>git submodule</code> Manage external repos <code>git submodule add https://github.com/user/repo</code> <code>git subtree</code> Merge external repos <code>git subtree add --prefix=lib https://github.com/user/repo main</code> <code>git bisect</code> Find buggy commit <code>git bisect start; git bisect bad; git bisect good v1.0</code> <code>git blame</code> Show who changed lines <code>git blame -L 10,20 file.txt</code> <code>git rebase -i</code> Interactive history editing <code>git rebase -i HEAD~5</code> <code>git filter-repo</code> Rewrite history <code>git filter-repo --path path/to/remove --invert-paths</code> <code>git format-patch</code> Create patch files <code>git format-patch -1 HEAD</code> <code>git am</code> Apply patches <code>git am &lt; patch-file.patch</code> <code>git bundle</code> Create portable repos <code>git bundle create repo.bundle --all</code> <code>git grep</code> Search code <code>git grep -n \"TODO\"</code> <code>git worktree</code> Multiple working dirs <code>git worktree add ../feature feature-branch</code> <code>git gc</code> Repository maintenance <code>git gc --aggressive</code> <code>git sparse-checkout</code> Partial directory checkout <code>git sparse-checkout set path/to/dir</code>"},{"location":"advanced-topics/#related-topics","title":"Related Topics","text":"<ul> <li>Solving common Git problems</li> <li>Established Git workflows for teams</li> <li>Automating tasks with GitHub Actions</li> </ul> <p>Next: Established Git workflows for teams</p>"},{"location":"basic-usage/","title":"Essential Everyday Git Commands and Workflows","text":"<p>Your guide to the fundamental Git operations you'll use in daily development work.</p>"},{"location":"basic-usage/#the-basic-git-workflow","title":"The Basic Git Workflow","text":"<p>Git operations follow a three-step workflow that moves changes through different areas:</p> <pre><code>graph LR\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Repository]\n    C --&gt;|git checkout| A\n</code></pre> <ol> <li>Working Directory: Where you modify files</li> <li>Staging Area (Index): Where you prepare changes for commit</li> <li>Repository (.git): Where Git permanently stores changes as commits</li> </ol> <p>This workflow allows you to:</p> <ul> <li>Work on multiple changes simultaneously</li> <li>Craft fine-grained commits that group related changes</li> <li>Review and refine changes before committing them</li> </ul>"},{"location":"basic-usage/#working-with-files","title":"Working with Files","text":""},{"location":"basic-usage/#checking-status","title":"Checking Status","text":"<p>Check the status of your working directory:</p>"},{"location":"basic-usage/#see-status-with-detailed-information","title":"See status with detailed information","text":"<pre><code>git status\n</code></pre>"},{"location":"basic-usage/#see-a-compact-status-display","title":"See a compact status display","text":"<pre><code>git status -s\n</code></pre> <p>Or:</p> <pre><code>git status --short\n</code></pre> <p>Status codes in short format:</p> <ul> <li><code>??</code> = Untracked files</li> <li><code>A</code> = Files added to stage</li> <li><code>M</code> = Modified files</li> <li><code>D</code> = Deleted files</li> <li>Left column = staging area, Right column = working directory</li> </ul>"},{"location":"basic-usage/#adding-files","title":"Adding Files","text":"<p>Stage files for the next commit:</p>"},{"location":"basic-usage/#add-a-specific-file","title":"Add a specific file","text":"<pre><code>git add filename.txt\n</code></pre>"},{"location":"basic-usage/#add-multiple-files","title":"Add multiple files","text":"<pre><code>git add file1.txt file2.txt\n</code></pre>"},{"location":"basic-usage/#add-all-files-in-the-current-directory","title":"Add all files in the current directory","text":"<pre><code>git add .\n</code></pre>"},{"location":"basic-usage/#add-all-files-in-the-entire-repository","title":"Add all files in the entire repository","text":"<pre><code>git add -A\n</code></pre> <p>Or:</p> <pre><code>git add --all\n</code></pre>"},{"location":"basic-usage/#add-files-interactively","title":"Add files interactively","text":"<p>Review each change:</p> <pre><code>git add -p\n</code></pre> <p>Or:</p> <pre><code>git add --patch\n</code></pre>"},{"location":"basic-usage/#add-all-tracked-files-with-modifications","title":"Add all tracked files with modifications","text":"<pre><code>git add -u\n</code></pre> <p>Or:</p> <pre><code>git add --update\n</code></pre>"},{"location":"basic-usage/#ignoring-files","title":"Ignoring Files","text":"<p>Use a <code>.gitignore</code> file to exclude files from being tracked:</p>"},{"location":"basic-usage/#create-a-gitignore-file","title":"Create a .gitignore file","text":"<pre><code>touch .gitignore\n</code></pre> <p>Common patterns for <code>.gitignore</code>:</p> <pre><code># Ignore specific file\nspecific-file.txt\n\n# Ignore file type\n*.log\n*.tmp\n\n# Ignore entire directory\nlogs/\ntemp/\nnode_modules/\n\n# Ignore all except specific files\n*.json\n!package.json\n!package-lock.json\n\n# Ignore files with tilde at the end (backup files)\n*~\n</code></pre> <p>\ud83d\udca1 Tip: Find pre-configured <code>.gitignore</code> templates for various project types at github.com/github/gitignore</p>"},{"location":"basic-usage/#moving-and-renaming-files","title":"Moving and Renaming Files","text":"<p>Git treats renaming as a delete and add operation, but provides a shortcut:</p>"},{"location":"basic-usage/#rename-a-file-and-update-the-index","title":"Rename a file and update the index","text":"<pre><code>git mv old-name.txt new-name.txt\n</code></pre>"},{"location":"basic-usage/#move-a-file-to-a-different-directory","title":"Move a file to a different directory","text":"<pre><code>git mv file.txt path/to/new/location/\n</code></pre>"},{"location":"basic-usage/#deleting-files","title":"Deleting Files","text":"<p>Remove files from both the working directory and the index:</p>"},{"location":"basic-usage/#remove-a-file","title":"Remove a file","text":"<pre><code>git rm filename.txt\n</code></pre>"},{"location":"basic-usage/#remove-a-file-that-has-already-been-deleted-from-the-filesystem","title":"Remove a file that has already been deleted from the filesystem","text":"<pre><code>git rm --cached filename.txt\n</code></pre>"},{"location":"basic-usage/#remove-a-directory-recursively","title":"Remove a directory recursively","text":"<pre><code>git rm -r directory/\n</code></pre>"},{"location":"basic-usage/#making-commits","title":"Making Commits","text":""},{"location":"basic-usage/#creating-commits","title":"Creating Commits","text":"<p>Record staged changes as a commit:</p>"},{"location":"basic-usage/#create-a-commit-with-a-message","title":"Create a commit with a message","text":"<pre><code>git commit -m \"Add feature X\"\n</code></pre>"},{"location":"basic-usage/#create-a-commit-with-a-multiline-message","title":"Create a commit with a multiline message","text":"<p>Opens editor:</p> <pre><code>git commit\n</code></pre>"},{"location":"basic-usage/#add-and-commit-tracked-files-in-one-command","title":"Add and commit tracked files in one command","text":"<pre><code>git commit -am \"Fix bug in feature Y\"\n</code></pre>"},{"location":"basic-usage/#add-all-changes-and-commit-with-a-message","title":"Add all changes and commit with a message","text":"<pre><code>git add -A &amp;&amp; git commit -m \"Implement feature Z\"\n</code></pre>"},{"location":"basic-usage/#add-only-specified-files-and-commit-in-one-step","title":"Add only specified files and commit in one step","text":"<pre><code>git commit file1.txt file2.txt -m \"Update specific files\"\n</code></pre>"},{"location":"basic-usage/#writing-good-commit-messages","title":"Writing Good Commit Messages","text":"<p>Structure your commit messages for better readability and history:</p> <pre><code>Short summary (50 chars or less)\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters. The blank line separating the summary from the body is\ncritical (unless you omit the body entirely).\n\n- Bullet points are okay\n- Typically a hyphen or asterisk is used, preceded by a space\n\nRelates to: #123\n</code></pre> <p>\ud83d\udca1 Tip: Follow the \"50/72\" rule: Keep the first line under 50 characters and other lines under 72 characters.</p>"},{"location":"basic-usage/#amending-commits","title":"Amending Commits","text":"<p>Update the most recent commit:</p>"},{"location":"basic-usage/#change-the-commit-message-of-the-latest-commit","title":"Change the commit message of the latest commit","text":"<pre><code>git commit --amend -m \"New commit message\"\n</code></pre>"},{"location":"basic-usage/#add-missed-changes-to-the-latest-commit-without-changing-the-message","title":"Add missed changes to the latest commit without changing the message","text":"<pre><code>git add forgotten-file.txt\ngit commit --amend --no-edit\n</code></pre>"},{"location":"basic-usage/#amend-author-information-for-the-latest-commit","title":"Amend author information for the latest commit","text":"<pre><code>git commit --amend --author=\"New Name &lt;new.email@example.com&gt;\"\n</code></pre> <p>\u26a0\ufe0f Warning: Never amend commits that have been pushed to a shared repository unless you're absolutely certain no one else has based their work on them.</p>"},{"location":"basic-usage/#commit-best-practices","title":"Commit Best Practices","text":"<ol> <li>Commit Atomic Changes: Each commit should represent a single logical change</li> <li>Commit Frequently: Smaller, more focused commits are easier to understand and review</li> <li>Write Meaningful Messages: Explain what changed and why (not how)</li> <li>Use Present Tense: \"Add feature\" instead of \"Added feature\"</li> <li>Reference Issues: Include issue/ticket numbers in commit messages when applicable</li> </ol>"},{"location":"basic-usage/#viewing-changes","title":"Viewing Changes","text":""},{"location":"basic-usage/#viewing-uncommitted-changes","title":"Viewing Uncommitted Changes","text":"<p>Compare your working directory or staging area with the repository:</p>"},{"location":"basic-usage/#show-unstaged-changes","title":"Show unstaged changes","text":"<pre><code>git diff\n</code></pre>"},{"location":"basic-usage/#show-staged-changes","title":"Show staged changes","text":"<pre><code>git diff --staged\n</code></pre> <p>Or:</p> <pre><code>git diff --cached\n</code></pre>"},{"location":"basic-usage/#show-all-changes-staged-and-unstaged","title":"Show all changes (staged and unstaged)","text":"<pre><code>git diff HEAD\n</code></pre>"},{"location":"basic-usage/#show-changes-for-a-specific-file","title":"Show changes for a specific file","text":"<pre><code>git diff -- filename.txt\n</code></pre>"},{"location":"basic-usage/#viewing-commit-history","title":"Viewing Commit History","text":"<p>View the commit history of your repository:</p>"},{"location":"basic-usage/#show-commit-history","title":"Show commit history","text":"<pre><code>git log\n</code></pre>"},{"location":"basic-usage/#show-commit-history-with-a-graph","title":"Show commit history with a graph","text":"<pre><code>git log --graph\n</code></pre>"},{"location":"basic-usage/#show-compact-commit-history-one-line-per-commit","title":"Show compact commit history (one line per commit)","text":"<pre><code>git log --oneline\n</code></pre>"},{"location":"basic-usage/#show-commits-with-patches-diffs","title":"Show commits with patches (diffs)","text":"<pre><code>git log -p\n</code></pre>"},{"location":"basic-usage/#show-statistics-for-each-commit","title":"Show statistics for each commit","text":"<pre><code>git log --stat\n</code></pre>"},{"location":"basic-usage/#show-commit-history-for-a-specific-file","title":"Show commit history for a specific file","text":"<pre><code>git log -- filename.txt\n</code></pre>"},{"location":"basic-usage/#show-commit-history-with-date-ranges","title":"Show commit history with date ranges","text":"<pre><code>git log --since=\"2 weeks ago\"\n</code></pre> <pre><code>git log --until=\"yesterday\"\n</code></pre>"},{"location":"basic-usage/#examining-specific-commits","title":"Examining Specific Commits","text":"<p>Inspect specific commits in detail:</p>"},{"location":"basic-usage/#show-details-of-a-specific-commit","title":"Show details of a specific commit","text":"<pre><code>git show commit_hash\n</code></pre>"},{"location":"basic-usage/#show-changes-in-a-specific-file-from-a-commit","title":"Show changes in a specific file from a commit","text":"<pre><code>git show commit_hash:filename.txt\n</code></pre>"},{"location":"basic-usage/#show-the-content-of-a-file-at-a-specific-commit","title":"Show the content of a file at a specific commit","text":"<pre><code>git show commit_hash:filename.txt\n</code></pre>"},{"location":"basic-usage/#undoing-changes","title":"Undoing Changes","text":""},{"location":"basic-usage/#discarding-working-directory-changes","title":"Discarding Working Directory Changes","text":"<p>Discard uncommitted changes:</p>"},{"location":"basic-usage/#discard-changes-to-a-specific-file-in-working-directory","title":"Discard changes to a specific file in working directory","text":"<pre><code>git restore filename.txt\n</code></pre> <p>Or (older syntax):</p> <pre><code>git checkout -- filename.txt\n</code></pre>"},{"location":"basic-usage/#discard-all-changes-in-working-directory","title":"Discard all changes in working directory","text":"<pre><code>git restore .\n</code></pre> <p>Or (older syntax):</p> <pre><code>git checkout -- .\n</code></pre>"},{"location":"basic-usage/#unstaging-changes","title":"Unstaging Changes","text":"<p>Remove changes from the staging area:</p>"},{"location":"basic-usage/#unstage-a-specific-file","title":"Unstage a specific file","text":"<pre><code>git restore --staged filename.txt\n</code></pre> <p>Or (older syntax):</p> <pre><code>git reset HEAD filename.txt\n</code></pre>"},{"location":"basic-usage/#unstage-all-files","title":"Unstage all files","text":"<pre><code>git restore --staged .\n</code></pre> <p>Or (older syntax):</p> <pre><code>git reset HEAD\n</code></pre>"},{"location":"basic-usage/#reverting-commits","title":"Reverting Commits","text":"<p>Create new commits that undo previous commits:</p>"},{"location":"basic-usage/#revert-the-most-recent-commit","title":"Revert the most recent commit","text":"<pre><code>git revert HEAD\n</code></pre>"},{"location":"basic-usage/#revert-a-specific-commit","title":"Revert a specific commit","text":"<pre><code>git revert commit_hash\n</code></pre>"},{"location":"basic-usage/#revert-multiple-commits","title":"Revert multiple commits","text":"<pre><code>git revert older_commit_hash..newer_commit_hash\n</code></pre>"},{"location":"basic-usage/#revert-a-merge-commit","title":"Revert a merge commit","text":"<pre><code>git revert -m 1 merge_commit_hash\n</code></pre> <p>\ud83d\udca1 Tip: Revert is the safest way to undo changes that have been shared with others since it doesn't alter history.</p>"},{"location":"basic-usage/#resetting","title":"Resetting","text":"<p>Move branch pointer to a different commit (use with caution):</p>"},{"location":"basic-usage/#reset-staging-area-to-match-most-recent-commit","title":"Reset staging area to match most recent commit","text":"<p>Leaves working directory unchanged:</p> <pre><code>git reset\n</code></pre>"},{"location":"basic-usage/#reset-staging-area-and-working-directory-to-match-most-recent-commit","title":"Reset staging area and working directory to match most recent commit","text":"<pre><code>git reset --hard\n</code></pre>"},{"location":"basic-usage/#move-current-branch-to-a-specific-commit-keeping-changes-in-working-directory","title":"Move current branch to a specific commit, keeping changes in working directory","text":"<pre><code>git reset commit_hash\n</code></pre>"},{"location":"basic-usage/#move-current-branch-to-a-specific-commit-discarding-all-changes","title":"Move current branch to a specific commit, discarding all changes","text":"<pre><code>git reset --hard commit_hash\n</code></pre>"},{"location":"basic-usage/#move-current-branch-to-a-specific-commit-keeping-changes-as-unstaged","title":"Move current branch to a specific commit, keeping changes as unstaged","text":"<pre><code>git reset --mixed commit_hash\n</code></pre> <p>\u26a0\ufe0f Warning: <code>git reset --hard</code> permanently discards changes. Be absolutely certain before using it.</p>"},{"location":"basic-usage/#working-with-references","title":"Working with References","text":""},{"location":"basic-usage/#head-and-other-references","title":"HEAD and Other References","text":"<p>Git has several ways to refer to commits:</p> <ul> <li><code>HEAD</code>: Points to the latest commit in the current branch</li> <li><code>HEAD^</code>: Parent of HEAD (previous commit)</li> <li><code>HEAD~2</code>: Grandparent of HEAD (2 commits back)</li> <li><code>main</code>: Points to the latest commit in the main branch</li> <li><code>tag_name</code>: Points to the commit associated with a specific tag</li> </ul>"},{"location":"basic-usage/#show-where-head-points","title":"Show where HEAD points","text":"<pre><code>git rev-parse HEAD\n</code></pre>"},{"location":"basic-usage/#show-the-parent-of-head","title":"Show the parent of HEAD","text":"<pre><code>git show HEAD^\n</code></pre>"},{"location":"basic-usage/#show-a-commit-3-commits-before-head","title":"Show a commit 3 commits before HEAD","text":"<pre><code>git show HEAD~3\n</code></pre>"},{"location":"basic-usage/#using-commit-hashes","title":"Using Commit Hashes","text":"<p>Every commit in Git has a unique hash identifier:</p>"},{"location":"basic-usage/#show-the-full-hash-of-a-commit","title":"Show the full hash of a commit","text":"<pre><code>git rev-parse HEAD\n</code></pre>"},{"location":"basic-usage/#use-the-short-form-of-a-commit-hash","title":"Use the short form of a commit hash","text":"<pre><code>git show a1b2c3d\n</code></pre> <p>\ud83d\udca1 Tip: You only need the first few characters of a commit hash (usually 7+) to uniquely identify it.</p>"},{"location":"basic-usage/#command-summary","title":"Command Summary","text":"Command Common Options Description <code>git status</code> <code>-s</code>, <code>--short</code> Check repository status <code>git add</code> <code>.</code>, <code>-p</code>, <code>-A</code>, <code>-u</code> Stage changes <code>git commit</code> <code>-m</code>, <code>-am</code>, <code>--amend</code> Record changes <code>git diff</code> <code>--staged</code>, <code>--name-only</code> View changes <code>git log</code> <code>--oneline</code>, <code>--graph</code>, <code>-p</code> View history <code>git show</code> <code>commit_hash</code>, <code>HEAD</code> Inspect specific commit <code>git restore</code> <code>--staged</code>, <code>--source=HEAD</code> Undo changes <code>git rm</code> <code>--cached</code>, <code>-r</code> Remove files <code>git mv</code> Move/rename files"},{"location":"basic-usage/#related-topics","title":"Related Topics","text":"<ul> <li>Setting up Git and initializing repositories</li> <li>Creating, managing, and navigating branches</li> <li>Temporarily storing changes and cleaning working directory</li> <li>Viewing project history and comparing changes</li> </ul>"},{"location":"branching/","title":"Creating, Managing, and Navigating Branches","text":"<p>Master the art of Git branching to organize parallel streams of development work.</p>"},{"location":"branching/#understanding-branches","title":"Understanding Branches","text":""},{"location":"branching/#what-is-a-branch","title":"What is a Branch?","text":"<p>A branch in Git is simply a lightweight movable pointer to a commit. The default branch name in Git is <code>main</code> (or <code>master</code> in older repositories).</p> <p>When you create a branch, you're creating a new pointer to the same commit you're currently on:</p> <pre><code>gitGraph\n    commit id: \"C1\"\n    commit id: \"C2\"\n    commit id: \"C3\"\n    branch feature\n    checkout main\n</code></pre> <p>When you add a new commit to the feature branch, it moves forward while the main branch stays at the same commit:</p> <pre><code>gitGraph\n    commit id: \"C1\"\n    commit id: \"C2\"\n    commit id: \"C3\"\n    branch feature\n    checkout feature\n    commit id: \"C4\"\n    checkout main\n</code></pre>"},{"location":"branching/#branch-visualization","title":"Branch Visualization","text":"<p>To visualize your branch structure, use:</p>"},{"location":"branching/#show-branch-structure-with-decorations","title":"Show branch structure with decorations","text":"<pre><code>git log --graph --oneline --decorate --all\n</code></pre>"},{"location":"branching/#create-a-colorful-visualization-alias","title":"Create a colorful visualization alias","text":"<pre><code>git config --global alias.visual \"log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all\"\n</code></pre> <p>Then use:</p> <pre><code>git visual\n</code></pre>"},{"location":"branching/#creating-branches","title":"Creating Branches","text":""},{"location":"branching/#creating-a-new-branch","title":"Creating a New Branch","text":"<p>Create a branch that points to your current commit:</p>"},{"location":"branching/#create-a-branch-without-switching","title":"Create a branch without switching","text":"<pre><code>git branch &lt;branch-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git branch feature-login\n</code></pre>"},{"location":"branching/#create-and-switch-in-one-command","title":"Create and Switch in One Command","text":"<p>Create a new branch and switch to it immediately:</p>"},{"location":"branching/#using-checkout-traditional-approach","title":"Using checkout (traditional approach)","text":"<pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#using-switch-modern-approach-git-223","title":"Using switch (modern approach, Git 2.23+)","text":"<pre><code>git switch -c &lt;branch-name&gt;\n</code></pre> <p>Examples:</p> <pre><code>git checkout -b feature-notifications\n</code></pre> <pre><code>git switch -c hotfix-login-bug\n</code></pre>"},{"location":"branching/#create-branch-from-a-specific-commit","title":"Create Branch from a Specific Commit","text":"<p>Create a branch starting from a specified commit:</p>"},{"location":"branching/#create-branch-from-a-commit-hash","title":"Create branch from a commit hash","text":"<pre><code>git branch &lt;branch-name&gt; &lt;commit-hash&gt;\n</code></pre>"},{"location":"branching/#create-and-switch-in-one-command_1","title":"Create and switch in one command","text":"<pre><code>git checkout -b &lt;branch-name&gt; &lt;commit-hash&gt;\n</code></pre> <pre><code>git switch -c &lt;branch-name&gt; &lt;commit-hash&gt;\n</code></pre> <p>Examples:</p> <pre><code>git branch historical-version 7d3a2c1\n</code></pre> <pre><code>git checkout -b fix-old-bug 5e7a91f\n</code></pre>"},{"location":"branching/#create-branch-from-a-tag","title":"Create Branch from a Tag","text":"<p>Create a branch starting from a tagged version:</p>"},{"location":"branching/#create-and-switch-to-a-branch-from-a-tag","title":"Create and switch to a branch from a tag","text":"<pre><code>git checkout -b &lt;branch-name&gt; &lt;tag-name&gt;\n</code></pre> <pre><code>git switch -c &lt;branch-name&gt; &lt;tag-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git checkout -b hotfix-v1.2 v1.2.0\n</code></pre>"},{"location":"branching/#viewing-branches","title":"Viewing Branches","text":""},{"location":"branching/#list-branches","title":"List Branches","text":"<p>View the branches in your repository:</p>"},{"location":"branching/#list-local-branches","title":"List local branches","text":"<pre><code>git branch\n</code></pre>"},{"location":"branching/#list-all-branches-local-and-remote","title":"List all branches (local and remote)","text":"<pre><code>git branch -a\n</code></pre>"},{"location":"branching/#list-remote-branches-only","title":"List remote branches only","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"branching/#list-branches-with-more-details","title":"List branches with more details","text":"<pre><code>git branch -v\n</code></pre> <p>Show last commit on each branch:</p> <pre><code>git branch -vv\n</code></pre> <p>Also show upstream branches:</p>"},{"location":"branching/#list-merged-branches","title":"List merged branches","text":"<pre><code>git branch --merged\n</code></pre> <p>Branches merged into HEAD:</p> <pre><code>git branch --no-merged\n</code></pre> <p>Branches not merged into HEAD</p>"},{"location":"branching/#view-branch-details","title":"View Branch Details","text":"<p>Get more information about a specific branch:</p>"},{"location":"branching/#show-the-commit-hash-that-the-branch-points-to","title":"Show the commit hash that the branch points to","text":"<pre><code>git rev-parse &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#see-what-remote-branch-a-local-branch-is-tracking","title":"See what remote branch a local branch is tracking","text":"<pre><code>git branch -vv | grep &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#show-commit-history-for-a-specific-branch","title":"Show commit history for a specific branch","text":"<pre><code>git log &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#show-the-most-recent-commit-on-a-branch","title":"Show the most recent commit on a branch","text":"<pre><code>git show &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#switching-between-branches","title":"Switching Between Branches","text":""},{"location":"branching/#switch-to-a-different-branch","title":"Switch to a Different Branch","text":"<p>Move to a different branch in your repository:</p>"},{"location":"branching/#traditional-way-still-widely-used","title":"Traditional way (still widely used)","text":"<pre><code>git checkout &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#modern-way-git-223","title":"Modern way (Git 2.23+)","text":"<pre><code>git switch &lt;branch-name&gt;\n</code></pre> <p>Examples:</p> <pre><code>git checkout develop\n</code></pre> <pre><code>git switch feature-user-profile\n</code></pre> <p>\ud83d\udca1 Tip: Git won't let you switch branches if you have uncommitted changes that conflict with the target branch. Either commit, stash, or discard your changes first.</p>"},{"location":"branching/#the-modern-switch-command","title":"The Modern <code>switch</code> Command","text":"<p>Git 2.23+ introduced <code>switch</code> as a clearer alternative to the overloaded <code>checkout</code> command:</p>"},{"location":"branching/#basic-branch-switching","title":"Basic branch switching","text":"<pre><code>git switch &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#create-and-switch-to-a-new-branch","title":"Create and switch to a new branch","text":"<pre><code>git switch -c &lt;new-branch-name&gt;\n</code></pre>"},{"location":"branching/#return-to-the-previous-branch","title":"Return to the previous branch","text":"<pre><code>git switch -\n</code></pre>"},{"location":"branching/#switch-to-previous-branch","title":"Switch to Previous Branch","text":"<p>Quickly jump back to the branch you were on before:</p>"},{"location":"branching/#switch-to-the-last-branch-you-were-on","title":"Switch to the last branch you were on","text":"<pre><code>git checkout -\n</code></pre> <p>Or:</p> <pre><code>git switch -\n</code></pre>"},{"location":"branching/#deleting-branches","title":"Deleting Branches","text":""},{"location":"branching/#delete-a-fully-merged-branch","title":"Delete a Fully Merged Branch","text":"<p>Remove a branch that has been fully merged into the current branch:</p>"},{"location":"branching/#safe-delete-will-fail-if-branch-has-unmerged-changes","title":"Safe delete (will fail if branch has unmerged changes)","text":"<pre><code>git branch -d &lt;branch-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git branch -d feature-completed\n</code></pre>"},{"location":"branching/#force-delete-an-unmerged-branch","title":"Force Delete an Unmerged Branch","text":"<p>Delete a branch even if it contains unmerged changes:</p>"},{"location":"branching/#force-delete","title":"Force delete","text":"<pre><code>git branch -D &lt;branch-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git branch -D experimental-feature\n</code></pre> <p>\u26a0\ufe0f Warning: This permanently discards all commits unique to this branch if they haven't been merged elsewhere.</p>"},{"location":"branching/#delete-remote-branch","title":"Delete Remote Branch","text":"<p>Remove a branch from a remote repository:</p>"},{"location":"branching/#delete-a-remote-branch","title":"Delete a remote branch","text":"<pre><code>git push &lt;remote-name&gt; --delete &lt;branch-name&gt;\n</code></pre> <p>Alternate syntax:</p> <pre><code>git push &lt;remote-name&gt; :&lt;branch-name&gt;\n</code></pre> <p>Examples:</p> <pre><code>git push origin --delete feature-removed\n</code></pre> <pre><code>git push origin :old-feature\n</code></pre>"},{"location":"branching/#renaming-branches","title":"Renaming Branches","text":""},{"location":"branching/#rename-current-branch","title":"Rename Current Branch","text":"<p>Change the name of the branch you're currently on:</p>"},{"location":"branching/#rename-the-current-branch","title":"Rename the current branch","text":"<pre><code>git branch -m &lt;new-branch-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git branch -m better-feature-name\n</code></pre>"},{"location":"branching/#rename-any-branch","title":"Rename Any Branch","text":"<p>Change the name of a branch while on a different branch:</p>"},{"location":"branching/#rename-any-branch_1","title":"Rename any branch","text":"<pre><code>git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;\n</code></pre> <p>Example:</p> <pre><code>git branch -m old-feature-name new-feature-name\n</code></pre>"},{"location":"branching/#renaming-the-main-branch","title":"Renaming the Main Branch","text":"<p>To rename your default branch (e.g., from <code>master</code> to <code>main</code>):</p>"},{"location":"branching/#create-a-new-branch-called-main-from-master","title":"Create a new branch called main from master","text":"<pre><code>git branch -m master main\n</code></pre>"},{"location":"branching/#push-the-new-main-branch-and-set-up-tracking","title":"Push the new main branch and set up tracking","text":"<pre><code>git push -u origin main\n</code></pre>"},{"location":"branching/#change-default-branch-on-githubgitlabetc-via-web-interface","title":"Change default branch on GitHub/GitLab/etc. (via web interface)","text":""},{"location":"branching/#delete-the-old-master-branch-from-remote","title":"Delete the old master branch from remote","text":"<pre><code>git push origin --delete master\n</code></pre>"},{"location":"branching/#working-with-remote-branches","title":"Working with Remote Branches","text":""},{"location":"branching/#pushing-a-branch-to-remote","title":"Pushing a Branch to Remote","text":"<p>Share your local branch with others by pushing it to a remote repository:</p>"},{"location":"branching/#push-a-branch-to-the-remote-for-the-first-time","title":"Push a branch to the remote for the first time","text":"<pre><code>git push -u origin &lt;branch-name&gt;\n</code></pre> <p>Or:</p> <pre><code>git push --set-upstream origin &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#subsequent-pushes-after-tracking-is-established","title":"Subsequent pushes after tracking is established","text":"<pre><code>git push\n</code></pre>"},{"location":"branching/#force-push-use-with-caution","title":"Force push (use with caution!)","text":"<pre><code>git push --force\n</code></pre> <p>Or:</p> <pre><code>git push -f\n</code></pre> <p>\u26a0\ufe0f Warning: Force pushing rewrites history on the remote. Never force push to shared branches unless you're absolutely certain it's safe.</p>"},{"location":"branching/#setting-upstream-branch","title":"Setting Upstream Branch","text":"<p>Connect your local branch to a remote branch for tracking:</p>"},{"location":"branching/#set-upstream-branch-when-pushing","title":"Set upstream branch when pushing","text":"<pre><code>git push -u origin &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#set-upstream-for-an-existing-branch","title":"Set upstream for an existing branch","text":"<pre><code>git branch --set-upstream-to=origin/&lt;branch-name&gt; &lt;local-branch-name&gt;\n</code></pre> <p>Or shorter:</p> <pre><code>git branch -u origin/&lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#tracking-remote-branches","title":"Tracking Remote Branches","text":"<p>Create a local branch that tracks a remote branch:</p>"},{"location":"branching/#create-a-local-branch-from-remote","title":"Create a local branch from remote","text":"<pre><code>git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#newer-syntax-git-223","title":"Newer syntax (Git 2.23+)","text":"<pre><code>git switch -c &lt;branch-name&gt; origin/&lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#easiest-way-creates-a-local-branch-with-the-same-name","title":"Easiest way - creates a local branch with the same name","text":"<pre><code>git checkout --track origin/&lt;branch-name&gt;\n</code></pre> <p>Or even shorter if branch names match:</p> <pre><code>git checkout &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#list-remote-branches","title":"List Remote Branches","text":"<p>View branches that exist on the remote server:</p>"},{"location":"branching/#show-remote-branches","title":"Show remote branches","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"branching/#show-remote-branches-with-more-details","title":"Show remote branches with more details","text":"<pre><code>git branch -rv\n</code></pre>"},{"location":"branching/#fetch-remote-branches","title":"Fetch Remote Branches","text":"<p>Update your local references to remote branches:</p>"},{"location":"branching/#fetch-updates-from-all-remotes","title":"Fetch updates from all remotes","text":"<pre><code>git fetch\n</code></pre>"},{"location":"branching/#fetch-from-a-specific-remote","title":"Fetch from a specific remote","text":"<pre><code>git fetch origin\n</code></pre>"},{"location":"branching/#fetch-a-specific-branch","title":"Fetch a specific branch","text":"<pre><code>git fetch origin &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#branch-management-strategies","title":"Branch Management Strategies","text":""},{"location":"branching/#branch-naming-conventions","title":"Branch Naming Conventions","text":"<p>A good branch naming strategy helps team members understand branch purpose:</p> <pre><code>&lt;type&gt;/&lt;description&gt;\n</code></pre> <p>Common types include:</p> <ul> <li><code>feature/</code> - New functionality</li> <li><code>bugfix/</code> - Bug fixes</li> <li><code>hotfix/</code> - Urgent fixes for production</li> <li><code>release/</code> - Release preparation</li> <li><code>refactor/</code> - Code refactoring</li> <li><code>docs/</code> - Documentation updates</li> <li><code>test/</code> - Test additions or changes</li> </ul> <p>Examples:</p> <pre><code>feature/user-authentication\nbugfix/login-validation\nhotfix/security-vulnerability\nrelease/v2.1.0\n</code></pre>"},{"location":"branching/#common-branching-models","title":"Common Branching Models","text":"<p>GitFlow: A structured branching model with dedicated branches for development, features, releases, and hotfixes.</p> <pre><code>gitGraph\n    commit\n    branch develop\n    checkout develop\n    commit\n    branch feature1\n    checkout feature1\n    commit\n    commit\n    commit\n    checkout develop\n    merge feature1\n    branch feature2\n    checkout feature2\n    commit\n    commit\n    commit\n    checkout develop\n    merge feature2\n    commit\n    checkout main\n    merge develop\n    checkout develop\n    commit\n    checkout main\n    merge develop\n</code></pre> <p>GitHub Flow: A simpler workflow based on feature branches and pull requests.</p> <pre><code>gitGraph\n    commit\n    branch feature1\n    checkout feature1\n    commit\n    commit\n    checkout main\n    merge feature1\n    branch feature2\n    checkout feature2\n    commit\n    commit\n    checkout main\n    merge feature2\n    branch feature3\n    checkout feature3\n    commit\n    commit\n    checkout main\n    merge feature3\n</code></pre> <p>Trunk-Based Development: Features are developed in very short-lived branches or directly on the main branch.</p> <pre><code>gitGraph\n    commit\n    branch feature1\n    checkout feature1\n    commit\n    checkout main\n    merge feature1\n    commit\n    branch feature2\n    checkout feature2\n    commit\n    checkout main\n    merge feature2\n    commit\n    branch feature3\n    checkout feature3\n    commit\n    checkout main\n    merge feature3\n</code></pre>"},{"location":"branching/#branch-operations","title":"Branch Operations","text":""},{"location":"branching/#find-branches-containing-a-specific-commit","title":"Find Branches Containing a Specific Commit","text":"<p>Locate which branches include a particular commit:</p>"},{"location":"branching/#list-all-branches-containing-a-commit","title":"List all branches containing a commit","text":"<pre><code>git branch --contains &lt;commit-hash&gt;\n</code></pre>"},{"location":"branching/#include-remote-branches","title":"Include remote branches","text":"<pre><code>git branch -a --contains &lt;commit-hash&gt;\n</code></pre>"},{"location":"branching/#find-last-commit-on-a-branch","title":"Find Last Commit on a Branch","text":"<p>View the most recent commit on a branch:</p>"},{"location":"branching/#show-the-tip-commit-of-a-branch","title":"Show the tip commit of a branch","text":"<pre><code>git show &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#just-the-commit-hash","title":"Just the commit hash","text":"<pre><code>git rev-parse &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#show-commit-message-only","title":"Show commit message only","text":"<pre><code>git log -1 --pretty=format:\"%s\" &lt;branch-name&gt;\n</code></pre>"},{"location":"branching/#compare-branches","title":"Compare Branches","text":"<p>See what commits differ between branches:</p>"},{"location":"branching/#commits-in-branch-a-that-arent-in-branch-b","title":"Commits in branch-A that aren't in branch-B","text":"<pre><code>git log branch-B..branch-A\n</code></pre>"},{"location":"branching/#just-the-commit-summaries","title":"Just the commit summaries","text":"<pre><code>git log --oneline branch-B..branch-A\n</code></pre>"},{"location":"branching/#show-the-diff-between-two-branches","title":"Show the diff between two branches","text":"<pre><code>git diff branch-A..branch-B\n</code></pre>"},{"location":"branching/#show-only-the-file-names-that-differ","title":"Show only the file names that differ","text":"<pre><code>git diff --name-only branch-A..branch-B\n</code></pre>"},{"location":"branching/#command-summary","title":"Command Summary","text":"Operation Command Description Create <code>git branch &lt;name&gt;</code> Create new branch Create &amp; Switch <code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code> Create and switch to branch List <code>git branch</code> or <code>git branch -a</code> List branches (local/all) Switch <code>git checkout &lt;name&gt;</code> or <code>git switch &lt;name&gt;</code> Move to branch Delete <code>git branch -d &lt;name&gt;</code> or <code>git branch -D &lt;name&gt;</code> Delete branch (safe/force) Rename <code>git branch -m &lt;name&gt;</code> or <code>git branch -m &lt;old&gt; &lt;new&gt;</code> Rename branch Push <code>git push -u origin &lt;name&gt;</code> Push and track branch Compare <code>git diff branch1..branch2</code> Compare branches Merge <code>git merge &lt;branch&gt;</code> Merge branch into current"},{"location":"branching/#related-topics","title":"Related Topics","text":"<ul> <li>Setting up Git and initializing repositories</li> <li>Essential everyday Git commands and workflows</li> <li>Combining branches with merge and rebase operations</li> <li>Working with remote repositories (push, pull, fetch)</li> <li>Established Git workflows for teams</li> </ul>"},{"location":"config-aliases/","title":"Git Configuration and Command Shortcuts","text":"<p>Master the art of customizing Git to match your workflow with configuration settings and powerful aliases.</p>"},{"location":"config-aliases/#understanding-git-configuration","title":"Understanding Git Configuration","text":""},{"location":"config-aliases/#configuration-levels","title":"Configuration Levels","text":"<p>Git uses a hierarchical configuration system with three levels:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Repository      \u2502 (Highest priority - .git/config)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 User (Global)   \u2502 (~/.gitconfig)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 System          \u2502 (Lowest priority - /etc/gitconfig)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Settings from higher levels override lower levels.</p> <pre><code># Set configuration at different levels\ngit config --system &lt;key&gt; &lt;value&gt;   # System level\ngit config --global &lt;key&gt; &lt;value&gt;   # User level\ngit config &lt;key&gt; &lt;value&gt;            # Repository level\n</code></pre>"},{"location":"config-aliases/#configuration-files","title":"Configuration Files","text":"<p>Git stores configuration in plain text files:</p> <pre><code># Show location and contents of config files\ngit config --list --show-origin\n\n# Edit configuration files directly\ngit config --global --edit\ngit config --local --edit\n</code></pre>"},{"location":"config-aliases/#viewing-current-configuration","title":"Viewing Current Configuration","text":"<p>Inspect your current Git configuration:</p> <pre><code># List all configurations\ngit config --list\n\n# Get a specific config value\ngit config user.name\ngit config user.email\n\n# Show configuration with origin\ngit config --list --show-origin\n</code></pre>"},{"location":"config-aliases/#essential-configuration-settings","title":"Essential Configuration Settings","text":""},{"location":"config-aliases/#user-identity","title":"User Identity","text":"<p>Configure your identity for commits:</p> <pre><code># Set your name and email\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Set repository-specific identity\ngit config user.name \"Work Name\"\ngit config user.email \"work.email@company.com\"\n</code></pre>"},{"location":"config-aliases/#editor-settings","title":"Editor Settings","text":"<p>Configure which editor Git uses for messages:</p> <pre><code># Set default editor\ngit config --global core.editor \"code --wait\"    # VS Code\ngit config --global core.editor \"vim\"            # Vim\ngit config --global core.editor \"nano\"           # Nano\ngit config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\" # Notepad++ on Windows\n</code></pre>"},{"location":"config-aliases/#default-branch","title":"Default Branch","text":"<p>Set the default branch name for new repositories:</p> <pre><code># Set main as the default branch name (Git 2.28+)\ngit config --global init.defaultBranch main\n\n# Other common options: master, trunk, development\n</code></pre>"},{"location":"config-aliases/#line-endings","title":"Line Endings","text":"<p>Configure line ending behavior to prevent cross-platform issues:</p> <pre><code># For Windows\ngit config --global core.autocrlf true\n\n# For macOS/Linux\ngit config --global core.autocrlf input\n\n# Use consistent line endings in the repo\ngit config --global core.eol lf\n</code></pre>"},{"location":"config-aliases/#color-settings","title":"Color Settings","text":"<p>Customize colorized output to improve readability:</p> <pre><code># Enable colored output\ngit config --global color.ui auto\n\n# Set specific colors\ngit config --global color.status.changed \"blue\"\ngit config --global color.status.untracked \"red\"\ngit config --global color.branch.current \"yellow reverse\"\n</code></pre>"},{"location":"config-aliases/#credentials-storage","title":"Credentials Storage","text":"<p>Configure how Git stores your credentials:</p> <pre><code># Cache credentials in memory (15 min by default)\ngit config --global credential.helper cache\n\n# Set custom timeout (in seconds)\ngit config --global credential.helper 'cache --timeout=3600'\n\n# Store credentials permanently\ngit config --global credential.helper store\n\n# Use OS-specific credential managers\ngit config --global credential.helper manager-core  # Windows\ngit config --global credential.helper osxkeychain   # macOS\n</code></pre> <p>\u26a0\ufe0f Warning: Using <code>credential.helper store</code> saves credentials in plaintext. Consider using OS-specific managers for better security.</p>"},{"location":"config-aliases/#creating-and-using-aliases","title":"Creating and Using Aliases","text":""},{"location":"config-aliases/#basic-alias-syntax","title":"Basic Alias Syntax","text":"<p>Create shortcuts for Git commands:</p> <pre><code># Basic alias syntax\ngit config --global alias.&lt;alias-name&gt; '&lt;git-command&gt;'\n\n# Example: 'git co' instead of 'git checkout'\ngit config --global alias.co checkout\n</code></pre>"},{"location":"config-aliases/#essential-git-aliases","title":"Essential Git Aliases","text":"<p>Common, time-saving aliases:</p> <pre><code># Basic command shortcuts\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\n</code></pre>"},{"location":"config-aliases/#advanced-aliases","title":"Advanced Aliases","text":"<p>More powerful aliases for complex commands:</p> <pre><code># Enhanced log outputs\ngit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"\ngit config --global alias.hist \"log --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(red)%s %C(bold red){{%an}}%C(reset) %C(blue)%d%C(reset)' --graph --date=short\"\n\n# Show all branches with last commit info\ngit config --global alias.branches 'branch -a -v'\n\n# Show a list of tags with annotations\ngit config --global alias.tags 'tag -l -n1'\n\n# Show modified files in working directory\ngit config --global alias.mods 'diff --name-only --diff-filter=M'\n</code></pre>"},{"location":"config-aliases/#function-like-aliases","title":"Function-Like Aliases","text":"<p>Create aliases that accept parameters:</p> <pre><code># Find commits by commit message\ngit config --global alias.find '!f() { git log --pretty=format:\"%h %ad | %s%d [%an]\" --date=short --all --grep=\"$1\"; }; f'\n\n# Show the diff of the last commit\ngit config --global alias.difflast '!f() { git diff HEAD~1 HEAD; }; f'\n\n# Create and switch to a new branch\ngit config --global alias.cnb '!f() { git checkout -b $1 &amp;&amp; git push -u origin $1; }; f'\n</code></pre> <p>\ud83d\udca1 Tip: The <code>!</code> prefix allows you to run shell commands in aliases.</p>"},{"location":"config-aliases/#managing-aliases","title":"Managing Aliases","text":"<p>View, edit, and remove aliases:</p> <pre><code># List all aliases\ngit config --get-regexp alias\n\n# Remove an alias\ngit config --global --unset alias.co\n</code></pre>"},{"location":"config-aliases/#customizing-the-git-environment","title":"Customizing the Git Environment","text":""},{"location":"config-aliases/#output-formatting","title":"Output Formatting","text":"<p>Adjust how Git displays information:</p> <pre><code># Always show colors\ngit config --global color.ui true\n\n# Set pager behavior\ngit config --global core.pager 'less -FRX'\n\n# Use unicode in paths\ngit config --global core.quotePath false\n</code></pre>"},{"location":"config-aliases/#diff-and-merge-tools","title":"Diff and Merge Tools","text":"<p>Configure external tools for diff and merge operations:</p> <pre><code># Set up meld as difftool\ngit config --global diff.tool meld\ngit config --global difftool.meld.path \"/path/to/meld\"\ngit config --global difftool.prompt false\n\n# Set up kdiff3 as mergetool\ngit config --global merge.tool kdiff3\ngit config --global mergetool.kdiff3.path \"/path/to/kdiff3\"\ngit config --global mergetool.keepBackup false\n\n# Setup VSCode as difftool\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'\n</code></pre>"},{"location":"config-aliases/#ignoring-files-globally","title":"Ignoring Files Globally","text":"<p>Set up a global ignore file for all repositories:</p> <pre><code># Create a global gitignore file\ngit config --global core.excludesFile '~/.gitignore_global'\n\n# Common content for global gitignore\n# OS specific files\n# .DS_Store\n# Thumbs.db\n# Editor files\n# .vscode/\n# .idea/\n</code></pre>"},{"location":"config-aliases/#auto-correcting-command-typos","title":"Auto-Correcting Command Typos","text":"<p>Enable Git's auto-correction feature:</p> <pre><code># Enable auto-correction with 0.1s delay\ngit config --global help.autocorrect 1\n\n# Set higher delay (e.g., 5 seconds = 50)\ngit config --global help.autocorrect 50\n</code></pre>"},{"location":"config-aliases/#commit-template","title":"Commit Template","text":"<p>Create a template for commit messages:</p> <pre><code># Set up a commit message template\ngit config --global commit.template ~/.gitmessage.txt\n\n# Create the template file with recommended structure:\n# Subject line (50 chars)\n#\n# Body (72 chars per line)\n#\n# Issue: #123\n</code></pre>"},{"location":"config-aliases/#configuration-for-common-workflows","title":"Configuration for Common Workflows","text":""},{"location":"config-aliases/#pull-strategy-configuration","title":"Pull Strategy Configuration","text":"<p>Control how Git handles pulling changes:</p> <pre><code># Set default pull strategy to rebase\ngit config --global pull.rebase true\n\n# Set default pull strategy to merge\ngit config --global pull.rebase false\n\n# Force fast-forward only pulls\ngit config --global pull.ff only\n</code></pre>"},{"location":"config-aliases/#push-default-behavior","title":"Push Default Behavior","text":"<p>Configure your default push behavior:</p> <pre><code># Push only the current branch to its tracked branch\ngit config --global push.default simple\n\n# Push all branches that have matching names\ngit config --global push.default matching\n\n# Push to a branch with the same name\ngit config --global push.default current\n\n# Push to the upstream branch\ngit config --global push.default upstream\n</code></pre>"},{"location":"config-aliases/#auto-setup-remote-branches","title":"Auto-Setup Remote Branches","text":"<p>Configure Git to automatically create/track branches:</p> <pre><code># Auto-create remote branches on push\ngit config --global push.autoSetupRemote true\n\n# Auto-setup remote tracking\ngit config --global branch.autoSetupMerge always\n</code></pre>"},{"location":"config-aliases/#rebase-configuration","title":"Rebase Configuration","text":"<p>Fine-tune your rebase operations:</p> <pre><code># Automatically stash changes before rebasing\ngit config --global rebase.autoStash true\n\n# Show more information during rebase\ngit config --global rebase.stat true\n\n# Allow empty commits during rebase\ngit config --global rebase.allowEmpty true\n</code></pre>"},{"location":"config-aliases/#branch-management-configuration","title":"Branch Management Configuration","text":"<p>Set up branch management preferences:</p> <pre><code># Always rebase when pulling into master/main\ngit config branch.master.rebase true\ngit config branch.main.rebase true\n\n# Sort branches by most recently used\ngit config --global branch.sort -committerdate\n</code></pre>"},{"location":"config-aliases/#advanced-configuration-options","title":"Advanced Configuration Options","text":""},{"location":"config-aliases/#git-hooks-configuration","title":"Git Hooks Configuration","text":"<p>Configure Git hooks behavior:</p> <pre><code># Set a custom hooks path\ngit config --global core.hooksPath ~/.git-hooks\n\n# Enable template hooks for all repos\ngit config --global init.templateDir ~/.git-templates\n</code></pre>"},{"location":"config-aliases/#performance-tuning","title":"Performance Tuning","text":"<p>Adjust settings for large repositories:</p> <pre><code># Speed up status on large repos\ngit config --global feature.manyFiles true\n\n# Increase packed memory\ngit config --global pack.windowMemory 256m\ngit config --global pack.packSizeLimit 256m\n\n# Improve delta compression\ngit config --global core.preloadIndex true\ngit config --global core.fsmonitor true\n</code></pre>"},{"location":"config-aliases/#githubgitlab-specific-settings","title":"GitHub/GitLab Specific Settings","text":"<p>Configure settings specific to GitHub or GitLab:</p> <pre><code># Set default GitHub CLI protocol\ngit config --global hub.protocol https\n\n# Set GitLab token\ngit config --global gitlab.token \"your-token\"\n\n# Github CLI configuration\ngit config --global gh.editor vim\n</code></pre>"},{"location":"config-aliases/#conditional-configuration","title":"Conditional Configuration","text":"<p>Apply configuration based on conditions:</p> <pre><code># Include work config only in work directory\ngit config --global includeIf.gitdir:~/work/.path ~/.gitconfig-work\n\n# Include personal config only in personal directory\ngit config --global includeIf.gitdir:~/personal/.path ~/.gitconfig-personal\n</code></pre>"},{"location":"config-aliases/#core-configuration-options","title":"Core Configuration Options","text":"<p>Additional important core settings:</p> <pre><code># Set default permissions\ngit config --global core.fileMode false\n\n# Set trusted file modes\ngit config --global core.sharedRepository group\n\n# Set log display defaults\ngit config --global log.date iso\n\n# Default ignorecase setting\ngit config --global core.ignorecase false\n</code></pre>"},{"location":"config-aliases/#managing-multiple-git-configurations","title":"Managing Multiple Git Configurations","text":""},{"location":"config-aliases/#conditional-includes","title":"Conditional Includes","text":"<p>Include different configurations based on location:</p> <pre><code># In your ~/.gitconfig file\n[includeIf \"gitdir:~/work/\"]\n    path = ~/.gitconfig-work\n[includeIf \"gitdir:~/personal/\"]\n    path = ~/.gitconfig-personal\n</code></pre> <p>Example work config (<code>~/.gitconfig-work</code>):</p> <pre><code>[user]\n    name = Work Name\n    email = work@company.com\n[core]\n    sshCommand = \"ssh -i ~/.ssh/work_id_rsa\"\n</code></pre>"},{"location":"config-aliases/#directory-specific-configurations","title":"Directory-Specific Configurations","text":"<p>Create separate Git configurations for different directories:</p> <pre><code># Create a directory-specific configuration\ncd ~/project\ngit config user.name \"Project Specific Name\"\ngit config user.email \"project@example.com\"\n</code></pre>"},{"location":"config-aliases/#profile-switching","title":"Profile Switching","text":"<p>Use tools or scripts to switch between Git profiles:</p> <pre><code># Example bash function in .bashrc/.zshrc\ngit-profile() {\n    if [ \"$1\" = \"personal\" ]; then\n        git config --global user.name \"Personal Name\"\n        git config --global user.email \"personal@example.com\"\n        echo \"Git profile set to personal\"\n    elif [ \"$1\" = \"work\" ]; then\n        git config --global user.name \"Work Name\"\n        git config --global user.email \"work@company.com\"\n        echo \"Git profile set to work\"\n    else\n        echo \"Usage: git-profile [personal|work]\"\n    fi\n}\n</code></pre>"},{"location":"config-aliases/#command-summary","title":"Command Summary","text":"Operation Command Description View Config <code>git config --list</code> Show all settings Set Global <code>git config --global &lt;key&gt; &lt;value&gt;</code> Set global setting Set Local <code>git config &lt;key&gt; &lt;value&gt;</code> Set repo setting Edit Config <code>git config --edit</code> Open config file Create Alias <code>git config --global alias.&lt;name&gt; &lt;command&gt;</code> Create command shortcut List Aliases <code>git config --get-regexp alias</code> Show all aliases Remove Setting <code>git config --unset &lt;key&gt;</code> Remove a setting Identity <code>git config --global user.name \"Name\"</code> Set username Default Editor <code>git config --global core.editor &lt;editor&gt;</code> Set default editor Default Branch <code>git config --global init.defaultBranch main</code> Set default branch Multiple Configs <code>includeIf.gitdir:&lt;path&gt;</code> Use path-specific config"},{"location":"config-aliases/#related-topics","title":"Related Topics","text":"<ul> <li>Setting up Git and initializing repositories</li> <li>Essential everyday Git commands and workflows</li> <li>Solving common Git problems</li> <li>Advanced Git techniques and features</li> </ul> <p>Next: Solving common Git problems</p>"},{"location":"development-workflows/","title":"Established Git Workflows for Teams","text":"<p>Master proven Git collaboration strategies to enhance team productivity, code quality, and release management.</p>"},{"location":"development-workflows/#understanding-git-workflows","title":"Understanding Git Workflows","text":""},{"location":"development-workflows/#what-is-a-git-workflow","title":"What is a Git Workflow?","text":"<p>A Git workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner. Workflows are guidelines rather than concrete rules, designed to:</p> <ul> <li>Coordinate team collaboration</li> <li>Ensure code quality and stability</li> <li>Streamline development and release processes</li> <li>Prevent conflicts during integration</li> <li>Maintain a clean, logical project history</li> </ul>"},{"location":"development-workflows/#choosing-the-right-workflow","title":"Choosing the Right Workflow","text":"<p>When selecting a workflow, consider:</p> <ol> <li>Team size and experience with Git</li> <li>Project complexity and release frequency</li> <li>Deployment requirements</li> <li>Integration with existing processes (CI/CD, reviews, etc.)</li> <li>Need for supporting multiple production versions</li> </ol>"},{"location":"development-workflows/#core-workflow-elements","title":"Core Workflow Elements","text":"<p>Most Git workflows share these core elements:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Branch Model \u2502  \u2500\u2500\u25b6 \u2502 Integration    \u2502  \u2500\u2500\u25b6 \u2502 Release        \u2502\n\u2502  How code     \u2502      \u2502 Strategy       \u2502      \u2502 Process        \u2502\n\u2502  changes flow \u2502      \u2502 How changes    \u2502      \u2502 How to deploy  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502 are combined   \u2502      \u2502 and version    \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"development-workflows/#centralized-workflow","title":"Centralized Workflow","text":""},{"location":"development-workflows/#overview-and-use-cases","title":"Overview and Use Cases","text":"<p>The Centralized Workflow uses a single <code>main</code> branch as the central repository for all changes, similar to traditional version control systems like SVN.</p> <p>Best suited for:</p> <ul> <li>Teams transitioning from SVN or other centralized VCS</li> <li>Small teams with simple projects</li> <li>Projects with minimal parallel development</li> </ul> <p>Visual representation:</p> <pre><code>main: A---B---C---D---E---F---G\n                      \u2191     \u2191\n                 Alice's   Bob's\n                 change   change\n</code></pre>"},{"location":"development-workflows/#implementation-steps","title":"Implementation Steps","text":"<p>Create/clone the central repository:</p> <pre><code># Initialize central repo (once)\ngit init --bare central-project.git\n\n# Each developer clones the repo\ngit clone central-project.git\n</code></pre> <p>Make local changes:</p> <pre><code># Edit files locally\ngit add changed-files\ngit commit -m \"Description of changes\"\n</code></pre> <p>Synchronize with central repository:</p> <pre><code># Get latest changes\ngit pull origin main\n\n# Push local commits\ngit push origin main\n</code></pre> <p>Resolve conflicts if necessary:</p> <pre><code># When pull fails due to conflicts\ngit pull origin main\n# Resolve conflicts manually\ngit add resolved-files\ngit commit -m \"Merge and resolve conflicts\"\ngit push origin main\n</code></pre>"},{"location":"development-workflows/#advantages-and-limitations","title":"Advantages and Limitations","text":"<p>Advantages:</p> <ul> <li>Simplest workflow to understand and implement</li> <li>Minimal branch management overhead</li> <li>Linear history is easy to follow</li> </ul> <p>Limitations:</p> <ul> <li>No isolated environments for feature development</li> <li>Higher chance of merge conflicts</li> <li>Lack of formal code review mechanism</li> <li>Harder to maintain stable production code</li> </ul>"},{"location":"development-workflows/#best-practices","title":"Best Practices","text":"<ul> <li>Pull frequently to minimize merge conflicts</li> <li>Communicate with team members before making significant changes</li> <li>Consider using feature branches for larger changes</li> <li>Add good commit messages to maintain a usable history</li> </ul>"},{"location":"development-workflows/#feature-branch-workflow","title":"Feature Branch Workflow","text":""},{"location":"development-workflows/#overview-and-use-cases-for-feature-branch-workflow","title":"Overview and Use Cases for Feature Branch Workflow","text":"<p>The Feature Branch Workflow extends the Centralized Workflow by developing all features in dedicated branches instead of directly on <code>main</code>. This isolates new development, enabling pull requests and code reviews.</p> <p>Best suited for:</p> <ul> <li>Most professional teams</li> <li>Projects with multiple developers working in parallel</li> <li>Codebases requiring code reviews before integration</li> </ul> <p>Visual representation:</p> <pre><code>main:     A---B---C------------D---F\n                  \\            /   /\nfeature-1:         D---E------/   /\n                                 /\nfeature-2:             G---H----/\n</code></pre>"},{"location":"development-workflows/#implementation-steps-for-feature-branch-workflow","title":"Implementation Steps for Feature Branch Workflow","text":"<p>Create a feature branch:</p> <pre><code># Update main first\ngit checkout main\ngit pull origin main\n\n# Create feature branch\ngit checkout -b feature/user-authentication\n</code></pre> <p>Work on the feature:</p> <pre><code># Make changes\ngit add changed-files\ngit commit -m \"Implement login form\"\n\n# Continue development with multiple commits\ngit add more-files\ngit commit -m \"Add password validation\"\n</code></pre> <p>Push feature branch to remote:</p> <pre><code>git push -u origin feature/user-authentication\n</code></pre> <p>Create pull request (via GitHub/GitLab/etc.)</p> <p>Review and merge:</p> <pre><code># After approval, merge to main \ngit checkout main\ngit pull origin main\ngit merge feature/user-authentication\ngit push origin main\n\n# Or use the platform's merge button\n</code></pre> <p>Cleanup:</p> <pre><code># Delete the local branch\ngit branch -d feature/user-authentication\n\n# Delete the remote branch\ngit push origin --delete feature/user-authentication\n</code></pre>"},{"location":"development-workflows/#branch-naming-conventions","title":"Branch Naming Conventions","text":"<p>Consistent branch naming improves workflow clarity:</p> <pre><code>&lt;type&gt;/&lt;description&gt;\n</code></pre> <p>Common types:</p> <ul> <li><code>feature/</code> - New functionality</li> <li><code>bugfix/</code> - Bug fixes</li> <li><code>hotfix/</code> - Critical fixes for production</li> <li><code>release/</code> - Release preparation</li> <li><code>refactor/</code> - Code improvements without feature changes</li> <li><code>docs/</code> - Documentation changes</li> <li><code>test/</code> - Test additions or corrections</li> </ul> <p>Examples:</p> <ul> <li><code>feature/user-authentication</code></li> <li><code>bugfix/login-validation</code></li> <li><code>hotfix/security-vulnerability</code></li> <li><code>release/v1.2.0</code></li> </ul>"},{"location":"development-workflows/#pull-request-process","title":"Pull Request Process","text":"<p>A typical pull request workflow:</p> <ol> <li>Developer creates PR with description of changes</li> <li>CI runs automated tests</li> <li>Team members review code and provide feedback</li> <li>Developer addresses feedback with follow-up commits</li> <li>PR is approved by required reviewers</li> <li>PR is merged (merge, squash, or rebase)</li> </ol>"},{"location":"development-workflows/#code-review-guidelines","title":"Code Review Guidelines","text":"<p>Effective code reviews focus on:</p> <ul> <li>Code correctness and edge cases</li> <li>Test coverage</li> <li>Performance implications</li> <li>Security considerations</li> <li>Adherence to project style and standards</li> <li>Documentation completeness</li> </ul> <p>\ud83d\udca1 Tip: Aim for small, focused PRs to make reviews more manageable and effective.</p>"},{"location":"development-workflows/#gitflow-workflow","title":"Gitflow Workflow","text":""},{"location":"development-workflows/#overview-and-use-cases-for-gitflow-workflow","title":"Overview and Use Cases for Gitflow Workflow","text":"<p>Gitflow is a robust framework for managing larger projects with scheduled releases. It uses dedicated branches for features, releases, and hotfixes with strict conventions about how changes flow between them.</p> <p>Best suited for:</p> <ul> <li>Larger teams with formal release processes</li> <li>Projects with multiple versions in production</li> <li>Software with scheduled release cycles</li> </ul> <p>Visual representation:</p> <pre><code>         hotfix/1.0.1\n            |\n            v\nmain:     A-------M------P------T\n           \\       \\      \\      \\\ndevelop:    B---C---N---O--Q---R--U\n                /         /\\\nfeature/1:    D---E---F--/  \\\n                           \\  \\\nfeature/2:                 G---H\n                              \\\nrelease/1.0:                  I---J---K\n</code></pre>"},{"location":"development-workflows/#branch-types-and-purposes","title":"Branch Types and Purposes","text":"<p>Gitflow defines specific branches with different roles:</p> Branch Type Base Branch Naming Merges Into Purpose <code>main</code> - <code>main</code> - Production-ready code <code>develop</code> <code>main</code> <code>develop</code> - Integration branch for features <code>feature</code> <code>develop</code> <code>feature/*</code> <code>develop</code> New functionality development <code>release</code> <code>develop</code> <code>release/*</code> <code>main</code> &amp; <code>develop</code> Release preparation &amp; stabilization <code>hotfix</code> <code>main</code> <code>hotfix/*</code> <code>main</code> &amp; <code>develop</code> Emergency production fixes"},{"location":"development-workflows/#implementation-steps-for-gitflow-workflow","title":"Implementation Steps for Gitflow Workflow","text":"<p>Setup Gitflow:</p> <pre><code># Initialize repository with Gitflow\ngit flow init -d\n\n# Or manually create required branches\ngit branch develop\ngit push -u origin develop\n</code></pre> <p>Start a feature:</p> <pre><code># Using gitflow extension\ngit flow feature start user-authentication\n\n# Or manually\ngit checkout develop\ngit checkout -b feature/user-authentication\n</code></pre> <p>Finish a feature:</p> <pre><code># Using gitflow extension\ngit flow feature finish user-authentication\n\n# Or manually\ngit checkout develop\ngit merge --no-ff feature/user-authentication\ngit branch -d feature/user-authentication\n</code></pre> <p>Start a release:</p> <pre><code># Using gitflow extension\ngit flow release start 1.2.0\n\n# Or manually\ngit checkout develop\ngit checkout -b release/1.2.0\n</code></pre> <p>Finish a release:</p> <pre><code># Using gitflow extension\ngit flow release finish 1.2.0\n\n# Or manually\ngit checkout main\ngit merge --no-ff release/1.2.0\ngit tag -a v1.2.0 -m \"Version 1.2.0\"\ngit checkout develop\ngit merge --no-ff release/1.2.0\ngit branch -d release/1.2.0\n</code></pre> <p>Create and finish a hotfix:</p> <pre><code># Using gitflow extension\ngit flow hotfix start 1.2.1\n\n# Or manually\ngit checkout main\ngit checkout -b hotfix/1.2.1\n\n# When finished with gitflow\ngit flow hotfix finish 1.2.1\n\n# Or manually\ngit checkout main\ngit merge --no-ff hotfix/1.2.1\ngit tag -a v1.2.1 -m \"Version 1.2.1\"\ngit checkout develop\ngit merge --no-ff hotfix/1.2.1\ngit branch -d hotfix/1.2.1\n</code></pre>"},{"location":"development-workflows/#release-process","title":"Release Process","text":"<p>The release process in Gitflow:</p> <ol> <li>Create a release branch from <code>develop</code></li> <li>Make release-specific changes (version numbers, etc.)</li> <li>Bug fixes for the release go directly to release branch</li> <li>When stable, merge into <code>main</code> and tag with version number</li> <li>Also merge back into <code>develop</code> to incorporate release fixes</li> <li>Delete the release branch</li> </ol>"},{"location":"development-workflows/#hotfix-process","title":"Hotfix Process","text":"<p>The hotfix process in Gitflow:</p> <ol> <li>Create hotfix branch from <code>main</code></li> <li>Fix the critical issue</li> <li>Merge into both <code>main</code> and <code>develop</code> (or active release branch)</li> <li>Tag the <code>main</code> merge with updated version number</li> <li>Delete the hotfix branch</li> </ol>"},{"location":"development-workflows/#gitflow-tools-and-extensions","title":"GitFlow Tools and Extensions","text":"<p>The Gitflow workflow can be implemented manually or using dedicated tools:</p> <pre><code># Install the gitflow extension\n# macOS\nbrew install git-flow-avh\n\n# Windows (with Git for Windows)\n# Already included\n\n# Linux\napt-get install git-flow\n</code></pre> <p>Common gitflow commands:</p> <pre><code>git flow init                 # Set up repo for gitflow\ngit flow feature start        # Start a feature branch\ngit flow feature finish       # Finish a feature branch\ngit flow release start        # Start a release branch\ngit flow release finish       # Finish a release branch\ngit flow hotfix start         # Start a hotfix branch\ngit flow hotfix finish        # Finish a hotfix branch\n</code></pre>"},{"location":"development-workflows/#forking-workflow","title":"Forking Workflow","text":""},{"location":"development-workflows/#overview-and-use-cases-for-forking-workflow","title":"Overview and Use Cases for Forking Workflow","text":"<p>The Forking Workflow is unique in that each developer has their own server-side repository. This means every developer has two Git repositories: a private local one and a public server-side one.</p> <p>Best suited for:</p> <ul> <li>Open source projects</li> <li>Large public projects with many contributors</li> <li>Projects where contributors don't have write access to the main repository</li> </ul> <p>Visual representation:</p> <pre><code>upstream (main repo):    A---B---C-----------G\n                               \\             /\nfork (your GH repo):           C---D---E---F\n                                \\\nlocal (your computer):          C---D---E---F\n</code></pre>"},{"location":"development-workflows/#fork-and-clone-process","title":"Fork and Clone Process","text":"<p>Fork the repository (via GitHub/GitLab interface)</p> <p>Clone your fork:</p> <pre><code>git clone https://github.com/your-username/project.git\ncd project\n</code></pre> <p>Add upstream remote:</p> <pre><code>git remote add upstream https://github.com/original-owner/project.git\n</code></pre> <p>Verify remotes:</p> <pre><code>git remote -v\n</code></pre>"},{"location":"development-workflows/#implementation-steps-for-forking-workflow","title":"Implementation Steps for Forking Workflow","text":"<p>Create a feature branch:</p> <pre><code>git checkout -b feature/awesome-feature\n</code></pre> <p>Make changes and commit:</p> <pre><code># Make changes\ngit add changed-files\ngit commit -m \"Implement awesome feature\"\n</code></pre> <p>Push to your fork:</p> <pre><code>git push -u origin feature/awesome-feature\n</code></pre> <p>Create pull request (via GitHub/GitLab interface)</p> <p>Update your PR when requested:</p> <pre><code># Make changes based on feedback\ngit add changed-files\ngit commit -m \"Address review comments\"\ngit push origin feature/awesome-feature\n</code></pre>"},{"location":"development-workflows/#synchronizing-with-upstream","title":"Synchronizing with Upstream","text":"<p>Keep your fork in sync with the upstream repository:</p> <pre><code># Fetch upstream changes\ngit fetch upstream\n\n# Checkout your fork's main branch\ngit checkout main\n\n# Merge upstream changes\ngit merge upstream/main\n\n# Update your fork on the server\ngit push origin main\n</code></pre>"},{"location":"development-workflows/#pull-request-process-for-forking-workflow","title":"Pull Request Process for Forking Workflow","text":"<p>The pull request process in a Forking Workflow typically involves:</p> <ol> <li>Developer pushes changes to their fork</li> <li>Developer creates PR from fork to upstream repository</li> <li>Maintainers review the code</li> <li>Developer makes requested changes on their branch</li> <li>Maintainers approve and merge the PR</li> <li>Developer syncs their fork with upstream</li> </ol> <p>\ud83d\udca1 Tip: Before creating a new PR, always sync your fork with the upstream repository to avoid conflicts.</p>"},{"location":"development-workflows/#trunk-based-development","title":"Trunk-Based Development","text":""},{"location":"development-workflows/#overview-and-use-cases-for-trunk-based-development","title":"Overview and Use Cases for Trunk-Based Development","text":"<p>Trunk-Based Development is a source-control practice where developers merge small, frequent updates to a core \"trunk\" branch (usually <code>main</code>). It emphasizes keeping the trunk always releasable and using feature toggles instead of feature branches.</p> <p>Best suited for:</p> <ul> <li>DevOps-oriented teams with strong CI/CD practices</li> <li>Teams practicing continuous deployment</li> <li>Organizations focused on reducing integration friction</li> </ul> <p>Visual representation:</p> <pre><code>main: A---B---C---D---E---F---G---H---I\n      \u2191   \u2191   \u2191   \u2191   \u2191   \u2191   \u2191   \u2191   \u2191\n     commits merged multiple times daily\n</code></pre>"},{"location":"development-workflows/#implementation-steps-for-trunk-based-development","title":"Implementation Steps for Trunk-Based Development","text":"<p>Pull latest trunk:</p> <pre><code>git checkout main\ngit pull origin main\n</code></pre> <p>Create short-lived feature branch (optional):</p> <pre><code>git checkout -b small-feature\n</code></pre> <p>Make small, incremental changes:</p> <pre><code># Make changes\ngit add changed-files\ngit commit -m \"Implement small part of feature\"\n</code></pre> <p>Integrate frequently (at least once daily):</p> <pre><code>git checkout main\ngit pull origin main\ngit merge small-feature\ngit push origin main\n\n# If using feature branch\ngit branch -d small-feature\n</code></pre>"},{"location":"development-workflows/#feature-toggles","title":"Feature Toggles","text":"<p>Instead of long-lived branches, Trunk-Based Development uses feature toggles:</p> <pre><code>// Example feature toggle in code\nif (FeatureFlags.isEnabled(\"new-billing-system\")) {\n    // New implementation\n    return newBillingSystem.calculateTotal(items);\n} else {\n    // Old implementation\n    return oldBillingSystem.calculateTotal(items);\n}\n</code></pre> <p>Types of feature toggles:</p> <ul> <li>Release toggles (enable/disable functionality)</li> <li>Experiment toggles (A/B testing)</li> <li>Ops toggles (control operational aspects)</li> <li>Permission toggles (user-specific features)</li> </ul>"},{"location":"development-workflows/#cicd-integration","title":"CI/CD Integration","text":"<p>Trunk-Based Development relies heavily on automated testing:</p> <ol> <li>Every commit triggers a CI build</li> <li>Automated test suite runs on each build</li> <li>Build breaks are fixed immediately (highest priority)</li> <li>Passing builds can be auto-deployed to staging environments</li> </ol>"},{"location":"development-workflows/#comparison-with-feature-branches","title":"Comparison with Feature Branches","text":"Aspect Trunk-Based Development Feature Branches Integration Frequency Continuous (multiple times daily) At feature completion Branch Lifetime Hours to a day Days to weeks Merge Conflicts Minimal due to frequent merges Can be significant Code Review Often post-merge, or pair programming Pre-merge via PRs Feature Isolation Via feature toggles in code Via branches Release Cadence Continuous Batch CI/CD Integration Essential Helpful but not required"},{"location":"development-workflows/#github-flow","title":"GitHub Flow","text":""},{"location":"development-workflows/#overview-and-use-cases-for-github-flow","title":"Overview and Use Cases for GitHub Flow","text":"<p>GitHub Flow is a lightweight, branch-based workflow built around core GitHub features. It's simpler than Gitflow, focusing on frequent deployment and rapid feedback.</p> <p>Best suited for:</p> <ul> <li>Web applications with continuous deployment</li> <li>Teams using GitHub exclusively</li> <li>Projects with simple release requirements</li> <li>Teams wanting minimal process overhead</li> </ul> <p>Visual representation:</p> <pre><code>main:    A---B---C---D------F---G\n                     \\     /\nfeature:              E---/\n</code></pre>"},{"location":"development-workflows/#implementation-steps-for-github-flow","title":"Implementation Steps for GitHub Flow","text":"<p>Create a branch:</p> <pre><code>git checkout main\ngit pull origin main\ngit checkout -b descriptive-branch-name\n</code></pre> <p>Add commits:</p> <pre><code># Make changes\ngit add changed-files\ngit commit -m \"Clear description of changes\"\n\n# Continue making changes\ngit add more-files\ngit commit -m \"More changes\"\n</code></pre> <p>Open a Pull Request:</p> <pre><code>git push -u origin descriptive-branch-name\n</code></pre> <p>Then create PR via GitHub interface</p> <ol> <li>Discuss and review:</li> <li>Team members review code and provide feedback</li> <li>CI runs tests automatically</li> <li> <p>Make additional commits to address feedback</p> </li> <li> <p>Deploy and test:</p> </li> <li>Deploy branch to staging/test environment</li> <li> <p>Verify functionality in a production-like environment</p> </li> <li> <p>Merge to main:</p> </li> <li>Use GitHub's \"Merge Pull Request\" button</li> <li>Delete the branch after merging</li> </ol>"},{"location":"development-workflows/#deployment-process","title":"Deployment Process","text":"<p>GitHub Flow assumes continuous deployment:</p> <ol> <li>Merged changes to <code>main</code> trigger automatic deployment</li> <li>Deployments can be to staging first, then production</li> <li>Any issues found are fixed in a new branch</li> <li>Focus on quick fixes rather than reverting</li> </ol>"},{"location":"development-workflows/#comparison-with-gitflow","title":"Comparison with GitFlow","text":"Feature GitHub Flow GitFlow Complexity Simple Complex Branches One primary (main) + feature branches Multiple permanent branches + feature/release/hotfix branches Release Cycle Continuous Scheduled Ideal For Web apps, continuous deployment Versioned software Production Branch <code>main</code> <code>main</code> and release branches Integration Feature branches merge directly to main Feature branches merge to develop Multiple Versions Not supported Supported Learning Curve Low Moderate"},{"location":"development-workflows/#gitlab-flow","title":"GitLab Flow","text":""},{"location":"development-workflows/#overview-and-use-cases-for-gitlab-flow","title":"Overview and Use Cases for GitLab Flow","text":"<p>GitLab Flow combines feature-driven development with issue tracking. It extends GitHub Flow with environment branches and optional release branches.</p> <p>Best suited for:</p> <ul> <li>Teams using GitLab or similar platforms</li> <li>Projects requiring staged deployments</li> <li>Projects that need both continuous delivery and versioned releases</li> </ul> <p>Visual representation:</p> <pre><code>production: ------------A------------------B--\n                       /                  /\nmain:       C---D---E---F---G---H---I---J---K---L\n                     \\             \\\nfeature:              M---N---------O\n</code></pre>"},{"location":"development-workflows/#environment-branches","title":"Environment Branches","text":"<p>GitLab Flow uses environment branches as promotion stages:</p> <pre><code>feature \u2192 main \u2192 pre-production \u2192 production\n</code></pre> <p>For projects requiring versioned releases:</p> <pre><code>feature \u2192 main \u2192 release-1.0 \u2192 release-1.1\n</code></pre>"},{"location":"development-workflows/#implementation-steps-for-gitlab-flow","title":"Implementation Steps for GitLab Flow","text":"<p>Create a feature branch:</p> <pre><code>git checkout main\ngit pull origin main\ngit checkout -b 123-fix-login-issue\n</code></pre> <p>Make changes and commit:</p> <pre><code># Make changes\ngit add changed-files\ngit commit -m \"Fix login timeout issue #123\"\n</code></pre> <p>Push branch and create merge request:</p> <pre><code>git push -u origin 123-fix-login-issue\n</code></pre> <p>Then create merge request via GitLab interface</p> <ol> <li>Merge to main after approval:</li> <li>Use GitLab's merge button</li> <li> <p>Main branch is automatically deployed to staging environment</p> </li> <li> <p>Promote to production:</p> </li> </ol> <p>Either:</p> <pre><code># For environment branches approach\ngit checkout production\ngit merge main\ngit push origin production\n</code></pre> <p>Or:</p> <pre><code># For release branches approach\ngit checkout main\ngit checkout -b release-1.0\ngit push origin release-1.0\n</code></pre>"},{"location":"development-workflows/#release-management-for-gitlab-flow","title":"Release Management for GitLab Flow","text":"<p>GitLab Flow offers two release strategies:</p> <ol> <li>Environment branches:</li> <li>Production branch represents production environment</li> <li>Changes flow from main \u2192 pre-prod \u2192 production</li> <li> <p>Ideal for continuous deployment with verification stages</p> </li> <li> <p>Release branches:</p> </li> <li>Each release has a dedicated long-lived branch</li> <li>Only bug fixes are merged into release branches</li> <li>Ideal for software that needs multiple supported versions</li> </ol>"},{"location":"development-workflows/#comparing-workflows","title":"Comparing Workflows","text":""},{"location":"development-workflows/#workflow-comparison-table","title":"Workflow Comparison Table","text":"Workflow Complexity Branch Types Best For Release Cadence Learning Curve Centralized Low Single (main) Small teams, simple projects As needed Very Low Feature Branch Low Main + feature branches Most teams As needed Low Gitflow High Main, develop, feature, release, hotfix Complex, versioned projects Scheduled High Forking Medium Same as underlying workflow + fork Open source, public projects Varies Medium Trunk-Based Low Main + short-lived feature CI/CD, DevOps teams Continuous Medium (technical practices) GitHub Flow Low Main + feature branches Web apps, continuous deployment Continuous Low GitLab Flow Medium Main, environment/release + feature Staged deployment Continuous or scheduled Medium"},{"location":"development-workflows/#selecting-a-workflow","title":"Selecting a Workflow","text":"<p>Consider these factors when choosing a workflow:</p> <ol> <li>Team size and geographical distribution</li> <li>Release frequency and versioning requirements</li> <li>Project complexity and codebase size</li> <li>Contributor expertise and Git familiarity</li> <li>Integration with CI/CD and deployment processes</li> <li>Need for multiple supported versions</li> </ol>"},{"location":"development-workflows/#customizing-workflows","title":"Customizing Workflows","text":"<p>Most teams adapt standard workflows to their needs:</p> <ul> <li>Combining elements from different workflows</li> <li>Adapting branch naming and management</li> <li>Integrating with organization-specific tooling</li> <li>Evolving the workflow as team needs change</li> </ul> <p>\ud83d\udca1 Tip: Document your workflow and keep the documentation updated as your process evolves.</p>"},{"location":"development-workflows/#integrating-with-development-practices","title":"Integrating with Development Practices","text":""},{"location":"development-workflows/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<p>Effective Git workflows integrate with CI systems:</p> <pre><code># Example GitHub Actions workflow\nname: Build and Test\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up environment\n      run: npm install\n    - name: Run tests\n      run: npm test\n</code></pre> <p>Key CI best practices:</p> <ul> <li>Build and test on every commit</li> <li>Run the same CI process for branches and PRs</li> <li>Keep build times fast to enable frequent integration</li> <li>Prioritize fixing broken builds</li> </ul>"},{"location":"development-workflows/#code-review-strategies","title":"Code Review Strategies","text":"<p>Effective code reviews depend on the workflow:</p> <ul> <li>Pre-merge reviews: Used in Feature Branch, GitHub Flow, GitLab Flow</li> <li>Post-merge reviews: Sometimes used in Trunk-Based Development</li> <li>Pair programming: Can replace formal reviews in some teams</li> </ul> <p>Review best practices:</p> <ul> <li>Focus on small, focused changes</li> <li>Use automated tools for style and basic errors</li> <li>Review for design, maintainability, and correctness</li> <li>Build review into the workflow rather than as an afterthought</li> </ul>"},{"location":"development-workflows/#release-management","title":"Release Management","text":"<p>Different workflows approach releases differently:</p> <ul> <li>Continuous deployment: Changes in main go directly to production</li> <li>Environment promotion: Changes move through staging environments</li> <li>Release branches: Changes are batched into scheduled releases</li> <li>Tags and versions: Specific commits are tagged for release</li> </ul> <p>Release notes automation:</p> <pre><code># Generate changelog from commits\ngit log --pretty=format:\"%h - %s (%an)\" v1.0.0..v1.1.0 &gt; CHANGELOG.md\n</code></pre>"},{"location":"development-workflows/#documentation-practices","title":"Documentation Practices","text":"<p>Document your Git workflow:</p> <ul> <li>Branch naming conventions and purposes</li> <li>Commit message format and expectations</li> <li>PR/MR templates and requirements</li> <li>Release procedures and checklists</li> <li>Responsibility matrix for merge approvals</li> <li>Handling of critical fixes</li> </ul> <p>Example PR template:</p> <pre><code>## Description\n[Description of the changes]\n\n## Issue\nCloses #123\n\n## Type of change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Checklist\n- [ ] Tests added/updated\n- [ ] Documentation updated\n- [ ] CI tests passing\n</code></pre>"},{"location":"development-workflows/#command-summary","title":"Command Summary","text":"Operation Command Description Create Feature Branch <code>git checkout -b feature/name</code> Start new feature Push New Branch <code>git push -u origin feature/name</code> Push branch to remote Track Upstream <code>git remote add upstream &lt;url&gt;</code> Add original repo as upstream Sync with Upstream <code>git fetch upstream &amp;&amp; git merge upstream/main</code> Update fork from original Start GitFlow Feature <code>git flow feature start &lt;name&gt;</code> Begin new feature using GitFlow Finish GitFlow Feature <code>git flow feature finish &lt;name&gt;</code> Complete feature using GitFlow Start Release <code>git flow release start &lt;version&gt;</code> Begin new release using GitFlow Finish Release <code>git flow release finish &lt;version&gt;</code> Complete release using GitFlow Create Hotfix <code>git flow hotfix start &lt;version&gt;</code> Begin new hotfix using GitFlow"},{"location":"development-workflows/#related-topics","title":"Related Topics","text":"<ul> <li>Creating, managing, and navigating branches</li> <li>Combining branches with merge and rebase operations</li> <li>Working with remote repositories</li> <li>Advanced Git techniques and features</li> <li>Automating tasks with GitHub Actions</li> </ul> <p>Next: Automating tasks with GitHub Actions</p>"},{"location":"git-introduction/","title":"Git Introduction","text":"<p>A comprehensive overview of Git concepts, workflows, and fundamental operations.</p>"},{"location":"git-introduction/#how-git-works","title":"How Git Works","text":"<p>Git tracks changes through a series of snapshots. Here's a visual representation of how data flows through Git's core components:</p> <pre><code>flowchart LR\n    subgraph \"Local Environment\"\n        A[Working Directory]\n        B[Staging Area Index]\n        C[Local Repository .git directory]\n    end\n\n    subgraph \"Remote Environment\"\n        D[Remote Repository e.g. GitHub/GitLab]\n    end\n\n    A --&gt;|git add| B\n    B --&gt;|git commit| C\n    C --&gt;|git push| D\n    D --&gt;|git pull| C\n    C --&gt;|git checkout| A\n</code></pre>"},{"location":"git-introduction/#how-to-use-this-guide","title":"How to Use This Guide","text":"<ul> <li>Browse by Topic: Use the Table of Contents to find specific git operations</li> <li>Quick Copy: All commands are formatted for easy copy-pasting</li> <li>Detailed Pages: Click section links for comprehensive guides on each topic</li> <li>Workflow Reference: Refer to the workflow diagrams for common git patterns</li> </ul>"},{"location":"git-introduction/#getting-started-core-basics","title":"Getting Started: Core Basics","text":""},{"location":"git-introduction/#repository-initialization","title":"Repository Initialization","text":"<p>Initialize a new git repository:</p> <pre><code>git init\n</code></pre> <p>Clone an existing repository:</p> <pre><code>git clone &lt;repo-url&gt;\n</code></pre> <p>Set user identity (global):</p> <pre><code>git config --global user.name \"Your Name\"\n</code></pre> <pre><code>git config --global user.email \"your@email\"\n</code></pre>"},{"location":"git-introduction/#ignoring-keeping-files","title":"Ignoring &amp; Keeping Files","text":"<p>Add a <code>.gitignore</code> file:</p> <p>Defines intentionally untracked files to ignore.</p> <pre><code>touch .gitignore\n</code></pre> <p>Track an otherwise empty directory (with <code>.gitkeep</code>):</p> <p>Create directory:</p> <pre><code>mkdir -p some/empty/dir\n</code></pre> <p>Create .gitkeep file:</p> <pre><code>touch some/empty/dir/.gitkeep\n</code></pre> <p>Note: <code>.gitkeep</code> is not built-in but is a common convention.</p>"},{"location":"git-introduction/#basic-git-workflow","title":"Basic Git Workflow","text":"<p>Stage changes:</p> <p>Stage specific file:</p> <pre><code>git add &lt;filename&gt;\n</code></pre> <p>Stage all changes:</p> <pre><code>git add .\n</code></pre> <p>Commit changes:</p> <p>Commit with message:</p> <pre><code>git commit -m \"Descriptive message\"\n</code></pre> <p>Add and commit tracked files in one step:</p> <pre><code>git commit -am \"Add and commit in one step\"\n</code></pre> <p>Check status:</p> <p>Full status:</p> <pre><code>git status\n</code></pre> <p>Short format:</p> <pre><code>git status -s\n</code></pre> <p>View changes:</p> <p>Unstaged changes:</p> <pre><code>git diff\n</code></pre> <p>Staged changes:</p> <pre><code>git diff --staged\n</code></pre>"},{"location":"git-introduction/#common-git-workflows","title":"Common Git Workflows","text":""},{"location":"git-introduction/#feature-branch-workflow","title":"Feature Branch Workflow","text":"<p>Common in team environments where features are developed in isolation.</p> <pre><code>gitGraph\n    commit id: \"main\"\n    branch feature\n    checkout feature\n    commit id: \"work\"\n    commit id: \"more work\"\n    checkout main\n    merge feature\n    commit id: \"release\"\n</code></pre>"},{"location":"git-introduction/#gitflow-workflow","title":"Gitflow Workflow","text":"<p>A structured branching model with dedicated branches for development, features, releases, and hotfixes.</p> <pre><code>gitGraph\n    commit id: \"initial\"\n    branch develop\n    checkout develop\n    commit id: \"dev work\"\n    branch feature\n    checkout feature\n    commit id: \"feature work\"\n    checkout develop\n    merge feature\n    branch release\n    checkout release\n    commit id: \"release prep\"\n    checkout main\n    merge release\n    checkout develop\n    merge release\n    branch hotfix\n    checkout hotfix\n    commit id: \"urgent fix\"\n    checkout main\n    merge hotfix\n    checkout develop\n    merge hotfix\n</code></pre>"},{"location":"git-introduction/#forking-workflow","title":"Forking Workflow","text":"<p>Popular in open source projects, where contributors fork the main repository.</p> <pre><code>gitGraph\n    commit id: \"initial commit\"\n    branch upstream/main\n    checkout upstream/main\n    commit id: \"upstream work\"\n    branch fork/main\n    checkout fork/main\n    commit id: \"fork created\"\n    commit id: \"clone locally\"\n    branch feature\n    checkout feature\n    commit id: \"work\"\n    commit id: \"more work\"\n    checkout fork/main\n    merge feature id: \"merge to fork\"\n    checkout upstream/main\n    commit id: \"upstream changes\"\n    merge fork/main id: \"PR merged\"\n</code></pre>"},{"location":"github-actions/","title":"Automating Tasks with GitHub Actions","text":"<p>Master the art of automating workflows, tests, and deployments using GitHub's powerful CI/CD platform.</p>"},{"location":"github-actions/#understanding-github-actions","title":"Understanding GitHub Actions","text":""},{"location":"github-actions/#core-concepts","title":"Core Concepts","text":"<p>GitHub Actions is an automation platform built directly into GitHub repositories:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 GitHub Actions  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Workflow     \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6  Jobs &amp; Steps   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                          \u2502\n         \u25bc                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Triggers     \u2502        \u2502     Actions     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>Workflow: A configurable automated process made up of jobs</li> <li>Job: A set of steps that execute on the same runner</li> <li>Step: An individual task that runs commands or actions</li> <li>Action: A reusable unit of code</li> <li>Runner: A server that runs your workflows</li> <li>Event: A specific activity that triggers a workflow</li> </ul>"},{"location":"github-actions/#when-to-use-github-actions","title":"When to Use GitHub Actions","text":"<p>Ideal scenarios for implementing GitHub Actions:</p> <ul> <li>Running tests on pull requests before merging</li> <li>Deploying applications when new releases are created</li> <li>Publishing packages to registries</li> <li>Automating code quality checks and linting</li> <li>Handling issue and pull request maintenance</li> </ul>"},{"location":"github-actions/#workflow-structure","title":"Workflow Structure","text":"<p>GitHub Actions workflows are defined in YAML files:</p> <pre><code>name: Workflow Name\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Step name\n        run: echo \"Hello World\"\n</code></pre>"},{"location":"github-actions/#creating-your-first-workflow","title":"Creating Your First Workflow","text":""},{"location":"github-actions/#directory-structure","title":"Directory Structure","text":"<p>Workflows are stored in a specific directory structure:</p> <pre><code>your-repo/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 main-workflow.yml\n\u2502       \u2514\u2500\u2500 deployment.yml\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 ...\n</code></pre> <p>Create the workflows directory with:</p> <pre><code>mkdir -p .github/workflows\n</code></pre>"},{"location":"github-actions/#basic-workflow-example","title":"Basic Workflow Example","text":"<p>A simple workflow to run tests on push:</p> <pre><code>name: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n</code></pre> <p>Save this as <code>.github/workflows/ci.yml</code> to enable it.</p>"},{"location":"github-actions/#manual-workflow-triggers","title":"Manual Workflow Triggers","text":"<p>Create workflows that can be triggered manually:</p> <pre><code>name: Manual workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        default: 'staging'\n        type: choice\n        options:\n          - staging\n          - production\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to environment\n        run: echo \"Deploying to ${{ github.event.inputs.environment }}\"\n</code></pre> <p>\ud83d\udca1 Tip: Manual workflows appear under the \"Actions\" tab in your repository, where you can select inputs and run them on demand.</p>"},{"location":"github-actions/#essential-workflow-components","title":"Essential Workflow Components","text":""},{"location":"github-actions/#triggers-events","title":"Triggers (Events)","text":"<p>Common events that can trigger workflows:</p> <pre><code># On push to specific branches\non:\n  push:\n    branches: [ main, dev ]\n    paths:\n      - 'src/**'\n      - '!**.md'\n\n# On schedule (cron syntax)\non:\n  schedule:\n    - cron: '0 0 * * *'  # Midnight every day\n\n# On pull request\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\n# On release\non:\n  release:\n    types: [published]\n</code></pre>"},{"location":"github-actions/#jobs-and-steps","title":"Jobs and Steps","text":"<p>Structuring work with jobs and steps:</p> <pre><code>jobs:\n  build:\n    name: Build job\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run a shell command\n        run: echo \"This is a command\"\n        shell: bash\n\n  test:\n    name: Test job\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run tests\n        run: |\n          echo \"Running tests\"\n          echo \"Multi-line commands are supported\"\n</code></pre>"},{"location":"github-actions/#actions","title":"Actions","text":"<p>Using and referencing actions:</p> <pre><code>steps:\n  # Use an action from the GitHub Marketplace\n  - name: Setup Node.js\n    uses: actions/setup-node@v3\n    with:\n      node-version: '16'\n\n  # Use a Docker container action\n  - name: Run in Docker\n    uses: docker://alpine:3.14\n    with:\n      args: /bin/sh -c \"echo hello\"\n\n  # Use a local action\n  - name: Local Action\n    uses: ./.github/actions/my-custom-action\n</code></pre>"},{"location":"github-actions/#runners","title":"Runners","text":"<p>Different environments for running workflows:</p> <pre><code>jobs:\n  linux-job:\n    runs-on: ubuntu-latest\n\n  windows-job:\n    runs-on: windows-latest\n\n  mac-job:\n    runs-on: macos-latest\n\n  # Use specific versions\n  ubuntu-specific:\n    runs-on: ubuntu-20.04\n\n  # Use self-hosted runners\n  custom-job:\n    runs-on: self-hosted\n</code></pre>"},{"location":"github-actions/#secrets-and-environment-variables","title":"Secrets and Environment Variables","text":""},{"location":"github-actions/#using-repository-secrets","title":"Using Repository Secrets","text":"<p>Store and use sensitive information securely:</p> <pre><code>jobs:\n  deploy:\n    steps:\n      - name: Deploy with secret\n        run: ./deploy.sh\n        env:\n          API_TOKEN: ${{ secrets.API_TOKEN }}\n</code></pre> <p>To add a secret, navigate to:</p> <ol> <li>Repository \u2192 Settings \u2192 Secrets \u2192 Actions</li> <li>Click \"New repository secret\"</li> <li>Add name (e.g., <code>API_TOKEN</code>) and value</li> </ol>"},{"location":"github-actions/#environment-variables","title":"Environment Variables","text":"<p>Setting and using environment variables:</p> <pre><code>jobs:\n  build:\n    env:\n      # Job level variables\n      NODE_ENV: production\n\n    steps:\n      - name: Step with environment variables\n        env:\n          # Step level variables\n          DB_HOST: localhost\n          DB_USER: root\n        run: |\n          echo \"NODE_ENV: $NODE_ENV\"\n          echo \"DB_HOST: $DB_HOST\"\n</code></pre>"},{"location":"github-actions/#context-access","title":"Context Access","text":"<p>Access to GitHub context variables:</p> <pre><code>jobs:\n  context-example:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dump GitHub context\n        run: |\n          echo \"Repository: ${{ github.repository }}\"\n          echo \"Ref: ${{ github.ref }}\"\n          echo \"SHA: ${{ github.sha }}\"\n          echo \"Actor: ${{ github.actor }}\"\n          echo \"Workflow: ${{ github.workflow }}\"\n</code></pre> <p>\ud83d\udca1 Tip: Use <code>${{ toJSON(github) }}</code> to print the entire context for debugging.</p>"},{"location":"github-actions/#common-github-actions-use-cases","title":"Common GitHub Actions Use Cases","text":""},{"location":"github-actions/#continuous-integration","title":"Continuous Integration","text":"<p>Set up continuous integration for your project:</p> <pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  build-and-test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Test\n        run: npm test\n\n      - name: Build\n        run: npm run build\n</code></pre>"},{"location":"github-actions/#automated-testing","title":"Automated Testing","text":"<p>Run tests across multiple environments:</p> <pre><code>name: Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm ci\n      - run: npm test\n</code></pre>"},{"location":"github-actions/#deployments","title":"Deployments","text":"<p>Automate deployments to different environments:</p> <pre><code>name: Deploy\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build\n        run: npm ci &amp;&amp; npm run build\n\n      - name: Deploy to production\n        uses: some-deployment-action@v1\n        with:\n          server: ${{ secrets.PRODUCTION_SERVER }}\n          token: ${{ secrets.DEPLOY_TOKEN }}\n          folder: ./dist\n</code></pre>"},{"location":"github-actions/#code-quality-checks","title":"Code Quality Checks","text":"<p>Enforce code quality standards:</p> <pre><code>name: Code Quality\n\non: [push, pull_request]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check formatting\n        run: npm run format:check\n\n      - name: Run SonarQube scan\n        uses: sonarsource/sonarqube-scan-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n</code></pre>"},{"location":"github-actions/#working-with-artifacts-and-dependencies","title":"Working with Artifacts and Dependencies","text":""},{"location":"github-actions/#uploading-and-downloading-artifacts","title":"Uploading and Downloading Artifacts","text":"<p>Share files between jobs and preserve outputs:</p> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build\n        run: npm run build\n\n      # Upload build artifacts\n      - name: Upload build output\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-files\n          path: dist/\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      # Download build artifacts\n      - name: Download build output\n        uses: actions/download-artifact@v3\n        with:\n          name: build-files\n          path: dist/\n\n      - name: Deploy\n        run: ./deploy.sh\n</code></pre>"},{"location":"github-actions/#caching-dependencies","title":"Caching Dependencies","text":"<p>Speed up workflows with dependency caching:</p> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      # Cache npm dependencies\n      - name: Cache node modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install dependencies\n        run: npm ci\n</code></pre>"},{"location":"github-actions/#sharing-data-between-jobs","title":"Sharing Data Between Jobs","text":"<p>Pass data between jobs:</p> <pre><code>jobs:\n  job1:\n    runs-on: ubuntu-latest\n    outputs:\n      output1: ${{ steps.step1.outputs.test }}\n    steps:\n      - id: step1\n        run: echo \"test=hello\" &gt;&gt; $GITHUB_OUTPUT\n\n  job2:\n    needs: job1\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo ${{ needs.job1.outputs.output1 }}\n</code></pre>"},{"location":"github-actions/#advanced-github-actions-techniques","title":"Advanced GitHub Actions Techniques","text":""},{"location":"github-actions/#matrix-builds","title":"Matrix Builds","text":"<p>Run jobs with multiple variants:</p> <pre><code>jobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        node: [14, 16, 18]\n        include:\n          # Add additional variables for specific combinations\n          - os: ubuntu-latest\n            node: 16\n            npm: 8\n        exclude:\n          # Exclude specific combinations\n          - os: windows-latest\n            node: 14\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm test\n</code></pre>"},{"location":"github-actions/#reusable-workflows","title":"Reusable Workflows","text":"<p>Create and use reusable workflows:</p> <pre><code># In .github/workflows/reusable.yml\nname: Reusable workflow\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        required: true\n        type: string\n    secrets:\n      token:\n        required: true\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to ${{ inputs.environment }}\n        run: ./deploy.sh\n        env:\n          TOKEN: ${{ secrets.token }}\n</code></pre> <p>Using the reusable workflow:</p> <pre><code># In .github/workflows/caller.yml\nname: Production deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  call-reusable:\n    uses: ./.github/workflows/reusable.yml\n    with:\n      environment: production\n    secrets:\n      token: ${{ secrets.DEPLOY_TOKEN }}\n</code></pre>"},{"location":"github-actions/#workflow-concurrency","title":"Workflow Concurrency","text":"<p>Managing concurrent workflow runs:</p> <pre><code>name: Build\n\non: pull_request\n\n# Cancel in-progress runs when PR is updated\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npm ci\n      - run: npm build\n</code></pre>"},{"location":"github-actions/#composite-actions","title":"Composite Actions","text":"<p>Create reusable composite actions:</p> <pre><code># In .github/actions/setup-build-env/action.yml\nname: 'Setup Build Environment'\ndescription: 'Sets up the build environment with Node.js and dependencies'\ninputs:\n  node-version:\n    description: 'Node.js version'\n    required: false\n    default: '16'\nruns:\n  using: \"composite\"\n  steps:\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ inputs.node-version }}\n\n    - name: Cache node modules\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}\n\n    - name: Install dependencies\n      run: npm ci\n      shell: bash\n</code></pre> <p>Using the composite action:</p> <pre><code>jobs:\n  build:\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-build-env\n        with:\n          node-version: '18'\n</code></pre>"},{"location":"github-actions/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"github-actions/#viewing-workflow-runs","title":"Viewing Workflow Runs","text":"<p>Navigate to the Actions tab in your repository to:</p> <ul> <li>See all workflow runs</li> <li>Filter by workflow, branch, or event</li> <li>View detailed logs for each step</li> <li>Re-run workflows or specific jobs</li> </ul>"},{"location":"github-actions/#enabling-debug-logging","title":"Enabling Debug Logging","text":"<p>Enable detailed logs for troubleshooting:</p> <pre><code># Enable step debug logging\n# Set repository secret ACTIONS_STEP_DEBUG=true\n\n# Enable runner debug logging\n# Set repository secret ACTIONS_RUNNER_DEBUG=true\n</code></pre> <p>You can also enable debug logging for a single workflow run by clicking \"Run workflow\" and checking \"Enable debug logging.\"</p>"},{"location":"github-actions/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Solution Workflow not running Check the trigger events and branch filters Action fails with exit code Check error logs and command syntax Secret not working Verify secret name and ensure it's set correctly Timeout issues Break jobs into smaller parts or increase timeout-minutes Permission errors Check the <code>permissions</code> field in your workflow <p>Example of setting timeout for a job:</p> <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    steps:\n      - uses: actions/checkout@v3\n      - name: Long-running process\n        run: ./slow_script.sh\n</code></pre>"},{"location":"github-actions/#github-actions-for-git-operations","title":"GitHub Actions for Git Operations","text":""},{"location":"github-actions/#automated-versioning","title":"Automated Versioning","text":"<p>Automatically manage version numbers:</p> <pre><code>name: Version Bump\n\non:\n  push:\n    branches: [main]\n\njobs:\n  versioning:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0  # Fetch all history and tags\n\n      - name: Bump version\n        id: bump\n        uses: phips28/gh-action-bump-version@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Output new version\n        run: echo \"New version is ${{ steps.bump.outputs.newTag }}\"\n</code></pre>"},{"location":"github-actions/#release-management","title":"Release Management","text":"<p>Create automated releases:</p> <pre><code>name: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build\n        run: npm ci &amp;&amp; npm run build\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./dist/app.zip\n          asset_name: app.zip\n          asset_content_type: application/zip\n</code></pre>"},{"location":"github-actions/#pull-request-automation","title":"Pull Request Automation","text":"<p>Automate pull request processes:</p> <pre><code>name: PR Automation\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Lint Code\n        uses: github/super-linter@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  auto-approve:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: hmarr/auto-approve-action@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"github-actions/#best-practices","title":"Best Practices","text":""},{"location":"github-actions/#performance-optimization","title":"Performance Optimization","text":"<p>Optimize GitHub Actions workflow performance:</p> <pre><code>jobs:\n  optimize:\n    runs-on: ubuntu-latest\n    steps:\n      # Only checkout what's necessary\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n\n      # Use dependency caching\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n\n      # Run jobs in parallel when possible\n      # Use task concurrency\n      # Avoid unnecessary steps\n</code></pre>"},{"location":"github-actions/#security-considerations","title":"Security Considerations","text":"<p>Secure your GitHub Actions workflows:</p> <pre><code>name: Secure Workflow\n\non:\n  push:\n    branches: [main]\n\n# Set minimum permissions needed\npermissions:\n  contents: read\n  issues: write\n\njobs:\n  secure-job:\n    runs-on: ubuntu-latest\n    steps:\n      # Pin actions to full length commit SHA\n      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846\n\n      # Scan code for vulnerabilities\n      - name: Security scan\n        uses: github/codeql-action/analyze@v2\n</code></pre>"},{"location":"github-actions/#workflow-organization","title":"Workflow Organization","text":"<p>Structure complex workflows for maintainability:</p> <pre><code>.github/\n\u251c\u2500\u2500 workflows/\n\u2502   \u251c\u2500\u2500 ci.yml             # Testing &amp; validation\n\u2502   \u251c\u2500\u2500 cd.yml             # Deployment\n\u2502   \u251c\u2500\u2500 cron-jobs.yml      # Scheduled tasks\n\u2502   \u2514\u2500\u2500 utilities.yml      # Helper workflows\n\u251c\u2500\u2500 actions/\n\u2502   \u251c\u2500\u2500 setup/             # Custom setup actions\n\u2502   \u2514\u2500\u2500 deployment/        # Custom deployment actions\n\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 labeler.yml        # PR labeler configuration\n</code></pre> <p>For complex repositories, divide workflows by purpose and reuse common steps with composite actions.</p>"},{"location":"github-actions/#command-summary","title":"Command Summary","text":"Operation Command/Action Description Create workflow Create <code>.github/workflows/name.yml</code> file Define GitHub Actions workflow Manually trigger Use <code>workflow_dispatch</code> event Create manually triggered workflow Run in matrix <code>strategy: matrix:</code> config Run job with variations Cache dependencies <code>actions/cache@v3</code> Speed up builds with caching Upload artifacts <code>actions/upload-artifact@v3</code> Share files between jobs Composite action Create <code>action.yml</code> with steps Make reusable action Debug workflow Set <code>ACTIONS_STEP_DEBUG</code> secret Enable detailed logging PR automation Use event <code>pull_request</code> Automate PR processes Scheduled run Use <code>schedule: - cron:</code> syntax Run workflows on schedule Secure secrets Use <code>secrets.&lt;name&gt;</code> syntax Use encrypted secrets"},{"location":"github-actions/#related-topics","title":"Related Topics","text":"<ul> <li>Established Git workflows for teams</li> <li>Working with remote repositories</li> <li>Marking release points and version management</li> <li>Advanced Git techniques and features</li> </ul> <p>Next: Resources and Further Reading</p>"},{"location":"logs-diffs-history/","title":"Viewing Project History and Comparing Changes","text":"<p>Master the art of exploring Git history and analyzing differences between commits, branches, and files.</p>"},{"location":"logs-diffs-history/#git-history-basics","title":"Git History Basics","text":""},{"location":"logs-diffs-history/#understanding-gits-history-model","title":"Understanding Git's History Model","text":"<p>Git stores project history as a series of snapshots (commits) linked to form a directed acyclic graph (DAG):</p> <ul> <li>Each commit contains a pointer to its parent commit(s)</li> <li>Commits are identified by their SHA-1 hash</li> <li>Branches and tags are simply pointers to specific commits</li> <li>History can diverge and merge back together</li> </ul>"},{"location":"logs-diffs-history/#the-commit-graph","title":"The Commit Graph","text":"<p>A typical commit graph might look like:</p> <pre><code>  A---B---C feature\n /         \\\nD---E---F---G main\n     \\\n      H---I topic\n</code></pre> <p>Where each letter represents a commit, and lines show parent-child relationships.</p>"},{"location":"logs-diffs-history/#viewing-commit-history","title":"Viewing Commit History","text":""},{"location":"logs-diffs-history/#basic-log-commands","title":"Basic Log Commands","text":"<p>View commit history with <code>git log</code>:</p> <pre><code># Basic commit history\ngit log\n\n# Show history with short single-line summaries\ngit log --oneline\n\n# Show difference introduced in each commit\ngit log -p\n\n# Show statistics about what changed in each commit\ngit log --stat\n</code></pre>"},{"location":"logs-diffs-history/#formatting-log-output","title":"Formatting Log Output","text":"<p>Customize log output format:</p> <pre><code># Customize the output format\ngit log --pretty=format:\"%h - %an, %ar : %s\"\n\n# Common format placeholders:\n# %h  - abbreviated commit hash\n# %an - author name\n# %ar - author date, relative\n# %s  - subject (commit message)\n# %d  - ref names (branches, tags)\n\n# Show with both date and relative time\ngit log --pretty=format:\"%h - %an [%ad] (%ar): %s\" --date=short\n</code></pre> <p>\ud83d\udca1 Tip: Create aliases for your favorite log formats to save typing.</p>"},{"location":"logs-diffs-history/#limiting-log-output","title":"Limiting Log Output","text":"<p>Control how many commits to display:</p> <pre><code># Show only the last n commits\ngit log -n 5\n\n# Show commits since a specific date\ngit log --since=\"2023-01-01\"\ngit log --after=\"2023-01-01\"\n\n# Show commits until a specific date\ngit log --until=\"2023-01-01\"\ngit log --before=\"2023-01-01\"\n\n# Show commits between dates\ngit log --since=\"2023-01-01\" --until=\"2023-02-01\"\n</code></pre>"},{"location":"logs-diffs-history/#filtering-log-output","title":"Filtering Log Output","text":"<p>Filter the commit history:</p> <pre><code># Filter by author\ngit log --author=\"John Doe\"\n\n# Filter by committer\ngit log --committer=\"Jane Smith\"\n\n# Filter by commit message\ngit log --grep=\"bugfix\"\n\n# Filter by content changes\ngit log -S\"function_name\"  # Search for added/removed string\ngit log -G\"regex_pattern\"  # Search for added/removed pattern\n\n# Filter by file\ngit log -- path/to/file.txt\n\n# Filter by changes to a specific function\ngit log -L :function_name:path/to/file.c\n</code></pre>"},{"location":"logs-diffs-history/#graphical-log-views","title":"Graphical Log Views","text":"<p>Visualize branching history:</p> <pre><code># Show textual graph of commits\ngit log --graph\n\n# Combine with oneline format\ngit log --graph --oneline\n\n# Decorative graph showing branches and tags\ngit log --graph --oneline --decorate\n\n# Show all branches\ngit log --graph --oneline --decorate --all\n</code></pre> <p>Example advanced graph log alias:</p> <pre><code>git config --global alias.logline \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"\n# Use as: git logline\n</code></pre>"},{"location":"logs-diffs-history/#examining-changes","title":"Examining Changes","text":""},{"location":"logs-diffs-history/#basic-diff-usage","title":"Basic Diff Usage","text":"<p>The <code>git diff</code> command shows differences between various states:</p> <pre><code># Show unstaged changes (working directory vs staging area)\ngit diff\n\n# Show staged changes (staging area vs last commit)\ngit diff --staged\n# or\ngit diff --cached\n</code></pre>"},{"location":"logs-diffs-history/#comparing-working-directory-and-staging-area","title":"Comparing Working Directory and Staging Area","text":"<p>View differences between your current files and what's staged:</p> <pre><code># Specific file differences\ngit diff [file]\n\n# Show only names of changed files\ngit diff --name-only\n\n# Show changed files with status\ngit diff --name-status\n</code></pre>"},{"location":"logs-diffs-history/#comparing-with-repository-state","title":"Comparing with Repository State","text":"<p>Compare working directory or staging area with a committed version:</p> <pre><code># Compare working directory with last commit\ngit diff HEAD\n\n# Compare working directory with specific commit\ngit diff 7d9a5b2\n\n# Compare staging area with specific commit\ngit diff --staged 7d9a5b2\n</code></pre>"},{"location":"logs-diffs-history/#comparing-commits","title":"Comparing Commits","text":"<p>Compare any two commits:</p> <pre><code># Compare two commits\ngit diff 7d9a5b2 af92c7d\n\n# Compare with ancestor using ^\ngit diff 7d9a5b2^ 7d9a5b2\n\n# Compare with ancestor using ~\ngit diff HEAD~3 HEAD\n</code></pre>"},{"location":"logs-diffs-history/#comparing-branches","title":"Comparing Branches","text":"<p>Compare branches or other references:</p> <pre><code># Compare two branches\ngit diff main feature-branch\n\n# Compare branch with current branch\ngit diff feature-branch\n\n# Compare the tips of two branches\ngit diff main..feature-branch\n\n# Show what's in feature-branch that's not in main\ngit diff main...feature-branch\n</code></pre> <p>\u26a0\ufe0f Note: The difference between <code>..</code> and <code>...</code> is subtle but important. Double dots (<code>..</code>) compare exactly two points, while triple dots (<code>...</code>) compare the third reference with the merge base of the first two references.</p>"},{"location":"logs-diffs-history/#comparing-specific-files","title":"Comparing Specific Files","text":"<p>Limit diff output to specific files:</p> <pre><code># Compare specific file across branches\ngit diff main feature-branch -- path/to/file.txt\n\n# Compare file with specific commit\ngit diff 7d9a5b2 -- path/to/file.txt\n\n# Multiple files\ngit diff main feature-branch -- file1.txt file2.js\n</code></pre>"},{"location":"logs-diffs-history/#diff-formatting-options","title":"Diff Formatting Options","text":"<p>Control diff output format:</p> <pre><code># Show word differences instead of line\ngit diff --word-diff\n\n# Context lines (default is 3)\ngit diff -U5  # Show 5 lines of context\n\n# Generate patch file\ngit diff &gt; changes.patch\n\n# Show stats summary\ngit diff --stat\n\n# Show changes in color\ngit diff --color\n</code></pre>"},{"location":"logs-diffs-history/#advanced-history-inspection","title":"Advanced History Inspection","text":""},{"location":"logs-diffs-history/#blame-finding-who-changed-what","title":"Blame: Finding Who Changed What","text":"<p>Track who changed each line of a file and when:</p> <pre><code># See who changed each line in a file\ngit blame path/to/file.txt\n\n# Only show specific lines\ngit blame -L 10,20 path/to/file.txt\n\n# Ignore whitespace changes\ngit blame -w path/to/file.txt\n\n# Show the filename and line number in original commit\ngit blame -C path/to/file.txt\n</code></pre>"},{"location":"logs-diffs-history/#show-examining-specific-commits","title":"Show: Examining Specific Commits","text":"<p>View detailed information about commits:</p> <pre><code># Show a specific commit\ngit show 7d9a5b2\n\n# Show a specific file from a commit\ngit show 7d9a5b2:path/to/file.txt\n\n# Show commits pointed to by a tag\ngit show v1.0.0\n\n# Show the changes introduced by a commit\ngit show 7d9a5b2 --stat\n</code></pre>"},{"location":"logs-diffs-history/#rev-list-raw-history-access","title":"Rev-List: Raw History Access","text":"<p>List commit objects with powerful filtering:</p> <pre><code># List commit SHAs in a range\ngit rev-list HEAD~10..HEAD\n\n# Count commits\ngit rev-list --count main\n\n# List commits not reachable from main\ngit rev-list feature-branch --not main\n</code></pre>"},{"location":"logs-diffs-history/#log-with-patches","title":"Log with Patches","text":"<p>Show code changes within the log:</p> <pre><code># Show logs with the patch/diff for each commit\ngit log -p\n\n# Show logs with patch for a specific file\ngit log -p path/to/file.txt\n\n# Find when a specific string was added/removed\ngit log -p -S\"search string\" path/to/file.txt\n</code></pre>"},{"location":"logs-diffs-history/#following-file-history","title":"Following File History","text":"<p>Track a file's complete history, including renames:</p> <pre><code># Show history of a file, following renames\ngit log --follow path/to/file.txt\n\n# Show diffs for each change of the file\ngit log --follow -p path/to/file.txt\n</code></pre>"},{"location":"logs-diffs-history/#searching-project-history","title":"Searching Project History","text":""},{"location":"logs-diffs-history/#finding-commits-with-specific-content","title":"Finding Commits with Specific Content","text":"<p>Search for changes that add or remove specific text:</p> <pre><code># Find commits that add or remove string\ngit log -S\"search string\"\n\n# Find commits that match a regular expression\ngit log -G\"regex pattern\"\n\n# Search with pickaxe in a specific file\ngit log -S\"search string\" -- path/to/file.txt\n</code></pre>"},{"location":"logs-diffs-history/#finding-commits-by-author","title":"Finding Commits by Author","text":"<p>Filter commits by who created them:</p> <pre><code># Find commits by author email\ngit log --author=\"user@example.com\"\n\n# Find commits by author name\ngit log --author=\"John Doe\"\n\n# Use regular expression to match author\ngit log --author=\"John\\|Jane\"\n</code></pre>"},{"location":"logs-diffs-history/#finding-when-something-was-introduced","title":"Finding When Something Was Introduced","text":"<p>Determine when a feature or bug was introduced:</p> <pre><code># Binary search for first bad commit\ngit bisect start\ngit bisect bad    # Current commit is bad\ngit bisect good v1.0.0  # v1.0.0 was good\n# Git will checkout commits for you to test\n# For each commit, mark as good or bad\ngit bisect good  # or\ngit bisect bad\n# Eventually Git will identify the first bad commit\ngit bisect reset  # Return to original state\n\n# Find which commit introduced changes to specific lines\ngit blame -L 10,15 path/to/file.txt\n</code></pre>"},{"location":"logs-diffs-history/#history-visualization-tools","title":"History Visualization Tools","text":""},{"location":"logs-diffs-history/#command-line-visualizers","title":"Command Line Visualizers","text":"<p>Create better visualizations in the terminal:</p> <pre><code># Simple ASCII graph\ngit log --graph --oneline --all\n\n# More detailed ASCII graph\ngit log --graph --abbrev-commit --decorate --date=relative --all\n</code></pre>"},{"location":"logs-diffs-history/#gui-tools","title":"GUI Tools","text":"<p>Built-in and third-party visualization tools:</p> <pre><code># Launch built-in GUI visualizer\ngit gui\n\n# Launch gitk history browser\ngitk --all\n\n# Other popular tools:\n# - GitKraken\n# - SourceTree\n# - GitHub Desktop\n# - VSCode Git Graph extension\n</code></pre>"},{"location":"logs-diffs-history/#creating-git-aliases-for-custom-visualizations","title":"Creating Git Aliases for Custom Visualizations","text":"<p>Set up custom command shortcuts:</p> <pre><code># Create a detailed log graph alias\ngit config --global alias.graph \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative\"\n\n# Use it with: git graph\n</code></pre>"},{"location":"logs-diffs-history/#history-navigation-techniques","title":"History Navigation Techniques","text":""},{"location":"logs-diffs-history/#navigating-between-commits","title":"Navigating Between Commits","text":"<p>Move through history without changing working directory:</p> <pre><code># Specify a commit using its hash\ngit show 7d9a5b2\n\n# Refer to ancestors\ngit show HEAD^    # Parent of HEAD\ngit show HEAD~3   # Three commits back from HEAD\n\n# Refer to merge parents\ngit show HEAD^1   # First parent of a merge commit\ngit show HEAD^2   # Second parent of a merge commit\n</code></pre>"},{"location":"logs-diffs-history/#finding-branches-containing-a-commit","title":"Finding Branches Containing a Commit","text":"<p>Identify which branches include a specific commit:</p> <pre><code># Show local branches containing a commit\ngit branch --contains 7d9a5b2\n\n# Include remote branches\ngit branch -r --contains 7d9a5b2\n\n# Show all branches (local and remote)\ngit branch -a --contains 7d9a5b2\n</code></pre>"},{"location":"logs-diffs-history/#finding-merge-bases","title":"Finding Merge Bases","text":"<p>Find the common ancestor of two commits:</p> <pre><code># Find common ancestor of two branches\ngit merge-base main feature-branch\n\n# Find the best common ancestor(s)\ngit merge-base --all main feature-branch\n</code></pre>"},{"location":"logs-diffs-history/#identifying-important-changes","title":"Identifying Important Changes","text":"<p>Focus on significant changes in history:</p> <pre><code># Find commits modifying a function\ngit log -L :function_name:file.c\n\n# Find when lines were added\ngit blame -L 10,20 path/to/file.txt\n\n# Find changes to a specific part of code\ngit log -p -S\"function_name\" -- path/to/file.c\n</code></pre>"},{"location":"logs-diffs-history/#command-summary","title":"Command Summary","text":"Operation Command Description Basic History <code>git log</code> View commit history One-line History <code>git log --oneline</code> Compact history view Graph View <code>git log --graph --oneline</code> Visual history tree File History <code>git log -- file.txt</code> History for specific file Show Changes <code>git log -p</code> Show patches with log Who Changed Lines <code>git blame file.txt</code> See who changed each line Unstaged Changes <code>git diff</code> View working dir changes Staged Changes <code>git diff --staged</code> View staged changes Between Commits <code>git diff commit1 commit2</code> Compare two commits Between Branches <code>git diff branch1 branch2</code> Compare two branches Commit Details <code>git show commit-hash</code> View specific commit Search Content <code>git log -S\"string\"</code> Find string in history"},{"location":"logs-diffs-history/#related-topics","title":"Related Topics","text":"<ul> <li>Essential everyday Git commands and workflows</li> <li>Combining branches with merge and rebase operations</li> <li>Marking release points and version management</li> <li>Solving common Git problems</li> <li>Advanced Git techniques and features</li> </ul> <p>Next: Git configuration and command shortcuts</p>"},{"location":"merging-rebasing/","title":"Combining Branches with Merge and Rebase Operations","text":"<p>Master the art of integrating changes between branches with merge and rebase techniques.</p>"},{"location":"merging-rebasing/#understanding-branch-integration","title":"Understanding Branch Integration","text":""},{"location":"merging-rebasing/#merge-vs-rebase","title":"Merge vs. Rebase","text":"<p>Git offers two primary ways to integrate changes from one branch into another:</p> <p>Merging:</p> <ul> <li>Creates a new \"merge commit\" that combines changes from both branches</li> <li>Preserves complete history and chronological ordering</li> <li>Non-destructive operation (doesn't change existing commits)</li> </ul> <p>Rebasing:</p> <ul> <li>Moves the entire branch to begin on the tip of another branch</li> <li>Creates new commits that replicate the original changes</li> <li>Results in a linear project history</li> <li>Rewrites commit history (alters existing commits)</li> </ul>"},{"location":"merging-rebasing/#visual-comparison","title":"Visual Comparison","text":"<p>Before integration:</p> <pre><code>gitGraph\n    commit id: \"A\"\n    commit id: \"B\"\n    commit id: \"C\"\n    branch feature\n    checkout feature\n    commit id: \"D\"\n    commit id: \"E\"\n    checkout main\n</code></pre> <p>After merge:</p> <pre><code>gitGraph\n    commit id: \"A\"\n    commit id: \"B\"\n    commit id: \"C\"\n    branch feature\n    checkout feature\n    commit id: \"D\"\n    commit id: \"E\"\n    checkout main\n    merge feature id: \"F\"\n</code></pre> <p>After rebase:</p> <pre><code>gitGraph\n    commit id: \"A\"\n    commit id: \"B\"\n    commit id: \"C\"\n    branch feature\n    checkout feature\n    commit id: \"D'\"\n    commit id: \"E'\"\n</code></pre>"},{"location":"merging-rebasing/#when-to-use-each-approach","title":"When to Use Each Approach","text":"<p>Use merge when:</p> <ul> <li>You want to preserve the complete history and chronology</li> <li>The branch is public/shared with other developers</li> <li>You want to capture that a feature was developed in parallel</li> <li>You need to merge a long-running branch back to main</li> </ul> <p>Use rebase when:</p> <ul> <li>You want a clean, linear history</li> <li>The branch is a local, private branch not shared with others</li> <li>You want to integrate the latest changes from main into your feature branch</li> <li>You're cleaning up your branch before merging</li> </ul> <p>\u26a0\ufe0f Golden Rule of Rebasing: Never rebase commits that have been pushed to a public repository that others might have based work on.</p>"},{"location":"merging-rebasing/#merging-branches","title":"Merging Branches","text":""},{"location":"merging-rebasing/#basic-merge","title":"Basic Merge","text":"<p>Combine changes from a source branch into your current branch:</p>"},{"location":"merging-rebasing/#switch-to-the-target-branch","title":"Switch to the target branch","text":"<pre><code>git checkout main\n</code></pre>"},{"location":"merging-rebasing/#merge-the-source-branch-into-the-current-branch","title":"Merge the source branch into the current branch","text":"<pre><code>git merge feature-branch\n</code></pre>"},{"location":"merging-rebasing/#fast-forward-merge","title":"Fast-Forward Merge","text":"<p>A fast-forward merge occurs when the target branch pointer simply moves forward to the source branch pointer:</p>"},{"location":"merging-rebasing/#perform-a-fast-forward-merge","title":"Perform a fast-forward merge","text":"<pre><code>git merge feature-branch\n</code></pre> <p>This happens when there are no new commits in the target branch since the source branch was created.</p>"},{"location":"merging-rebasing/#no-fast-forward-merge","title":"No Fast-Forward Merge","text":"<p>Create a merge commit even when a fast-forward is possible:</p>"},{"location":"merging-rebasing/#create-a-merge-commit-always","title":"Create a merge commit always","text":"<pre><code>git merge --no-ff feature-branch\n</code></pre> <p>\ud83d\udca1 Tip: The <code>--no-ff</code> flag is useful for documenting that a feature branch once existed, even if it could be fast-forwarded.</p>"},{"location":"merging-rebasing/#squash-merge","title":"Squash Merge","text":"<p>Combine all commits from the source branch into a single commit on the target branch:</p>"},{"location":"merging-rebasing/#squash-merge_1","title":"Squash merge","text":"<pre><code>git merge --squash feature-branch\n</code></pre>"},{"location":"merging-rebasing/#commit-the-squashed-changes","title":"Commit the squashed changes","text":"<pre><code>git commit -m \"Merge feature-branch with squash: Feature description\"\n</code></pre> <p>\ud83d\udca1 Tip: Squash merging is useful when the individual commits in a feature branch aren't important for the project history.</p>"},{"location":"merging-rebasing/#aborting-a-merge","title":"Aborting a Merge","text":"<p>If you encounter issues during a merge, you can abort it:</p>"},{"location":"merging-rebasing/#abort-an-in-progress-merge","title":"Abort an in-progress merge","text":"<pre><code>git merge --abort\n</code></pre>"},{"location":"merging-rebasing/#rebasing-branches","title":"Rebasing Branches","text":""},{"location":"merging-rebasing/#basic-rebase","title":"Basic Rebase","text":"<p>Move your branch's changes to start from the tip of another branch:</p>"},{"location":"merging-rebasing/#switch-to-the-branch-you-want-to-rebase","title":"Switch to the branch you want to rebase","text":"<pre><code>git checkout feature-branch\n</code></pre>"},{"location":"merging-rebasing/#rebase-onto-the-target-branch","title":"Rebase onto the target branch","text":"<pre><code>git rebase main\n</code></pre>"},{"location":"merging-rebasing/#interactive-rebase","title":"Interactive Rebase","text":"<p>Modify commits during the rebase process:</p>"},{"location":"merging-rebasing/#interactive-rebase-for-the-last-3-commits","title":"Interactive rebase for the last 3 commits","text":"<pre><code>git rebase -i HEAD~3\n</code></pre>"},{"location":"merging-rebasing/#interactive-rebase-onto-another-branch","title":"Interactive rebase onto another branch","text":"<pre><code>git rebase -i main\n</code></pre> <p>Interactive rebase opens an editor with a list of commits and actions:</p> <pre><code>pick 1a2b3c4 First commit message\npick 2b3c4d5 Second commit message\npick 3c4d5e6 Third commit message\n\n# Commands:\n# p, pick &lt;commit&gt; = use commit\n# r, reword &lt;commit&gt; = use commit, but edit the commit message\n# e, edit &lt;commit&gt; = use commit, but stop for amending\n# s, squash &lt;commit&gt; = use commit, but meld into previous commit\n# f, fixup &lt;commit&gt; = like \"squash\", but discard this commit's log message\n# d, drop &lt;commit&gt; = remove commit\n</code></pre> <p>\ud83d\udca1 Tip: Interactive rebasing is powerful for cleaning up your commit history before sharing it.</p>"},{"location":"merging-rebasing/#aborting-a-rebase","title":"Aborting a Rebase","text":"<p>If you encounter issues during a rebase:</p>"},{"location":"merging-rebasing/#abort-an-in-progress-rebase","title":"Abort an in-progress rebase","text":"<pre><code>git rebase --abort\n</code></pre>"},{"location":"merging-rebasing/#continuing-a-rebase","title":"Continuing a Rebase","text":"<p>After resolving conflicts during a rebase:</p>"},{"location":"merging-rebasing/#continue-the-rebase-after-resolving-conflicts","title":"Continue the rebase after resolving conflicts","text":"<pre><code>git rebase --continue\n</code></pre>"},{"location":"merging-rebasing/#skip-the-current-commit-in-the-rebase","title":"Skip the current commit in the rebase","text":"<pre><code>git rebase --skip\n</code></pre>"},{"location":"merging-rebasing/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":""},{"location":"merging-rebasing/#understanding-conflicts","title":"Understanding Conflicts","text":"<p>Conflicts occur when Git can't automatically merge changes because both branches modified the same part of a file.</p> <p>Git marks conflicts in files with conflict markers:</p> <pre><code>  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n  # Changes from the current branch\n  ========\n  # Changes from the branch being merged\n  &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch\n</code></pre>"},{"location":"merging-rebasing/#resolving-merge-conflicts","title":"Resolving Merge Conflicts","text":"<p>When Git encounters conflicts during a merge, you'll need to resolve them manually.</p>"},{"location":"merging-rebasing/#identify-conflicted-files","title":"Identify Conflicted Files","text":"<p>First, check which files have conflicts:</p> <pre><code>git status\n</code></pre> <p>Files with conflicts will be listed as \"both modified\" in the status output.</p>"},{"location":"merging-rebasing/#edit-conflicted-files","title":"Edit Conflicted Files","text":"<p>Open each conflicted file in your editor and look for conflict markers (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>). For each conflict:</p> <pre><code># Edit the file to resolve conflicts:\n# 1. Remove the conflict markers\n# 2. Choose which changes to keep or combine them\n# 3. Save the file\n</code></pre>"},{"location":"merging-rebasing/#mark-resolved-files","title":"Mark Resolved Files","text":"<p>After editing, tell Git that you've resolved the conflicts by staging the files:</p> <pre><code>git add path/to/resolved/file.txt\n</code></pre> <p>Stage each file after you've resolved its conflicts.</p>"},{"location":"merging-rebasing/#complete-the-merge","title":"Complete the Merge","text":"<p>Once all conflicts are resolved and staged, complete the merge:</p> <pre><code>git commit\n</code></pre> <p>Git will open your editor with a default merge commit message that you can modify if needed.</p>"},{"location":"merging-rebasing/#resolving-rebase-conflicts","title":"Resolving Rebase Conflicts","text":"<p>Resolving conflicts during a rebase is similar to merge conflict resolution, but with a slightly different workflow.</p>"},{"location":"merging-rebasing/#identify-and-edit-conflicted-files","title":"Identify and Edit Conflicted Files","text":"<p>When a rebase stops due to conflicts:</p> <pre><code>git status\n</code></pre> <p>Open and edit each conflicted file as with merge conflicts.</p>"},{"location":"merging-rebasing/#stage-resolved-files","title":"Stage Resolved Files","text":"<p>After resolving each conflict, mark the file as resolved:</p> <pre><code>git add path/to/resolved/file.txt\n</code></pre>"},{"location":"merging-rebasing/#continue-the-rebase-process","title":"Continue the Rebase Process","text":"<p>Once conflicts in the current commit are resolved, continue the rebase:</p> <pre><code>git rebase --continue\n</code></pre> <p>Git may stop again if there are conflicts in subsequent commits. Repeat the resolution process for each stopping point.</p>"},{"location":"merging-rebasing/#skip-or-abort-if-needed","title":"Skip or Abort (If Needed)","text":"<p>If you want to skip applying the current commit:</p> <pre><code>git rebase --skip\n</code></pre> <p>If you want to cancel the entire rebase operation:</p> <pre><code>git rebase --abort\n</code></pre>"},{"location":"merging-rebasing/#using-merge-tools","title":"Using Merge Tools","text":"<p>Git can use visual merge tools to help resolve conflicts:</p>"},{"location":"merging-rebasing/#use-the-configured-merge-tool","title":"Use the configured merge tool","text":"<pre><code>git mergetool\n</code></pre>"},{"location":"merging-rebasing/#set-up-a-default-merge-tool","title":"Set up a default merge tool","text":"<pre><code>git config --global merge.tool &lt;tool-name&gt;\n</code></pre> <p>Common merge tools include:</p> <ul> <li><code>meld</code></li> <li><code>kdiff3</code></li> <li><code>vimdiff</code></li> <li><code>vscode</code></li> </ul>"},{"location":"merging-rebasing/#conflict-prevention-strategies","title":"Conflict Prevention Strategies","text":"<ol> <li>Pull regularly from the target branch to minimize drift</li> <li>Communicate with team members about which files you're working on</li> <li>Break large changes into smaller, focused commits</li> <li>Keep feature branches short-lived</li> <li>Use <code>.gitattributes</code> to set merge strategies for specific file types</li> </ol>"},{"location":"merging-rebasing/#cherry-picking-commits","title":"Cherry-Picking Commits","text":""},{"location":"merging-rebasing/#basic-cherry-pick","title":"Basic Cherry-Pick","text":"<p>Apply a specific commit from one branch to another:</p>"},{"location":"merging-rebasing/#switch-to-the-destination-branch","title":"Switch to the destination branch","text":"<pre><code>git checkout main\n</code></pre>"},{"location":"merging-rebasing/#cherry-pick-a-commit","title":"Cherry-pick a commit","text":"<pre><code>git cherry-pick &lt;commit-hash&gt;\n</code></pre>"},{"location":"merging-rebasing/#cherry-picking-multiple-commits","title":"Cherry-Picking Multiple Commits","text":"<p>Apply a range of commits:</p>"},{"location":"merging-rebasing/#cherry-pick-a-range-exclusive-of-first-commit","title":"Cherry-pick a range (exclusive of first commit)","text":"<pre><code>git cherry-pick &lt;start-commit&gt;..&lt;end-commit&gt;\n</code></pre>"},{"location":"merging-rebasing/#cherry-pick-a-range-inclusive-of-first-commit","title":"Cherry-pick a range (inclusive of first commit)","text":"<pre><code>git cherry-pick &lt;start-commit&gt;^..&lt;end-commit&gt;\n</code></pre>"},{"location":"merging-rebasing/#when-to-cherry-pick","title":"When to Cherry-Pick","text":"<ul> <li>Applying a specific bugfix to multiple branches</li> <li>Selectively pulling changes when a full merge isn't appropriate</li> <li>Recovering specific work from an abandoned branch</li> </ul> <p>\u26a0\ufe0f Warning: Cherry-picking creates duplicate commits with different hashes, which can complicate history if those changes are later merged normally.</p>"},{"location":"merging-rebasing/#advanced-branch-operations","title":"Advanced Branch Operations","text":""},{"location":"merging-rebasing/#merge-specific-files","title":"Merge Specific Files","text":"<p>Merge a specific file from another branch:</p>"},{"location":"merging-rebasing/#get-file-from-another-branch","title":"Get file from another branch","text":"<pre><code>git checkout &lt;branch-name&gt; -- &lt;file-path&gt;\n</code></pre>"},{"location":"merging-rebasing/#example-get-a-file-from-the-feature-branch","title":"Example: Get a file from the feature branch","text":"<pre><code>git checkout feature-branch -- src/utils/helpers.js\n</code></pre>"},{"location":"merging-rebasing/#rebase-onto-another-branch","title":"Rebase onto Another Branch","text":"<p>Move your changes to be based on a completely different branch:</p>"},{"location":"merging-rebasing/#rebase-feature-branch-onto-a-new-base","title":"Rebase feature branch onto a new base","text":"<pre><code>git rebase --onto &lt;new-base&gt; &lt;old-base&gt; &lt;branch&gt;\n</code></pre>"},{"location":"merging-rebasing/#example","title":"Example","text":"<pre><code>git rebase --onto main old-feature feature-branch\n</code></pre>"},{"location":"merging-rebasing/#updating-a-long-running-branch","title":"Updating a Long-Running Branch","text":"<p>Keep a long-running branch up to date with its parent:</p>"},{"location":"merging-rebasing/#option-1-merge-approach","title":"Option 1: Merge approach","text":"<pre><code>git checkout feature-branch\ngit merge main\n</code></pre>"},{"location":"merging-rebasing/#option-2-rebase-approach","title":"Option 2: Rebase approach","text":"<pre><code>git checkout feature-branch\ngit rebase main\n</code></pre>"},{"location":"merging-rebasing/#recovering-from-bad-merges","title":"Recovering from Bad Merges","text":"<p>If you need to undo a merge:</p>"},{"location":"merging-rebasing/#undo-the-last-merge-commit-but-keep-all-changes","title":"Undo the last merge commit but keep all changes","text":"<pre><code>git reset --soft HEAD^\n</code></pre>"},{"location":"merging-rebasing/#completely-discard-the-merge-and-all-changes","title":"Completely discard the merge and all changes","text":"<pre><code>git reset --hard HEAD^\n</code></pre>"},{"location":"merging-rebasing/#revert-a-merge-commit-that-has-been-pushed","title":"Revert a merge commit that has been pushed","text":"<pre><code>git revert -m 1 &lt;merge-commit-hash&gt;\n</code></pre>"},{"location":"merging-rebasing/#best-practices","title":"Best Practices","text":""},{"location":"merging-rebasing/#general-guidelines","title":"General Guidelines","text":"<ol> <li>Understand what you're doing before merging or rebasing</li> <li>Commit your work before starting a merge or rebase</li> <li>Consider creating a backup branch before complex operations:</li> </ol> <p>#### Create a backup branch</p> <pre><code>git branch backup-branch\n</code></pre> <ol> <li>Prefer <code>merge</code> for public branches and <code>rebase</code> for private branches</li> <li>Write clear merge commit messages that explain the purpose of the integration</li> </ol>"},{"location":"merging-rebasing/#team-workflows","title":"Team Workflows","text":"<ol> <li>Agree on a branching strategy with your team</li> <li>Document guidelines for when to merge vs. rebase</li> <li>Establish standards for commit messages and merge requests</li> <li>Use pull/merge requests for code review before integration</li> <li>Consider configuring branch protection rules in GitHub/GitLab</li> </ol>"},{"location":"merging-rebasing/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<ol> <li>Rebasing public branches that others depend on</li> <li>Force pushing after rewriting history</li> <li>Merging without understanding the changes being integrated</li> <li>Not resolving conflicts properly, just picking one side</li> <li>Forgetting to complete a merge or rebase after resolving conflicts</li> </ol>"},{"location":"merging-rebasing/#command-summary","title":"Command Summary","text":"Operation Command Description Basic Merge <code>git merge &lt;branch&gt;</code> Combine branch into current No Fast-Forward <code>git merge --no-ff &lt;branch&gt;</code> Always create a merge commit Squash Merge <code>git merge --squash &lt;branch&gt;</code> Combine into a single commit Abort Merge <code>git merge --abort</code> Cancel an in-progress merge Basic Rebase <code>git rebase &lt;branch&gt;</code> Replay commits onto another branch Interactive Rebase <code>git rebase -i &lt;commit&gt;</code> Edit commits during rebase Continue Rebase <code>git rebase --continue</code> Resume after fixing conflicts Cherry-Pick <code>git cherry-pick &lt;commit&gt;</code> Apply a commit to current branch Merge Specific File <code>git checkout &lt;branch&gt; -- &lt;file&gt;</code> Get file from another branch List Conflicts <code>git diff --name-only --diff-filter=U</code> Show conflicting files"},{"location":"merging-rebasing/#related-topics","title":"Related Topics","text":"<ul> <li>Creating, managing, and navigating branches</li> <li>Working with remote repositories (push, pull, fetch)</li> <li>Temporarily storing changes and cleaning working directory</li> <li>Viewing project history and comparing changes</li> <li>Advanced Git techniques and features</li> </ul>"},{"location":"remote-operations/","title":"Working with Remote Repositories","text":"<p>Master the essential commands for collaborating with others through remote Git repositories.</p>"},{"location":"remote-operations/#understanding-remote-repositories","title":"Understanding Remote Repositories","text":""},{"location":"remote-operations/#remote-repository-concepts","title":"Remote Repository Concepts","text":"<p>A remote repository is a version of your project that is hosted on the internet or network somewhere. Git's distributed nature allows multiple developers to work independently and then share their changes.</p> <pre><code>graph LR\n    A[\"Local Repo A (Developer A)\"] &lt;--&gt; B[\"Remote Repo (Server)\"]\n    B &lt;--&gt; C[\"Local Repo B (Developer B)\"]\n</code></pre>"},{"location":"remote-operations/#common-remote-operations","title":"Common Remote Operations","text":"<ul> <li>Fetch: Download objects and refs from remote without integrating them</li> <li>Pull: Fetch + integrate remote changes into your current branch</li> <li>Push: Upload your local branch commits to a remote repository</li> <li>Clone: Create a local copy of a remote repository</li> </ul>"},{"location":"remote-operations/#local-vs-remote","title":"Local vs Remote","text":"<p>Understanding the relationship between your local and remote branches:</p> <pre><code>gitGraph\n    commit id: \"Initial commit\"\n    commit id: \"Second commit\" \n    branch origin/main\n    checkout origin/main\n    commit id: \"Third commit\"\n    checkout main\n    commit id: \"Fourth commit\" type: HIGHLIGHT tag: \"HEAD\"\n    commit id: \"Fifth commit\"\n</code></pre> <p>The diagram above shows:</p> <ul> <li>Your local branch <code>main</code> has two commits ahead of the remote</li> <li>The remote tracking branch <code>origin/main</code> represents your last known state of the remote</li> <li><code>HEAD</code> points to your current position on the local main branch</li> </ul> <p>After pushing:</p> <pre><code>gitGraph\n    commit id: \"Initial commit\"\n    commit id: \"Second commit\"\n    branch origin/main\n    checkout main\n    commit id: \"Third commit\"\n    checkout origin/main\n    commit id: \"Third commit\"\n    checkout main\n    commit id: \"Fourth commit\"\n    commit id: \"Fifth commit\" type: HIGHLIGHT tag: \"HEAD\"\n    checkout origin/main\n    commit id: \"Fourth commit\"\n    commit id: \"Fifth commit\"\n</code></pre> <p>After pushing, the remote branch is updated with your local commits, and your local tracking reference to <code>origin/main</code> is updated to match.</p>"},{"location":"remote-operations/#setting-up-remote-connections","title":"Setting Up Remote Connections","text":""},{"location":"remote-operations/#adding-remotes","title":"Adding Remotes","text":"<p>Connect your local repository to a remote repository:</p>"},{"location":"remote-operations/#add-a-remote-named-origin","title":"Add a remote named \"origin\"","text":"<pre><code>git remote add origin https://github.com/username/repo.git\n</code></pre>"},{"location":"remote-operations/#add-another-remote-with-a-different-name","title":"Add another remote with a different name","text":"<pre><code>git remote add upstream https://github.com/original-owner/repo.git\n</code></pre>"},{"location":"remote-operations/#viewing-remotes","title":"Viewing Remotes","text":"<p>Inspect your remote connections:</p>"},{"location":"remote-operations/#list-all-remotes","title":"List all remotes","text":"<pre><code>git remote\n</code></pre>"},{"location":"remote-operations/#show-detailed-information-about-remotes-urls","title":"Show detailed information about remotes (URLs)","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"remote-operations/#show-information-about-a-specific-remote","title":"Show information about a specific remote","text":"<pre><code>git remote show origin\n</code></pre>"},{"location":"remote-operations/#renaming-remotes","title":"Renaming Remotes","text":"<p>Change the name of a remote:</p>"},{"location":"remote-operations/#rename-remote-from-origin-to-destination","title":"Rename remote from \"origin\" to \"destination\"","text":"<pre><code>git remote rename origin destination\n</code></pre>"},{"location":"remote-operations/#removing-remotes","title":"Removing Remotes","text":"<p>Delete a remote connection:</p>"},{"location":"remote-operations/#remove-the-remote-named-upstream","title":"Remove the remote named \"upstream\"","text":"<pre><code>git remote remove upstream\n</code></pre>"},{"location":"remote-operations/#working-with-multiple-remotes","title":"Working with Multiple Remotes","text":"<p>Multiple remotes are common in open source projects:</p>"},{"location":"remote-operations/#step-1-add-original-repository-as-upstream","title":"Step 1: Add original repository as \"upstream\"","text":"<pre><code>git remote add upstream https://github.com/original-owner/repo.git\n</code></pre>"},{"location":"remote-operations/#step-2-fetch-from-upstream","title":"Step 2: Fetch from upstream","text":"<pre><code>git fetch upstream\n</code></pre>"},{"location":"remote-operations/#step-3-merge-changes-from-upstreams-main-branch","title":"Step 3: Merge changes from upstream's main branch","text":"<pre><code>git merge upstream/main\n</code></pre> <p>\ud83d\udca1 Tip: In a fork workflow, \"origin\" typically points to your fork and \"upstream\" points to the original repository.</p>"},{"location":"remote-operations/#fetching-updates","title":"Fetching Updates","text":""},{"location":"remote-operations/#basic-fetch","title":"Basic Fetch","text":"<p>Download objects and refs from a remote without merging:</p>"},{"location":"remote-operations/#fetch-updates-from-the-origin-remote","title":"Fetch updates from the \"origin\" remote","text":"<pre><code>git fetch origin\n</code></pre>"},{"location":"remote-operations/#fetch-updates-from-a-specific-remote","title":"Fetch updates from a specific remote","text":"<pre><code>git fetch upstream\n</code></pre>"},{"location":"remote-operations/#fetching-specific-branches","title":"Fetching Specific Branches","text":"<p>Fetch only certain branches from remote:</p>"},{"location":"remote-operations/#fetch-a-specific-branch","title":"Fetch a specific branch","text":"<pre><code>git fetch origin feature-branch\n</code></pre>"},{"location":"remote-operations/#fetch-multiple-specific-branches","title":"Fetch multiple specific branches","text":"<pre><code>git fetch origin main develop feature-x\n</code></pre>"},{"location":"remote-operations/#pruning-when-fetching","title":"Pruning When Fetching","text":"<p>Clean up deleted remote branches:</p>"},{"location":"remote-operations/#fetch-and-remove-any-remote-tracking-references-that-no-longer-exist","title":"Fetch and remove any remote-tracking references that no longer exist","text":"<pre><code>git fetch --prune\n</code></pre>"},{"location":"remote-operations/#short-form","title":"Short form","text":"<pre><code>git fetch -p\n</code></pre>"},{"location":"remote-operations/#configure-git-to-always-prune-when-fetching","title":"Configure Git to always prune when fetching","text":"<pre><code>git config --global fetch.prune true\n</code></pre>"},{"location":"remote-operations/#fetch-all-remotes","title":"Fetch All Remotes","text":"<p>Fetch updates from all configured remotes:</p>"},{"location":"remote-operations/#fetch-from-all-remotes","title":"Fetch from all remotes","text":"<pre><code>git fetch --all\n</code></pre> <p>\ud83d\udca1 Tip: Fetching is a safe operation that doesn't change your working directory or current branch.</p>"},{"location":"remote-operations/#pulling-changes","title":"Pulling Changes","text":""},{"location":"remote-operations/#basic-pull","title":"Basic Pull","text":"<p>Fetch from a remote and integrate changes into the current branch:</p>"},{"location":"remote-operations/#pull-from-the-remote-tracking-branch","title":"Pull from the remote tracking branch","text":"<pre><code>git pull\n</code></pre>"},{"location":"remote-operations/#pull-from-a-specific-remote-and-branch","title":"Pull from a specific remote and branch","text":"<pre><code>git pull origin main\n</code></pre>"},{"location":"remote-operations/#pull-with-rebase","title":"Pull with Rebase","text":"<p>Pull using rebase instead of merge:</p>"},{"location":"remote-operations/#pull-with-rebase_1","title":"Pull with rebase","text":"<pre><code>git pull --rebase\n</code></pre>"},{"location":"remote-operations/#pull-from-specific-remote-and-branch-with-rebase","title":"Pull from specific remote and branch with rebase","text":"<pre><code>git pull --rebase origin feature-branch\n</code></pre>"},{"location":"remote-operations/#configure-pull-to-use-rebase-by-default","title":"Configure pull to use rebase by default","text":"<pre><code>git config --global pull.rebase true\n</code></pre>"},{"location":"remote-operations/#pull-with-specific-options","title":"Pull with Specific Options","text":"<p>Customize pull behavior:</p>"},{"location":"remote-operations/#pull-with-verbose-output","title":"Pull with verbose output","text":"<pre><code>git pull --verbose\n</code></pre>"},{"location":"remote-operations/#pull-without-auto-commit-leaves-changes-staged","title":"Pull without auto-commit (leaves changes staged)","text":"<pre><code>git pull --no-commit\n</code></pre>"},{"location":"remote-operations/#pull-only-if-it-can-be-fast-forwarded","title":"Pull only if it can be fast-forwarded","text":"<pre><code>git pull --ff-only\n</code></pre>"},{"location":"remote-operations/#pull-vs-fetch-merge","title":"Pull vs Fetch + Merge","text":"<p><code>git pull</code> is essentially a combination of <code>git fetch</code> and <code>git merge</code> (or <code>git rebase</code> with <code>--rebase</code>):</p>"},{"location":"remote-operations/#step-1-fetch-remote-changes","title":"Step 1: Fetch remote changes","text":"<pre><code>git fetch origin\n</code></pre>"},{"location":"remote-operations/#step-2-merge-remote-changes-equivalent-to-pull","title":"Step 2: Merge remote changes (equivalent to pull)","text":"<pre><code>git merge origin/main\n</code></pre> <p>These two steps combined are equivalent to:</p> <pre><code>git pull origin main\n</code></pre> <p>\u26a0\ufe0f Warning: <code>git pull</code> can lead to unexpected merge conflicts. For more control, some developers prefer using fetch and merge as separate steps.</p>"},{"location":"remote-operations/#pushing-changes","title":"Pushing Changes","text":""},{"location":"remote-operations/#basic-push","title":"Basic Push","text":"<p>Upload local branch commits to remote repository:</p>"},{"location":"remote-operations/#push-current-branch-to-its-tracking-branch","title":"Push current branch to its tracking branch","text":"<pre><code>git push\n</code></pre>"},{"location":"remote-operations/#push-current-branch-to-a-specific-remote-branch","title":"Push current branch to a specific remote branch","text":"<pre><code>git push origin main\n</code></pre>"},{"location":"remote-operations/#pushing-to-specific-remotes","title":"Pushing to Specific Remotes","text":"<p>Select which remote to push to:</p>"},{"location":"remote-operations/#push-to-a-remote-other-than-origin","title":"Push to a remote other than origin","text":"<pre><code>git push upstream main\n</code></pre>"},{"location":"remote-operations/#push-to-all-remotes","title":"Push to all remotes","text":"<pre><code>git remote | xargs -L1 git push\n</code></pre>"},{"location":"remote-operations/#setting-upstream-branch","title":"Setting Upstream Branch","text":"<p>Configure branch tracking during push:</p>"},{"location":"remote-operations/#push-and-set-upstream-branch","title":"Push and set upstream branch","text":"<pre><code>git push -u origin feature-branch\n</code></pre> <p>Or:</p> <pre><code>git push --set-upstream origin feature-branch\n</code></pre>"},{"location":"remote-operations/#check-which-branches-are-tracking-what","title":"Check which branches are tracking what","text":"<pre><code>git branch -vv\n</code></pre>"},{"location":"remote-operations/#force-push","title":"Force Push","text":"<p>Override remote branch history (use with caution):</p>"},{"location":"remote-operations/#force-push-danger-overwrites-remote-history","title":"Force push (DANGER: overwrites remote history)","text":"<pre><code>git push --force\n</code></pre>"},{"location":"remote-operations/#safer-force-push","title":"Safer force push","text":"<pre><code>git push --force-with-lease\n</code></pre> <p>\u26a0\ufe0f Warning: Force pushing rewrites history on the remote. Never force push to shared branches unless you're absolutely certain it won't affect other team members.</p>"},{"location":"remote-operations/#push-tags","title":"Push Tags","text":"<p>By default, <code>git push</code> doesn't transfer tags:</p>"},{"location":"remote-operations/#push-a-specific-tag","title":"Push a specific tag","text":"<pre><code>git push origin v1.0.0\n</code></pre>"},{"location":"remote-operations/#push-all-tags","title":"Push all tags","text":"<pre><code>git push origin --tags\n</code></pre>"},{"location":"remote-operations/#push-all-annotated-tags","title":"Push all annotated tags","text":"<pre><code>git push origin --follow-tags\n</code></pre>"},{"location":"remote-operations/#managing-remote-branches","title":"Managing Remote Branches","text":""},{"location":"remote-operations/#listing-remote-branches","title":"Listing Remote Branches","text":"<p>View branches in remote repositories:</p>"},{"location":"remote-operations/#list-remote-tracking-branches","title":"List remote-tracking branches","text":"<pre><code>git branch -r\n</code></pre>"},{"location":"remote-operations/#list-both-local-and-remote-tracking-branches","title":"List both local and remote-tracking branches","text":"<pre><code>git branch -a\n</code></pre>"},{"location":"remote-operations/#show-latest-commit-on-each-branch","title":"Show latest commit on each branch","text":"<pre><code>git branch -rv\n</code></pre>"},{"location":"remote-operations/#creating-remote-branches","title":"Creating Remote Branches","text":"<p>Create a branch on the remote repository:</p>"},{"location":"remote-operations/#push-local-branch-to-create-remote-branch-with-same-name","title":"Push local branch to create remote branch with same name","text":"<pre><code>git push origin local-branch\n</code></pre>"},{"location":"remote-operations/#create-remote-branch-with-different-name","title":"Create remote branch with different name","text":"<pre><code>git push origin local-branch:remote-branch-name\n</code></pre>"},{"location":"remote-operations/#tracking-remote-branches","title":"Tracking Remote Branches","text":"<p>Set up local branches to track remote branches:</p>"},{"location":"remote-operations/#create-a-local-branch-that-tracks-a-remote-branch","title":"Create a local branch that tracks a remote branch","text":"<pre><code>git checkout -b feature-branch origin/feature-branch\n</code></pre>"},{"location":"remote-operations/#set-an-existing-local-branch-to-track-a-remote-branch","title":"Set an existing local branch to track a remote branch","text":"<pre><code>git branch -u origin/feature-branch\n</code></pre>"},{"location":"remote-operations/#create-and-switch-to-a-branch-that-tracks-a-remote-branch","title":"Create and switch to a branch that tracks a remote branch","text":"<pre><code>git checkout --track origin/feature-branch\n</code></pre>"},{"location":"remote-operations/#deleting-remote-branches","title":"Deleting Remote Branches","text":"<p>Remove branches from remote repositories:</p>"},{"location":"remote-operations/#delete-a-remote-branch","title":"Delete a remote branch","text":"<pre><code>git push origin --delete feature-branch\n</code></pre>"},{"location":"remote-operations/#alternative-syntax","title":"Alternative syntax","text":"<pre><code>git push origin :feature-branch\n</code></pre>"},{"location":"remote-operations/#authentication-and-credentials","title":"Authentication and Credentials","text":""},{"location":"remote-operations/#https-authentication","title":"HTTPS Authentication","text":"<p>Authenticate with username and password:</p>"},{"location":"remote-operations/#clone-with-https-url","title":"Clone with HTTPS URL","text":"<pre><code>git clone https://github.com/username/repo.git\n</code></pre> <p>When you push, you'll be prompted for credentials.</p>"},{"location":"remote-operations/#ssh-authentication","title":"SSH Authentication","text":"<p>Authenticate using SSH keys (more secure):</p>"},{"location":"remote-operations/#step-1-generate-ssh-key-pair","title":"Step 1: Generate SSH key pair","text":"<pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre>"},{"location":"remote-operations/#step-2-show-public-key-to-add-to-githubgitlab","title":"Step 2: Show public key to add to GitHub/GitLab","text":"<pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre>"},{"location":"remote-operations/#step-3-clone-with-ssh-url","title":"Step 3: Clone with SSH URL","text":"<pre><code>git clone git@github.com:username/repo.git\n</code></pre>"},{"location":"remote-operations/#credential-helpers","title":"Credential Helpers","text":"<p>Store credentials to avoid typing them repeatedly:</p>"},{"location":"remote-operations/#cache-credentials-in-memory-for-15-minutes","title":"Cache credentials in memory for 15 minutes","text":"<pre><code>git config --global credential.helper cache\n</code></pre>"},{"location":"remote-operations/#store-credentials-permanently-in-plaintext","title":"Store credentials permanently (in plaintext)","text":"<pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"remote-operations/#use-the-os-credential-manager","title":"Use the OS credential manager","text":"<p>For Windows:</p> <pre><code>git config --global credential.helper manager\n</code></pre> <p>For macOS:</p> <pre><code>git config --global credential.helper osxkeychain\n</code></pre>"},{"location":"remote-operations/#personal-access-tokens","title":"Personal Access Tokens","text":"<p>Modern authentication for HTTPS (replacing passwords):</p> <pre><code># Use token as password when prompted\ngit clone https://github.com/username/repo.git\n# Username: your-username\n# Password: your-personal-access-token\n</code></pre> <p>\ud83d\udca1 Tip: GitHub, GitLab, and other platforms now require personal access tokens instead of passwords for Git operations.</p>"},{"location":"remote-operations/#common-git-workflows","title":"Common Git Workflows","text":"<p>This section covers standard workflows for different collaboration models in Git.</p>"},{"location":"remote-operations/#fork-and-pull-request-workflow","title":"Fork and Pull Request Workflow","text":"<p>A workflow commonly used in open source projects where you don't have direct write access to the repository.</p> <pre><code>gitGraph\n    commit id: \"Initial project\"\n    commit id: \"More work\"\n    branch fork/main\n    checkout fork/main\n    commit id: \"Clone fork\"\n    branch feature\n    checkout feature\n    commit id: \"Make changes\"\n    commit id: \"Finalize feature\"\n    checkout fork/main\n    merge feature\n    checkout main\n    merge fork/main id: \"PR merged\"\n</code></pre>"},{"location":"remote-operations/#step-1-fork-the-repository","title":"Step 1: Fork the Repository","text":"<p>Create your own copy of the repository on the remote server (done through GitHub/GitLab web interface).</p>"},{"location":"remote-operations/#step-2-clone-your-fork","title":"Step 2: Clone Your Fork","text":"<p>Create a local copy of your fork:</p> <pre><code>git clone https://github.com/your-username/repo.git\n</code></pre>"},{"location":"remote-operations/#step-3-add-original-repository-as-upstream","title":"Step 3: Add Original Repository as Upstream","text":"<p>Connect to the original repository to fetch updates later:</p> <pre><code>git remote add upstream https://github.com/original-owner/repo.git\n</code></pre>"},{"location":"remote-operations/#step-4-create-feature-branch","title":"Step 4: Create Feature Branch","text":"<p>Create a branch for your work:</p> <pre><code>git checkout -b feature-branch\n</code></pre>"},{"location":"remote-operations/#step-5-make-and-commit-changes","title":"Step 5: Make and Commit Changes","text":"<p>Implement your feature or fix:</p> <pre><code># Make changes to code files\ngit add .\n</code></pre> <pre><code>git commit -m \"Add new feature\"\n</code></pre>"},{"location":"remote-operations/#step-6-push-to-your-fork","title":"Step 6: Push to Your Fork","text":"<p>Upload your changes to your remote fork:</p> <pre><code>git push -u origin feature-branch\n</code></pre>"},{"location":"remote-operations/#step-7-create-pull-request","title":"Step 7: Create Pull Request","text":"<p>Submit your changes for review (done through GitHub/GitLab web interface).</p>"},{"location":"remote-operations/#direct-collaboration-workflow","title":"Direct Collaboration Workflow","text":"<p>A workflow used when you have direct write access to the shared repository.</p> <pre><code>gitGraph\n    commit id: \"Project start\"\n    commit id: \"Previous work\"\n    branch feature-branch\n    checkout feature-branch\n    commit id: \"Add feature\"\n    commit id: \"Refine feature\"\n    checkout main\n    merge feature-branch id: \"Merge feature\"\n    commit id: \"Hotfix\"\n</code></pre>"},{"location":"remote-operations/#step-1-clone-the-shared-repository","title":"Step 1: Clone the Shared Repository","text":"<p>Get a local copy of the shared repository:</p> <pre><code>git clone https://github.com/team/repo.git\n</code></pre>"},{"location":"remote-operations/#step-2-create-a-feature-branch","title":"Step 2: Create a Feature Branch","text":"<p>Create a branch for your specific work:</p> <pre><code>git checkout -b feature-branch\n</code></pre>"},{"location":"remote-operations/#step-3-make-and-commit-changes","title":"Step 3: Make and Commit Changes","text":"<p>Implement your feature or fix:</p> <pre><code># Make changes to code files\ngit add .\n</code></pre> <pre><code>git commit -m \"Add new feature\"\n</code></pre>"},{"location":"remote-operations/#step-4-regularly-fetch-team-changes","title":"Step 4: Regularly Fetch Team Changes","text":"<p>Stay up to date with others' work:</p> <pre><code>git fetch origin\n</code></pre> <pre><code>git rebase origin/main\n</code></pre> <p>Or alternatively:</p> <pre><code>git merge origin/main\n</code></pre>"},{"location":"remote-operations/#step-5-push-your-branch","title":"Step 5: Push Your Branch","text":"<p>Share your work with the team:</p> <pre><code>git push -u origin feature-branch\n</code></pre>"},{"location":"remote-operations/#step-6-merge-or-create-pull-request","title":"Step 6: Merge or Create Pull Request","text":"<p>Either merge directly or create a pull request for review, depending on team practices:</p> <pre><code># For direct merge (if permitted):\ngit checkout main\n</code></pre> <pre><code>git merge feature-branch\n</code></pre> <pre><code>git push origin main\n</code></pre>"},{"location":"remote-operations/#fork-synchronization-workflow","title":"Fork Synchronization Workflow","text":"<p>Keeping your fork up to date with the original repository.</p> <pre><code>gitGraph\n    commit id: \"Original state\"\n    branch fork/main\n    checkout fork/main\n    commit id: \"Your fork\"\n    checkout main\n    commit id: \"Upstream updates\"\n    commit id: \"More upstream work\"\n    checkout fork/main\n    merge main id: \"Sync from upstream\"\n    commit id: \"Your new work\"\n</code></pre>"},{"location":"remote-operations/#step-1-add-upstream-remote","title":"Step 1: Add Upstream Remote","text":"<p>Connect to the original repository (if not done already):</p> <pre><code>git remote add upstream https://github.com/original-owner/repo.git\n</code></pre>"},{"location":"remote-operations/#step-2-fetch-upstream-changes","title":"Step 2: Fetch Upstream Changes","text":"<p>Download the latest updates from the original repository:</p> <pre><code>git fetch upstream\n</code></pre>"},{"location":"remote-operations/#step-3-switch-to-your-main-branch","title":"Step 3: Switch to Your Main Branch","text":"<p>Move to your local main branch:</p> <pre><code>git checkout main\n</code></pre>"},{"location":"remote-operations/#step-4-merge-upstream-changes","title":"Step 4: Merge Upstream Changes","text":"<p>Incorporate the updates into your local branch:</p> <pre><code>git merge upstream/main\n</code></pre>"},{"location":"remote-operations/#step-5-push-updates-to-your-fork","title":"Step 5: Push Updates to Your Fork","text":"<p>Update your remote fork with the synced changes:</p> <pre><code>git push origin main\n</code></pre>"},{"location":"remote-operations/#gitflow-workflow","title":"Gitflow Workflow","text":"<p>A more structured workflow for larger projects with scheduled releases.</p> <pre><code>gitGraph\n    commit id: \"Project start\"\n    branch develop\n    checkout develop\n    commit id: \"Development work\"\n    branch feature/login\n    checkout feature/login\n    commit id: \"Add login\"\n    commit id: \"Refine login\"\n    checkout develop\n    merge feature/login\n    branch release/1.0\n    checkout release/1.0\n    commit id: \"Release prep\"\n    checkout main\n    merge release/1.0 id: \"Release 1.0\"\n    checkout develop\n    merge release/1.0\n    branch hotfix/1.0.1\n    checkout hotfix/1.0.1\n    commit id: \"Critical fix\"\n    checkout main\n    merge hotfix/1.0.1 id: \"Release 1.0.1\"\n    checkout develop\n    merge hotfix/1.0.1\n</code></pre>"},{"location":"remote-operations/#step-1-initialize-gitflow","title":"Step 1: Initialize Gitflow","text":"<p>Set up the Gitflow branching structure:</p> <pre><code>git flow init\n</code></pre> <p>Or manually create develop branch:</p> <pre><code>git checkout -b develop main\n</code></pre>"},{"location":"remote-operations/#step-2-start-a-feature","title":"Step 2: Start a Feature","text":"<p>Create a feature branch from develop:</p> <pre><code>git flow feature start login\n</code></pre> <p>Or manually:</p> <pre><code>git checkout -b feature/login develop\n</code></pre>"},{"location":"remote-operations/#step-3-complete-a-feature","title":"Step 3: Complete a Feature","text":"<p>Finish the feature, merging back to develop:</p> <pre><code>git flow feature finish login\n</code></pre> <p>Or manually:</p> <pre><code>git checkout develop\n</code></pre> <pre><code>git merge --no-ff feature/login\n</code></pre> <pre><code>git branch -d feature/login\n</code></pre>"},{"location":"remote-operations/#step-4-create-a-release","title":"Step 4: Create a Release","text":"<p>Branch off for release preparation:</p> <pre><code>git flow release start 1.0\n</code></pre> <p>Or manually:</p> <pre><code>git checkout -b release/1.0 develop\n</code></pre>"},{"location":"remote-operations/#step-5-finish-a-release","title":"Step 5: Finish a Release","text":"<p>Merge to main and back to develop:</p> <pre><code>git flow release finish 1.0\n</code></pre> <p>Or manually:</p> <pre><code>git checkout main\n</code></pre> <pre><code>git merge --no-ff release/1.0\n</code></pre> <pre><code>git tag -a v1.0 -m \"Version 1.0\"\n</code></pre> <pre><code>git checkout develop\n</code></pre> <pre><code>git merge --no-ff release/1.0\n</code></pre> <pre><code>git branch -d release/1.0\n</code></pre>"},{"location":"remote-operations/#step-6-create-a-hotfix","title":"Step 6: Create a Hotfix","text":"<p>Fix critical issues in production:</p> <pre><code>git flow hotfix start bug-fix\n</code></pre> <p>Or manually:</p> <pre><code>git checkout -b hotfix/bug-fix main\n</code></pre>"},{"location":"remote-operations/#step-7-finish-a-hotfix","title":"Step 7: Finish a Hotfix","text":"<p>Apply the fix to both main and develop:</p> <pre><code>git flow hotfix finish bug-fix\n</code></pre> <p>Or manually:</p> <pre><code>git checkout main\n</code></pre> <pre><code>git merge --no-ff hotfix/bug-fix\n</code></pre> <pre><code>git tag -a v1.0.1 -m \"Version 1.0.1\"\n</code></pre> <pre><code>git checkout develop\n</code></pre> <pre><code>git merge --no-ff hotfix/bug-fix\n</code></pre> <pre><code>git branch -d hotfix/bug-fix\n</code></pre>"},{"location":"remote-operations/#troubleshooting-remote-operations","title":"Troubleshooting Remote Operations","text":""},{"location":"remote-operations/#common-push-errors","title":"Common Push Errors","text":"<p>Rejected non-fast forward push:</p> <pre><code>! [rejected]        main -&gt; main (non-fast-forward)\n</code></pre> <p>Solution:</p>"},{"location":"remote-operations/#step-1-pull-first-to-integrate-remote-changes","title":"Step 1: Pull first to integrate remote changes","text":"<pre><code>git pull origin main\n</code></pre>"},{"location":"remote-operations/#step-2-or-force-push-if-youre-sure-use-with-caution","title":"Step 2: Or force push if you're sure (use with caution)","text":"<pre><code>git push --force origin main\n</code></pre> <p>Failed to push some refs:</p> <pre><code>Updates were rejected because the remote contains work that you do not have locally\n</code></pre> <p>Solution:</p>"},{"location":"remote-operations/#option-1-fetch-and-merge-the-remote-changes","title":"Option 1: Fetch and merge the remote changes","text":"<pre><code>git fetch origin\n</code></pre> <pre><code>git merge origin/main\n</code></pre>"},{"location":"remote-operations/#option-2-pull-fetch-merge-in-one-step","title":"Option 2: Pull (fetch + merge in one step)","text":"<pre><code>git pull\n</code></pre>"},{"location":"remote-operations/#common-pull-errors","title":"Common Pull Errors","text":"<p>Local changes would be overwritten:</p> <pre><code>Your local changes would be overwritten by merge\n</code></pre> <p>Solution:</p>"},{"location":"remote-operations/#option-1-stash-your-changes","title":"Option 1: Stash your changes","text":"<pre><code>git stash\n</code></pre> <pre><code>git pull\n</code></pre> <pre><code>git stash pop\n</code></pre>"},{"location":"remote-operations/#option-2-commit-your-changes-first","title":"Option 2: Commit your changes first","text":"<pre><code>git commit -am \"WIP: Saving changes before pull\"\n</code></pre> <pre><code>git pull\n</code></pre> <p>Merge conflicts:</p> <pre><code>CONFLICT (content): Merge conflict in &lt;filename&gt;\n</code></pre> <p>Solution:</p>"},{"location":"remote-operations/#step-1-resolve-conflicts-in-the-files","title":"Step 1: Resolve conflicts in the files","text":"<p>Edit the files to resolve conflicts.</p>"},{"location":"remote-operations/#step-2-mark-conflicts-as-resolved","title":"Step 2: Mark conflicts as resolved","text":"<pre><code>git add &lt;resolved-files&gt;\n</code></pre> <pre><code>git commit\n</code></pre>"},{"location":"remote-operations/#alternative-abort-the-pull","title":"Alternative: Abort the pull","text":"<pre><code>git merge --abort\n</code></pre>"},{"location":"remote-operations/#authentication-issues","title":"Authentication Issues","text":"<p>Permission denied errors:</p> <pre><code>Permission to repository.git denied to user\n</code></pre> <p>Solutions:</p>"},{"location":"remote-operations/#step-1-check-remote-url","title":"Step 1: Check remote URL","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"remote-operations/#step-2-update-url-with-correct-credentials","title":"Step 2: Update URL with correct credentials","text":"<pre><code>git remote set-url origin https://username@github.com/username/repo.git\n</code></pre>"},{"location":"remote-operations/#alternative-switch-to-ssh-if-you-have-it-set-up","title":"Alternative: Switch to SSH if you have it set up","text":"<pre><code>git remote set-url origin git@github.com:username/repo.git\n</code></pre>"},{"location":"remote-operations/#command-summary","title":"Command Summary","text":"Operation Command Description Add Remote <code>git remote add &lt;name&gt; &lt;url&gt;</code> Connect to remote repo View Remotes <code>git remote -v</code> List all remotes with URLs Fetch <code>git fetch &lt;remote&gt;</code> Download without merging Pull <code>git pull &lt;remote&gt; &lt;branch&gt;</code> Download and merge Pull with Rebase <code>git pull --rebase</code> Download and rebase Push <code>git push &lt;remote&gt; &lt;branch&gt;</code> Upload local commits Set Upstream <code>git push -u &lt;remote&gt; &lt;branch&gt;</code> Push and track branch Delete Remote Branch <code>git push &lt;remote&gt; --delete &lt;branch&gt;</code> Remove remote branch List Remote Branches <code>git branch -r</code> Show remote branches"},{"location":"remote-operations/#related-topics","title":"Related Topics","text":"<ul> <li>Setting up Git and initializing repositories</li> <li>Creating, managing, and navigating branches</li> <li>Combining branches with merge and rebase operations</li> <li>Temporarily storing changes and cleaning working directory</li> <li>Marking release points and version management</li> </ul>"},{"location":"resources/","title":"Git Learning Resources","text":"<p>A curated collection of high-quality Git resources for continued learning and reference.</p>"},{"location":"resources/#official-documentation","title":"Official Documentation","text":"<ul> <li>Git Official Documentation - The comprehensive reference manual and tutorial from the Git team</li> <li>Git Reference Manual - Complete command reference</li> <li>Git Book - Pro Git book, written by Scott Chacon and Ben Straub</li> <li>Git FAQ - Frequently Asked Questions about Git</li> </ul>"},{"location":"resources/#interactive-learning","title":"Interactive Learning","text":"<ul> <li>Learn Git Branching - Visual and interactive way to learn Git branching</li> <li>Git-it - Desktop app with challenges for learning Git and GitHub</li> <li>Katacoda Git Scenarios - Interactive scenarios for learning Git</li> <li>GitHub Learning Lab - Hands-on lessons and projects to learn Git and GitHub</li> <li>Oh My Git! - An open-source game for learning Git</li> </ul>"},{"location":"resources/#books","title":"Books","text":"<ul> <li>Pro Git - Free, comprehensive book by Scott Chacon and Ben Straub</li> <li>Git Pocket Guide - A concise guide by Richard E. Silverman</li> <li>Git Internals - A deep dive into Git's architecture by Scott Chacon</li> <li>Git from the Bottom Up - Understanding Git from first principles</li> <li>Learn Version Control with Git - Free ebook from the creators of Tower</li> </ul>"},{"location":"resources/#tutorials-and-guides","title":"Tutorials and Guides","text":"<ul> <li>Atlassian Git Tutorials - Comprehensive series of Git tutorials</li> <li>GitHub Guides - Guides for using GitHub effectively</li> <li>GitLab Tutorials - GitLab-specific Git guides</li> <li>Git How To - A guided tour through the fundamentals of Git</li> <li>Git Immersion - A guided tour through Git</li> <li>GitHub Skills - Interactive courses designed by GitHub</li> <li>W3Schools Git Tutorial - Simple and clear tutorials for beginners</li> </ul>"},{"location":"resources/#videos-and-courses","title":"Videos and Courses","text":"<ul> <li>Git &amp; GitHub Crash Course - Freecodecamp's Git crash course</li> <li>Git Complete: The definitive guide - Udemy course by Jason Taylor</li> <li>Version Control with Git - Coursera course by Atlassian</li> <li>Git Essential Training - LinkedIn Learning course</li> <li>Introduction to Git and GitHub - YouTube series by The Coding Train</li> </ul>"},{"location":"resources/#other-cheat-sheets-and-quick-references","title":"Other Cheat Sheets and Quick References","text":"<ul> <li>GitHub Git Cheat Sheet - Official GitHub Git cheat sheet</li> <li>Atlassian Git Cheat Sheet - Git commands and tips</li> <li>Git Tower Cheat Sheet - Visual Git cheat sheet</li> <li>Git Pretty Flowchart - A flowchart to help when Git goes wrong</li> <li>Interactive Git Cheatsheet - Visual, interactive Git cheat sheet</li> </ul>"},{"location":"resources/#community-resources","title":"Community Resources","text":"<ul> <li>Stack Overflow Git Tag - Questions and answers about Git</li> <li>Reddit r/git - Reddit community for Git discussions</li> <li>Git Community Book - Community-driven Git documentation</li> <li>Git Wiki - Wiki for Git development</li> <li>Git User's Manual - The user manual for Git</li> </ul>"},{"location":"resources/#tools-and-extensions","title":"Tools and Extensions","text":"<ul> <li>Git GUIs - List of Git Graphical User Interfaces</li> <li>GitKraken - Cross-platform Git client with visual commit history</li> <li>Sourcetree - Free Git client for Windows and Mac</li> <li>GitHub Desktop - GitHub's desktop client</li> <li>Git Extensions - Shell extension and GUI for Git</li> <li>Git Lens for VS Code - Git supercharged in VS Code</li> <li>Diff So Fancy - Makes Git diffs human readable</li> <li>Lazygit - Simple terminal UI for Git commands</li> </ul>"},{"location":"resources/#topic-specific-resources","title":"Topic-Specific Resources","text":""},{"location":"resources/#git-workflows","title":"Git Workflows","text":"<ul> <li>Comparing Git Workflows - Different Git workflows explained</li> <li>GitHub Flow - Lightweight workflow for GitHub projects</li> <li>GitFlow - A successful Git branching model</li> <li>OneFlow - Alternative to GitFlow</li> <li>Trunk Based Development - A source control branching model</li> </ul>"},{"location":"resources/#advanced-git-features","title":"Advanced Git Features","text":"<ul> <li>Git Submodules - Working with submodules</li> <li>Git LFS - Git Large File Storage</li> <li>Git Hooks - Customizing Git with hooks</li> <li>Git Attributes - Defining attributes per path</li> <li>Git Internals - Understanding Git's internals</li> </ul>"},{"location":"resources/#githubgitlabbitbucket-specific","title":"GitHub/GitLab/Bitbucket Specific","text":"<ul> <li>GitHub Docs - Official GitHub documentation</li> <li>GitHub Actions - Automating workflows with GitHub Actions</li> <li>GitLab Documentation - Official GitLab documentation</li> <li>GitLab CI/CD - Continuous Integration with GitLab</li> <li>Bitbucket Documentation - Official Bitbucket documentation</li> </ul>"},{"location":"resources/#keeping-up-to-date","title":"Keeping Up-to-Date","text":"<ul> <li>Git Release Notes - Official release notes</li> <li>GitHub Blog - Updates and news from GitHub</li> <li>GitLab Blog - GitLab news and updates</li> <li>Git Rev News - Newsletter for the Git community</li> </ul>"},{"location":"setup-and-init/","title":"Setting up Git and Initializing Repositories","text":"<p>A guide to getting started with Git, from installation to creating your first repository.</p>"},{"location":"setup-and-init/#installing-git","title":"Installing Git","text":""},{"location":"setup-and-init/#windows","title":"Windows","text":""},{"location":"setup-and-init/#official-installer","title":"Official Installer","text":"<p>Download from https://git-scm.com/download/win and run the installer with default options.</p>"},{"location":"setup-and-init/#using-winget","title":"Using Winget","text":"<pre><code>winget install --id Git.Git\n</code></pre>"},{"location":"setup-and-init/#using-chocolatey","title":"Using Chocolatey","text":"<pre><code>choco install git\n</code></pre>"},{"location":"setup-and-init/#macos","title":"macOS","text":""},{"location":"setup-and-init/#using-homebrew","title":"Using Homebrew","text":"<pre><code>brew install git\n</code></pre>"},{"location":"setup-and-init/#using-the-official-installer","title":"Using the official installer","text":"<p>Download from https://git-scm.com/download/mac and follow installation instructions.</p>"},{"location":"setup-and-init/#linux","title":"Linux","text":""},{"location":"setup-and-init/#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install git\n</code></pre>"},{"location":"setup-and-init/#fedora","title":"Fedora","text":"<pre><code>sudo dnf install git\n</code></pre>"},{"location":"setup-and-init/#rhelcentos","title":"RHEL/CentOS","text":"<pre><code>sudo yum install git\n</code></pre>"},{"location":"setup-and-init/#arch-linux","title":"Arch Linux","text":"<pre><code>sudo pacman -S git\n</code></pre>"},{"location":"setup-and-init/#verify-installation","title":"Verify installation","text":"<pre><code>git --version\n</code></pre>"},{"location":"setup-and-init/#initial-configuration","title":"Initial Configuration","text":""},{"location":"setup-and-init/#setting-your-identity","title":"Setting Your Identity","text":"<p>Git requires knowing who you are for commit attribution:</p>"},{"location":"setup-and-init/#set-your-name","title":"Set your name","text":"<pre><code>git config --global user.name \"Your Name\"\n</code></pre>"},{"location":"setup-and-init/#set-your-email","title":"Set your email","text":"<pre><code>git config --global user.email \"your.email@example.com\"\n</code></pre> <p>\ud83d\udca1 Tip: Use the same email address you use for your remote Git hosting service (GitHub, GitLab, etc.).</p>"},{"location":"setup-and-init/#configuring-your-editor","title":"Configuring Your Editor","text":"<p>Set your preferred text editor for commit messages:</p>"},{"location":"setup-and-init/#for-vs-code","title":"For VS Code","text":"<pre><code>git config --global core.editor \"code --wait\"\n</code></pre>"},{"location":"setup-and-init/#for-vim","title":"For Vim","text":"<pre><code>git config --global core.editor \"vim\"\n</code></pre>"},{"location":"setup-and-init/#for-notepad-windows","title":"For Notepad++ (Windows)","text":"<pre><code>git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n</code></pre>"},{"location":"setup-and-init/#for-sublime-text","title":"For Sublime Text","text":"<pre><code>git config --global core.editor \"'subl' -w\"\n</code></pre>"},{"location":"setup-and-init/#checking-your-settings","title":"Checking Your Settings","text":"<p>Review all your settings:</p>"},{"location":"setup-and-init/#list-all-settings","title":"List all settings","text":"<pre><code>git config --list\n</code></pre>"},{"location":"setup-and-init/#check-a-specific-setting","title":"Check a specific setting","text":"<pre><code>git config user.name\n</code></pre> <pre><code>git config user.email\n</code></pre>"},{"location":"setup-and-init/#configuration-levels","title":"Configuration Levels","text":"<p>Git configurations can be applied at three levels:</p>"},{"location":"setup-and-init/#system-level","title":"System level","text":"<p>Applies to all users:</p> <pre><code>git config --system ...\n</code></pre>"},{"location":"setup-and-init/#global-level","title":"Global level","text":"<p>Applies to all repositories of current user:</p> <pre><code>git config --global ...\n</code></pre>"},{"location":"setup-and-init/#local-level","title":"Local level","text":"<p>Applies only to current repository:</p> <pre><code>git config --local ...\n</code></pre> <p>\ud83d\udccc Note: Local settings override global settings, which override system settings.</p>"},{"location":"setup-and-init/#creating-repositories","title":"Creating Repositories","text":""},{"location":"setup-and-init/#initializing-a-new-repository","title":"Initializing a New Repository","text":"<p>Turn an existing directory into a Git repository:</p>"},{"location":"setup-and-init/#navigate-to-your-project-directory","title":"Navigate to your project directory","text":"<pre><code>cd path/to/your/project\n</code></pre>"},{"location":"setup-and-init/#initialize-the-repository","title":"Initialize the repository","text":"<pre><code>git init\n</code></pre> <p>After initializing, you'll see a <code>.git</code> directory which contains all the Git metadata.</p>"},{"location":"setup-and-init/#cloning-an-existing-repository","title":"Cloning an Existing Repository","text":"<p>Copy a repository from a remote server:</p>"},{"location":"setup-and-init/#clone-via-https","title":"Clone via HTTPS","text":"<pre><code>git clone https://github.com/username/repository.git\n</code></pre>"},{"location":"setup-and-init/#clone-via-ssh","title":"Clone via SSH","text":"<p>Requires setup of SSH keys:</p> <pre><code>git clone git@github.com:username/repository.git\n</code></pre>"},{"location":"setup-and-init/#clone-to-a-specific-directory","title":"Clone to a specific directory","text":"<pre><code>git clone https://github.com/username/repository.git my-project\n</code></pre>"},{"location":"setup-and-init/#clone-a-specific-branch","title":"Clone a specific branch","text":"<pre><code>git clone -b branch-name https://github.com/username/repository.git\n</code></pre>"},{"location":"setup-and-init/#clone-with-limited-history","title":"Clone with limited history","text":"<p>Shallow clone:</p> <pre><code>git clone --depth=1 https://github.com/username/repository.git\n</code></pre>"},{"location":"setup-and-init/#understanding-the-git-directory","title":"Understanding the .git Directory","text":"<p>The <code>.git</code> directory contains all the data and configuration for your repository:</p> <pre><code>.git/\n\u251c\u2500\u2500 HEAD          # Points to the current branch\n\u251c\u2500\u2500 config        # Repository-specific configuration\n\u251c\u2500\u2500 description   # Description of the repository (only used by GitWeb)\n\u251c\u2500\u2500 hooks/        # Client or server-side hook scripts\n\u251c\u2500\u2500 index         # Staging area information\n\u251c\u2500\u2500 objects/      # Git's object database (commits, trees, blobs)\n\u2514\u2500\u2500 refs/         # Pointers to commit objects (branches, tags)\n</code></pre> <p>\u26a0\ufe0f Warning: Never manually modify files in the <code>.git</code> directory unless you know what you're doing.</p>"},{"location":"setup-and-init/#first-time-repository-setup","title":"First-time Repository Setup","text":""},{"location":"setup-and-init/#standard-project-files","title":"Standard Project Files","text":"<p>When creating a new repository, consider adding these standard files:</p>"},{"location":"setup-and-init/#create-a-readme-file","title":"Create a README file","text":"<pre><code>echo \"# Project Name\" &gt; README.md\n</code></pre>"},{"location":"setup-and-init/#create-a-license-file","title":"Create a license file","text":"<p>Example: MIT</p> <pre><code>curl -o LICENSE https://opensource.org/licenses/MIT\n</code></pre>"},{"location":"setup-and-init/#create-a-gitignore-file","title":"Create a .gitignore file","text":"<p>Discussed below:</p> <pre><code>touch .gitignore\n</code></pre>"},{"location":"setup-and-init/#creating-a-gitignore-file","title":"Creating a .gitignore File","text":"<p>The <code>.gitignore</code> file specifies intentionally untracked files that Git should ignore:</p> <pre><code>touch .gitignore\n</code></pre> <p>Sample <code>.gitignore</code> content for various project types:</p>"},{"location":"setup-and-init/#nodejs","title":"Node.js","text":"<pre><code>node_modules/\nnpm-debug.log\n.env\n</code></pre>"},{"location":"setup-and-init/#python","title":"Python","text":"<pre><code>__pycache__/\n*.py[cod]\n*$py.class\nvenv/\n.env\n</code></pre>"},{"location":"setup-and-init/#java","title":"Java","text":"<pre><code>*.class\n*.jar\ntarget/\n.idea/\n</code></pre> <p>\ud83d\udca1 Tip: Use gitignore.io to generate <code>.gitignore</code> files for your specific tech stack.</p>"},{"location":"setup-and-init/#command-summary","title":"Command Summary","text":"Operation Command Description Check version <code>git --version</code> Verify Git installation Set username <code>git config --global user.name \"Your Name\"</code> Set your identity name Set email <code>git config --global user.email \"your.email@example.com\"</code> Set your identity email Set editor (VS Code) <code>git config --global core.editor \"code --wait\"</code> Configure default editor Set editor (Vim) <code>git config --global core.editor \"vim\"</code> Configure default editor Set editor (Notepad++) <code>git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"</code> Configure default editor Set editor (Sublime) <code>git config --global core.editor \"'subl' -w\"</code> Configure default editor List all settings <code>git config --list</code> Display all configurations Check specific setting <code>git config user.name</code> View a specific config value System config <code>git config --system ...</code> Set config for all users Global config <code>git config --global ...</code> Set config for current user Local config <code>git config --local ...</code> Set config for current repository Initialize repository <code>git init</code> Create a new Git repository Clone via HTTPS <code>git clone https://github.com/username/repository.git</code> Copy a repository from remote server Clone via SSH <code>git clone git@github.com:username/repository.git</code> Clone using SSH protocol Clone to directory <code>git clone https://github.com/username/repository.git my-project</code> Clone to specific folder Clone specific branch <code>git clone -b branch-name https://github.com/username/repository.git</code> Clone only one branch Shallow clone <code>git clone --depth=1 https://github.com/username/repository.git</code> Clone with limited history Create gitignore <code>touch .gitignore</code> Create file to specify ignored files"},{"location":"setup-and-init/#related-topics","title":"Related Topics","text":"<ul> <li>Basic Git Usage</li> <li>Branch Management</li> <li>Remote Operations</li> <li>Merging and Rebasing</li> <li>Stash and Clean</li> </ul>"},{"location":"stash-clean/","title":"Temporarily Stashing and Cleaning Working Directory","text":"<p>Learn how to safely set aside work in progress and keep your working directory clean.</p>"},{"location":"stash-clean/#understanding-git-stash","title":"Understanding Git Stash","text":""},{"location":"stash-clean/#when-to-use-stash","title":"When to Use Stash","text":"<p>Git stash is useful when you need to:</p> <ul> <li>Quickly switch context without committing incomplete work</li> <li>Move changes between branches</li> <li>Temporarily store work to pull the latest changes</li> <li>Experiment with alterations before deciding to keep them</li> </ul>"},{"location":"stash-clean/#how-stash-works","title":"How Stash Works","text":"<p>Stashes are stored as commit objects in a special ref called <code>refs/stash</code>:</p> <pre><code>flowchart LR\n    A[\"Working Director &amp; Index\"] --&gt;|stash save| B[\"Stash Stack\"]\n    B --&gt;|stash apply/pop| A\n</code></pre> <p>Stash operates as a stack, with the most recent stash at position <code>stash@{0}</code>.</p>"},{"location":"stash-clean/#basic-stash-operations","title":"Basic Stash Operations","text":""},{"location":"stash-clean/#stashing-changes","title":"Stashing Changes","text":"<p>Save your working directory and index state:</p>"},{"location":"stash-clean/#basic-stash-save-all-uncommitted-changes","title":"Basic stash - save all uncommitted changes","text":"<pre><code>git stash\n</code></pre>"},{"location":"stash-clean/#same-as-git-stash-push-more-explicit-command","title":"Same as git stash push (more explicit command)","text":"<pre><code>git stash push\n</code></pre>"},{"location":"stash-clean/#viewing-stashes","title":"Viewing Stashes","text":"<p>List and inspect stashed changes:</p>"},{"location":"stash-clean/#list-all-stashes","title":"List all stashes","text":"<pre><code>git stash list\n</code></pre>"},{"location":"stash-clean/#show-the-contents-of-the-most-recent-stash","title":"Show the contents of the most recent stash","text":"<pre><code>git stash show\n</code></pre>"},{"location":"stash-clean/#show-the-patchdiff-of-a-stash","title":"Show the patch/diff of a stash","text":"<pre><code>git stash show -p\n</code></pre>"},{"location":"stash-clean/#show-a-specific-stash","title":"Show a specific stash","text":"<pre><code>git stash show stash@{1}\n</code></pre>"},{"location":"stash-clean/#show-a-specific-stash-with-patch","title":"Show a specific stash with patch","text":"<pre><code>git stash show -p stash@{1}\n</code></pre>"},{"location":"stash-clean/#applying-stashes","title":"Applying Stashes","text":"<p>Apply stashed changes back to your working directory:</p>"},{"location":"stash-clean/#apply-most-recent-stash-and-keep-it-in-the-stash-list","title":"Apply most recent stash and keep it in the stash list","text":"<pre><code>git stash apply\n</code></pre>"},{"location":"stash-clean/#apply-most-recent-stash-and-remove-it-from-the-stash-list","title":"Apply most recent stash and remove it from the stash list","text":"<pre><code>git stash pop\n</code></pre>"},{"location":"stash-clean/#apply-a-specific-stash","title":"Apply a specific stash","text":"<pre><code>git stash apply stash@{2}\n</code></pre>"},{"location":"stash-clean/#pop-a-specific-stash","title":"Pop a specific stash","text":"<pre><code>git stash pop stash@{2}\n</code></pre> <p>\ud83d\udca1 Tip: Use <code>apply</code> when you want to apply the same stash to multiple branches. Use <code>pop</code> when you're done with the stash.</p>"},{"location":"stash-clean/#dropping-stashes","title":"Dropping Stashes","text":"<p>Remove stashes when you no longer need them:</p>"},{"location":"stash-clean/#drop-the-most-recent-stash","title":"Drop the most recent stash","text":"<pre><code>git stash drop\n</code></pre>"},{"location":"stash-clean/#drop-a-specific-stash","title":"Drop a specific stash","text":"<pre><code>git stash drop stash@{1}\n</code></pre>"},{"location":"stash-clean/#remove-all-stashes","title":"Remove all stashes","text":"<pre><code>git stash clear\n</code></pre> <p>\u26a0\ufe0f Warning: <code>git stash clear</code> removes all stashes without confirmation. Use with caution.</p>"},{"location":"stash-clean/#advanced-stash-techniques","title":"Advanced Stash Techniques","text":""},{"location":"stash-clean/#stashing-specific-files","title":"Stashing Specific Files","text":"<p>Save changes to selected files only:</p>"},{"location":"stash-clean/#stash-only-specific-files","title":"Stash only specific files","text":"<pre><code>git stash push path/to/file1.txt path/to/file2.js\n</code></pre>"},{"location":"stash-clean/#stash-only-specific-files-with-a-message","title":"Stash only specific files with a message","text":"<pre><code>git stash push -m \"Updated CSS styles\" css/styles.css\n</code></pre>"},{"location":"stash-clean/#stashing-untracked-files","title":"Stashing Untracked Files","text":"<p>Include untracked files in your stash:</p>"},{"location":"stash-clean/#stash-untracked-files-as-well","title":"Stash untracked files as well","text":"<pre><code>git stash -u\n</code></pre> <p>Or:</p> <pre><code>git stash --include-untracked\n</code></pre>"},{"location":"stash-clean/#stash-everything-including-untracked-and-ignored-files","title":"Stash everything, including untracked and ignored files","text":"<pre><code>git stash -a\n</code></pre> <p>Or:</p> <pre><code>git stash --all\n</code></pre>"},{"location":"stash-clean/#creating-branches-from-stashes","title":"Creating Branches from Stashes","text":"<p>Start a new branch with stashed changes applied:</p>"},{"location":"stash-clean/#create-a-branch-from-the-most-recent-stash","title":"Create a branch from the most recent stash","text":"<pre><code>git stash branch new-branch-name\n</code></pre>"},{"location":"stash-clean/#create-a-branch-from-a-specific-stash","title":"Create a branch from a specific stash","text":"<pre><code>git stash branch fix-header-issue stash@{1}\n</code></pre> <p>\ud83d\udca1 Tip: This is useful when applying a stash causes conflicts in your current branch.</p>"},{"location":"stash-clean/#interactive-stashing","title":"Interactive Stashing","text":"<p>Select specific hunks or lines to stash:</p>"},{"location":"stash-clean/#interactively-choose-which-changes-to-stash","title":"Interactively choose which changes to stash","text":"<pre><code>git stash -p\n</code></pre> <p>Or:</p> <pre><code>git stash --patch\n</code></pre> <p>This opens an interactive prompt where you can choose which changes to stash:</p> <ul> <li><code>y</code> - stash this hunk</li> <li><code>n</code> - don't stash this hunk</li> <li><code>q</code> - quit and don't stash any remaining hunks</li> <li><code>a</code> - stash this and all remaining hunks</li> <li><code>d</code> - don't stash this or any remaining hunks</li> <li><code>s</code> - split this hunk into smaller hunks</li> <li><code>e</code> - manually edit this hunk</li> </ul>"},{"location":"stash-clean/#stash-with-a-message","title":"Stash with a Message","text":"<p>Add descriptive messages to your stashes for better organization:</p>"},{"location":"stash-clean/#stash-with-a-descriptive-message","title":"Stash with a descriptive message","text":"<pre><code>git stash push -m \"WIP: Refactoring authentication module\"\n</code></pre>"},{"location":"stash-clean/#cleaning-the-working-directory","title":"Cleaning the Working Directory","text":""},{"location":"stash-clean/#checking-what-will-be-removed","title":"Checking What Will Be Removed","text":"<p>Preview what would be deleted before actual cleaning:</p>"},{"location":"stash-clean/#dry-run-to-see-what-would-be-removed","title":"Dry run to see what would be removed","text":"<pre><code>git clean -n\n</code></pre>"},{"location":"stash-clean/#dry-run-including-directories","title":"Dry run including directories","text":"<pre><code>git clean -dn\n</code></pre>"},{"location":"stash-clean/#removing-untracked-files","title":"Removing Untracked Files","text":"<p>Delete untracked files from your working directory:</p>"},{"location":"stash-clean/#remove-untracked-files","title":"Remove untracked files","text":"<pre><code>git clean -f\n</code></pre>"},{"location":"stash-clean/#removing-untracked-directories","title":"Removing Untracked Directories","text":"<p>Remove untracked directories and their contents:</p>"},{"location":"stash-clean/#remove-untracked-directories","title":"Remove untracked directories","text":"<pre><code>git clean -fd\n</code></pre>"},{"location":"stash-clean/#removing-ignored-files","title":"Removing Ignored Files","text":"<p>Remove files that are ignored by <code>.gitignore</code>:</p>"},{"location":"stash-clean/#remove-ignored-files","title":"Remove ignored files","text":"<pre><code>git clean -fX\n</code></pre>"},{"location":"stash-clean/#remove-both-ignored-and-untracked-files","title":"Remove both ignored and untracked files","text":"<pre><code>git clean -fx\n</code></pre>"},{"location":"stash-clean/#force-cleaning","title":"Force Cleaning","text":"<p>For more aggressive cleaning:</p>"},{"location":"stash-clean/#interactive-mode-confirms-before-each-file-deletion","title":"Interactive mode: confirms before each file deletion","text":"<pre><code>git clean -i\n</code></pre>"},{"location":"stash-clean/#forcefully-remove-untracked-files-directories-and-ignored-files","title":"Forcefully remove untracked files, directories, and ignored files","text":"<pre><code>git clean -fdx\n</code></pre> <p>\u26a0\ufe0f Warning: <code>git clean</code> permanently deletes files. Files cannot be recovered unless they're tracked somewhere else.</p>"},{"location":"stash-clean/#best-practices","title":"Best Practices","text":""},{"location":"stash-clean/#stashing-best-practices","title":"Stashing Best Practices","text":""},{"location":"stash-clean/#use-descriptive-messages","title":"Use Descriptive Messages","text":"<p>Always include a clear message that describes what you're stashing:</p> <pre><code>git stash push -m \"Description of what's being stashed\"\n</code></pre> <p>This makes it much easier to identify stashes later:</p> <pre><code>$ git stash list\nstash@{0}: On feature-branch: Description of what's being stashed\nstash@{1}: On main: Fix for navbar styling\n</code></pre>"},{"location":"stash-clean/#avoid-long-term-storage","title":"Avoid Long-Term Storage","text":"<p>Stashes are meant for temporary storage and can be easily lost with certain Git operations. Consider creating a branch instead for changes you want to keep for longer periods:</p> <pre><code>git stash branch temp-work-branch\n</code></pre>"},{"location":"stash-clean/#preview-stash-contents-before-applying","title":"Preview Stash Contents Before Applying","text":"<p>Always check what's in a stash before applying it to avoid unexpected changes:</p> <pre><code>git stash show -p\n</code></pre>"},{"location":"stash-clean/#regular-stash-maintenance","title":"Regular Stash Maintenance","text":"<p>Keep your stash list clean by regularly reviewing and dropping unused stashes:</p> <pre><code>flowchart TD\n    A[\"List stashes\"] --&gt;|\"git stash list\"| B[\"Identify unused stashes\"]\n    B --&gt; C{\"Still needed?\"}\n    C --&gt;|\"Yes\"| D[\"Keep\"]\n    C --&gt;|\"No\"| E[\"Drop stash\"]\n    E --&gt;|\"git stash drop stash@{n}\"| A\n</code></pre>"},{"location":"stash-clean/#cleaning-best-practices","title":"Cleaning Best Practices","text":""},{"location":"stash-clean/#always-run-a-dry-run-first","title":"Always Run a Dry Run First","text":"<p>Before deleting any files, see what would be removed:</p> <pre><code>flowchart LR\n    A[Preview with git clean -n] --&gt; B{Happy with results?}\n    B --&gt;|Yes| C[Run actual clean command]\n    B --&gt;|No| D[Adjust parameters]\n    D --&gt; A\n</code></pre> <pre><code>git clean -n\n</code></pre> <p>Example output:</p> <pre><code>Would remove temp.txt\nWould remove logs/debug.log\nWould remove build/output.tmp\n</code></pre>"},{"location":"stash-clean/#target-specific-directories","title":"Target Specific Directories","text":"<p>Be specific about what you're cleaning rather than cleaning the entire repository:</p> <pre><code>git clean -f specific/path/to/clean\n</code></pre>"},{"location":"stash-clean/#use-gitignore-instead-of-repeated-cleaning","title":"Use Gitignore Instead of Repeated Cleaning","text":"<p>Instead of repeatedly cleaning generated files, add them to your <code>.gitignore</code>:</p> <pre><code>+ # Build outputs\n+ build/\n+ dist/\n+ *.tmp\n+ \n+ # Log files\n+ logs/\n+ *.log\n</code></pre>"},{"location":"stash-clean/#use-interactive-mode-when-unsure","title":"Use Interactive Mode When Unsure","text":"<p>When in doubt, use interactive mode to confirm deletions:</p> <pre><code>git clean -i\n</code></pre> <p>Example interaction:</p> <pre><code>Would remove the following items:\n  temp.txt  logs/debug.log  build/output.tmp\n*** Commands ***\n    1: clean   2: filter by pattern   3: select by numbers\n    4: ask each   5: quit   6: help\nWhat now&gt; 4\nRemove temp.txt [y/N]? y\nRemove logs/debug.log [y/N]? n\nRemove build/output.tmp [y/N]? y\n</code></pre>"},{"location":"stash-clean/#workflow-integration","title":"Workflow Integration","text":"<p>Using stash effectively in your daily workflow:</p> <pre><code>sequenceDiagram\n    participant W as Working Directory\n    participant S as Stash Stack\n    participant B as Feature Branch\n    participant H as Hotfix Branch\n    W-&gt;&gt;S: git stash push -m \"WIP feature\"\n    W-&gt;&gt;H: git checkout hotfix-branch\n    Note over W,H: Work on hotfix\n    W-&gt;&gt;H: git commit -m \"Fix critical bug\"\n    W-&gt;&gt;B: git checkout feature-branch\n    S-&gt;&gt;W: git stash pop\n    Note over W: Continue feature work\n</code></pre>"},{"location":"stash-clean/#context-switching-workflow","title":"Context Switching Workflow","text":"<p>When you need to switch tasks but aren't ready to commit:</p>"},{"location":"stash-clean/#1-save-your-current-work","title":"1. Save your current work","text":"<pre><code>git stash push -m \"WIP: Feature X implementation\"\n</code></pre>"},{"location":"stash-clean/#2-switch-to-another-branch-for-an-urgent-fix","title":"2. Switch to another branch for an urgent fix","text":"<pre><code>git checkout hotfix-branch\n</code></pre>"},{"location":"stash-clean/#3-complete-and-commit-the-urgent-work","title":"3. Complete and commit the urgent work","text":"<pre><code>git commit -m \"Fix critical bug\"\n</code></pre>"},{"location":"stash-clean/#4-return-to-your-original-task","title":"4. Return to your original task","text":"<pre><code>git checkout feature-branch\n</code></pre>"},{"location":"stash-clean/#5-restore-your-work-in-progress","title":"5. Restore your work in progress","text":"<pre><code>git stash pop\n</code></pre>"},{"location":"stash-clean/#feature-branch-experimentation","title":"Feature Branch Experimentation","text":"<p>Test a risky change without committing:</p> <pre><code># Save current state\ngit stash push -m \"Stable state before experiment\"\n\n# Try experimental changes\n# ...make changes...\n\n# If experiment fails, restore previous state\ngit stash pop\n\n# If experiment succeeds, commit the changes\ngit add .\ngit commit -m \"Implement successful experiment\"\ngit stash drop\n</code></pre>"},{"location":"stash-clean/#troubleshooting","title":"Troubleshooting","text":""},{"location":"stash-clean/#recovering-lost-stashes","title":"Recovering Lost Stashes","text":"<p>If you accidentally drop a stash, you might be able to recover it:</p>"},{"location":"stash-clean/#find-dangling-commits-that-might-be-your-stash","title":"Find dangling commits that might be your stash","text":"<pre><code>git fsck --no-reflog | grep commit\n</code></pre>"},{"location":"stash-clean/#look-at-potential-lost-stashes","title":"Look at potential lost stashes","text":"<pre><code>git show &lt;commit-hash&gt;\n</code></pre>"},{"location":"stash-clean/#if-you-find-your-stash-apply-it","title":"If you find your stash, apply it","text":"<pre><code>git stash apply &lt;commit-hash&gt;\n</code></pre>"},{"location":"stash-clean/#resolving-stash-conflicts","title":"Resolving Stash Conflicts","text":"<p>When applying a stash causes conflicts:</p>"},{"location":"stash-clean/#1-resolve-conflicts-manually-in-your-editor","title":"1. Resolve conflicts manually in your editor","text":""},{"location":"stash-clean/#2-stage-resolved-files","title":"2. Stage resolved files","text":"<pre><code>git add &lt;resolved-file&gt;\n</code></pre>"},{"location":"stash-clean/#3a-if-you-used-git-stash-pop-and-resolved-conflicts","title":"3a. If you used 'git stash pop' and resolved conflicts","text":"<pre><code>git reset\n</code></pre>"},{"location":"stash-clean/#3b-if-you-used-git-stash-apply-drop-the-stash-when-done","title":"3b. If you used 'git stash apply', drop the stash when done","text":"<pre><code>git stash drop\n</code></pre> <p>\ud83d\udca1 Tip: Using <code>git stash branch new-branch stash@{0}</code> can help avoid conflicts by creating a new branch from the commit the stash was created from.</p>"},{"location":"stash-clean/#command-summary","title":"Command Summary","text":"Operation Command Description Stash changes <code>git stash</code> Save working changes temporarily List stashes <code>git stash list</code> Show all stashes Show stash <code>git stash show -p</code> Display stash changes in detail Apply stash <code>git stash apply</code> Apply stash but keep in list Pop stash <code>git stash pop</code> Apply and remove stash Drop stash <code>git stash drop</code> Delete a stash from list Clear stashes <code>git stash clear</code> Remove all stashes Stash specific files <code>git stash push &lt;files&gt;</code> Stash only listed files Stash with message <code>git stash push -m \"msg\"</code> Create annotated stash Preview clean <code>git clean -n</code> Show what would be removed Clean files <code>git clean -f</code> Remove untracked files Clean directories <code>git clean -fd</code> Remove untracked directories"},{"location":"stash-clean/#related-topics","title":"Related Topics","text":"<ul> <li>Essential everyday Git commands and workflows</li> <li>Working with remote repositories (push, pull, fetch)</li> <li>Marking release points and version management</li> <li>Solving common Git problems</li> </ul>"},{"location":"tags-releases/","title":"Marking Release Points and Version Management","text":"<p>Master the art of tagging commits and managing project versions with Git.</p>"},{"location":"tags-releases/#understanding-tags","title":"Understanding Tags","text":""},{"location":"tags-releases/#what-are-git-tags","title":"What Are Git Tags?","text":"<p>Git tags are references that point to specific points in Git history. They're typically used to mark release points (v1.0, v2.0, etc.) providing a way to identify important milestones in your project timeline.</p> <pre><code>gitGraph\n    commit\n    commit\n    commit\n    commit\n    commit\n    commit id: \"v1.0\" tag: \"v1.0\"\n    commit\n    commit id: \"v1.1\" tag: \"v1.1\" \n    commit\n    commit id: \"v2.0\" tag: \"v2.0\"\n    commit\n</code></pre> <p>Unlike branches, tags don't change position as new commits are added; they remain permanently attached to the same commit unless manually moved.</p>"},{"location":"tags-releases/#types-of-tags","title":"Types of Tags","text":"<p>Git supports two types of tags:</p> <ol> <li>Lightweight Tags: Simple pointers to commits (like bookmarks)</li> <li>Annotated Tags: Full objects stored in Git database with metadata, including tagger name, email, date, and a tagging message</li> </ol>"},{"location":"tags-releases/#tags-vs-branches","title":"Tags vs. Branches","text":"<p>Understanding when to use tags versus branches:</p> Tags Branches Mark specific points in history Track ongoing development Don't move automatically Move with new commits Typically used for releases Used for features, fixes, etc. Are meant to be permanent Can be temporary and merged Are often used for versioning Can be deleted or modified"},{"location":"tags-releases/#creating-tags","title":"Creating Tags","text":""},{"location":"tags-releases/#lightweight-tags","title":"Lightweight Tags","text":"<p>Create simple reference markers:</p>"},{"location":"tags-releases/#create-a-lightweight-tag","title":"Create a lightweight tag","text":"<pre><code>git tag v1.0.0-lw\n</code></pre>"},{"location":"tags-releases/#create-a-lightweight-tag-at-a-specific-commit","title":"Create a lightweight tag at a specific commit","text":"<pre><code>git tag v0.9.0-lw a1b2c3d\n</code></pre>"},{"location":"tags-releases/#annotated-tags","title":"Annotated Tags","text":"<p>Create full tag objects with additional metadata:</p>"},{"location":"tags-releases/#create-an-annotated-tag","title":"Create an annotated tag","text":"<pre><code>git tag -a v1.0.0 -m \"Release version 1.0.0\"\n</code></pre>"},{"location":"tags-releases/#create-an-annotated-tag-and-open-editor-for-message","title":"Create an annotated tag and open editor for message","text":"<pre><code>git tag -a v1.0.0\n</code></pre>"},{"location":"tags-releases/#tagging-previous-commits","title":"Tagging Previous Commits","text":"<p>Tags can be applied to any commit in history:</p>"},{"location":"tags-releases/#tag-a-specific-commit-using-its-hash","title":"Tag a specific commit using its hash","text":"<pre><code>git tag -a v0.8.0 -m \"Beta release\" 9fceb02\n</code></pre>"},{"location":"tags-releases/#tag-a-relative-commit","title":"Tag a relative commit","text":"<pre><code>git tag -a v0.7.0 HEAD~5\n</code></pre>"},{"location":"tags-releases/#signing-tags","title":"Signing Tags","text":"<p>For extra security, create cryptographically signed tags:</p>"},{"location":"tags-releases/#create-a-gpg-signed-tag","title":"Create a GPG-signed tag","text":"<pre><code>git tag -s v1.0.0 -m \"Signed release version 1.0.0\"\n</code></pre>"},{"location":"tags-releases/#verify-a-signed-tag","title":"Verify a signed tag","text":"<pre><code>git tag -v v1.0.0\n</code></pre> <p>\ud83d\udca1 Tip: Signed tags provide verification that the tag was created by a trusted source.</p>"},{"location":"tags-releases/#managing-tags","title":"Managing Tags","text":""},{"location":"tags-releases/#listing-tags","title":"Listing Tags","text":"<p>View the tags in your repository:</p>"},{"location":"tags-releases/#list-all-tags","title":"List all tags","text":"<pre><code>git tag\n</code></pre>"},{"location":"tags-releases/#list-tags-with-patterns","title":"List tags with patterns","text":"<pre><code>git tag -l \"v1.8.*\"\n</code></pre>"},{"location":"tags-releases/#list-tags-with-annotations","title":"List tags with annotations","text":"<pre><code>git tag -n\n</code></pre>"},{"location":"tags-releases/#show-verbose-tag-information","title":"Show verbose tag information","text":"<pre><code>git tag -v\n</code></pre>"},{"location":"tags-releases/#viewing-tag-information","title":"Viewing Tag Information","text":"<p>Inspect details about specific tags:</p>"},{"location":"tags-releases/#show-tag-data","title":"Show tag data","text":"<pre><code>git show v1.0.0\n</code></pre>"},{"location":"tags-releases/#display-only-the-commit-a-tag-points-to","title":"Display only the commit a tag points to","text":"<pre><code>git rev-parse v1.0.0\n</code></pre>"},{"location":"tags-releases/#list-tags-that-contain-a-specific-commit","title":"List tags that contain a specific commit","text":"<pre><code>git tag --contains a1b2c3d\n</code></pre>"},{"location":"tags-releases/#searching-and-filtering-tags","title":"Searching and Filtering Tags","text":"<p>Find tags matching certain criteria:</p>"},{"location":"tags-releases/#find-tags-matching-a-pattern","title":"Find tags matching a pattern","text":"<pre><code>git tag -l \"v1.*\"\n</code></pre>"},{"location":"tags-releases/#find-tags-containing-a-specific-commit","title":"Find tags containing a specific commit","text":"<pre><code>git tag --contains 7d9a5b2\n</code></pre>"},{"location":"tags-releases/#find-tags-not-containing-a-specific-commit","title":"Find tags not containing a specific commit","text":"<pre><code>git tag --no-contains 7d9a5b2\n</code></pre>"},{"location":"tags-releases/#sorting-tags","title":"Sorting Tags","text":"<p>Sort tags by version number or date:</p>"},{"location":"tags-releases/#sort-by-version-number-requires-git-20","title":"Sort by version number (requires git 2.0+)","text":"<pre><code>git tag --sort=v:refname\n</code></pre>"},{"location":"tags-releases/#sort-by-tag-creation-date","title":"Sort by tag creation date","text":"<pre><code>git tag --sort=creatordate\n</code></pre>"},{"location":"tags-releases/#reverse-the-sort-order","title":"Reverse the sort order","text":"<pre><code>git tag --sort=-v:refname\n</code></pre>"},{"location":"tags-releases/#working-with-tags","title":"Working with Tags","text":""},{"location":"tags-releases/#checking-out-tags","title":"Checking Out Tags","text":"<p>Examine the code at a tagged release point:</p>"},{"location":"tags-releases/#view-the-repo-at-a-specific-tag","title":"View the repo at a specific tag","text":"<pre><code>git checkout v1.0.0\n</code></pre>"},{"location":"tags-releases/#create-a-new-branch-from-a-tag","title":"Create a new branch from a tag","text":"<pre><code>git checkout -b fix-branch v1.0.0\n</code></pre> <p>\u26a0\ufe0f Warning: Checking out a tag puts you in a \"detached HEAD\" state. Create a branch if you need to make changes.</p>"},{"location":"tags-releases/#comparing-tags","title":"Comparing Tags","text":"<p>See differences between tagged versions:</p>"},{"location":"tags-releases/#compare-two-tagged-versions","title":"Compare two tagged versions","text":"<pre><code>git diff v1.0.0 v2.0.0\n</code></pre>"},{"location":"tags-releases/#show-commits-between-tags","title":"Show commits between tags","text":"<pre><code>git log v1.0.0..v2.0.0\n</code></pre>"},{"location":"tags-releases/#show-file-changes-between-tags","title":"Show file changes between tags","text":"<pre><code>git diff v1.0.0..v2.0.0 -- path/to/file\n</code></pre>"},{"location":"tags-releases/#deleting-tags","title":"Deleting Tags","text":"<p>Remove tags when they're no longer needed:</p>"},{"location":"tags-releases/#delete-a-local-tag","title":"Delete a local tag","text":"<pre><code>git tag -d v0.1.0-beta\n</code></pre>"},{"location":"tags-releases/#delete-multiple-tags","title":"Delete multiple tags","text":"<pre><code>git tag -d v0.1.0-beta v0.2.0-beta\n</code></pre>"},{"location":"tags-releases/#renaming-tags","title":"Renaming Tags","text":"<p>Git doesn't have a direct tag rename command, but you can:</p>"},{"location":"tags-releases/#rename-a-tag-step-1-create-new-tag","title":"Rename a tag - Step 1: Create new tag","text":"<pre><code>git tag new-tag-name old-tag-name\n</code></pre>"},{"location":"tags-releases/#rename-a-tag-step-2-delete-old-tag-locally","title":"Rename a tag - Step 2: Delete old tag locally","text":"<pre><code>git tag -d old-tag-name\n</code></pre>"},{"location":"tags-releases/#rename-a-tag-step-3-delete-old-tag-from-remote","title":"Rename a tag - Step 3: Delete old tag from remote","text":"<pre><code>git push origin :old-tag-name\n</code></pre>"},{"location":"tags-releases/#rename-a-tag-step-4-push-new-tag-to-remote","title":"Rename a tag - Step 4: Push new tag to remote","text":"<pre><code>git push origin new-tag-name\n</code></pre>"},{"location":"tags-releases/#moving-tags","title":"Moving Tags","text":"<p>Point a tag to a different commit:</p>"},{"location":"tags-releases/#move-a-tag-to-current-head-delete-and-recreate","title":"Move a tag to current HEAD (delete and recreate)","text":"<pre><code>git tag -d v1.0.0\ngit tag v1.0.0\n</code></pre>"},{"location":"tags-releases/#move-a-tag-to-a-specific-commit-with-force","title":"Move a tag to a specific commit (with force)","text":"<pre><code>git tag -f v1.0.0 a1b2c3d\n</code></pre> <p>\u26a0\ufe0f Warning: Moving tags that have been pushed to a remote repository can cause confusion. Only do this if absolutely necessary.</p>"},{"location":"tags-releases/#sharing-tags","title":"Sharing Tags","text":""},{"location":"tags-releases/#pushing-tags-to-remote","title":"Pushing Tags to Remote","text":"<p>By default, <code>git push</code> doesn't transfer tags:</p>"},{"location":"tags-releases/#push-a-specific-tag","title":"Push a specific tag","text":"<pre><code>git push origin v1.0.0\n</code></pre>"},{"location":"tags-releases/#push-all-tags","title":"Push all tags","text":"<pre><code>git push origin --tags\n</code></pre>"},{"location":"tags-releases/#push-all-annotated-tags","title":"Push all annotated tags","text":"<pre><code>git push origin --follow-tags\n</code></pre>"},{"location":"tags-releases/#fetching-tags","title":"Fetching Tags","text":"<p>Get tags from remote repositories:</p>"},{"location":"tags-releases/#fetch-tags-along-with-branches","title":"Fetch tags along with branches","text":"<pre><code>git fetch\n</code></pre>"},{"location":"tags-releases/#fetch-all-tags-that-arent-already-present","title":"Fetch all tags that aren't already present","text":"<pre><code>git fetch --tags\n</code></pre>"},{"location":"tags-releases/#deleting-remote-tags","title":"Deleting Remote Tags","text":"<p>Remove tags from a remote repository:</p>"},{"location":"tags-releases/#delete-a-remote-tag","title":"Delete a remote tag","text":"<pre><code>git push origin --delete v0.1.0-beta\n</code></pre> <p>Alternative syntax:</p> <pre><code>git push origin :refs/tags/v0.1.0-beta\n</code></pre>"},{"location":"tags-releases/#semantic-versioning","title":"Semantic Versioning","text":""},{"location":"tags-releases/#semver-format","title":"SemVer Format","text":"<p>Semantic Versioning provides a clear convention for version numbering:</p> <pre><code>MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]\n</code></pre> <p>Example: <code>2.4.1-alpha.1+20130313144700</code></p>"},{"location":"tags-releases/#version-incrementing-rules","title":"Version Incrementing Rules","text":"<p>Guidelines for when to increment each version component:</p> <ol> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Add functionality (backward-compatible)</li> <li>PATCH: Bug fixes (backward-compatible)</li> </ol>"},{"location":"tags-releases/#example-semver-tagging-workflow","title":"Example SemVer tagging workflow","text":"<pre><code>gitGraph\n    commit\n    commit\n    commit tag: \"v0.1.0\"\n    commit\n    commit\n    commit tag: \"v0.2.0\"\n    branch hotfix\n    checkout hotfix\n    commit\n    checkout main\n    merge hotfix tag: \"v0.2.1\"\n    commit\n    commit\n    commit tag: \"v1.0.0\"\n    commit\n    commit tag: \"v1.1.0\"\n    branch breaking-changes\n    checkout breaking-changes\n    commit\n    commit\n    checkout main\n    merge breaking-changes tag: \"v2.0.0\"\n</code></pre>"},{"location":"tags-releases/#create-initial-release-tag","title":"Create initial release tag","text":"<pre><code>git tag -a v1.0.0 -m \"Initial stable release\"\n</code></pre>"},{"location":"tags-releases/#create-patch-release-for-bug-fixes","title":"Create patch release for bug fixes","text":"<pre><code>git tag -a v1.0.1 -m \"Fix critical bug in login flow\"\n</code></pre>"},{"location":"tags-releases/#create-minor-release-for-new-features","title":"Create minor release for new features","text":"<pre><code>git tag -a v1.1.0 -m \"Add user profile features\"\n</code></pre>"},{"location":"tags-releases/#create-major-release-for-breaking-changes","title":"Create major release for breaking changes","text":"<pre><code>git tag -a v2.0.0 -m \"Complete API redesign\"\n</code></pre>"},{"location":"tags-releases/#pre-release-and-build-metadata","title":"Pre-release and Build Metadata","text":"<p>Use pre-release identifiers for pre-release versions:</p>"},{"location":"tags-releases/#alpha-version","title":"Alpha version","text":"<pre><code>git tag -a v1.0.0-alpha.1 -m \"Alpha release\"\n</code></pre>"},{"location":"tags-releases/#beta-version","title":"Beta version","text":"<pre><code>git tag -a v1.0.0-beta.1 -m \"Beta release\"\n</code></pre>"},{"location":"tags-releases/#release-candidate","title":"Release candidate","text":"<pre><code>git tag -a v1.0.0-rc.1 -m \"Release candidate 1\"\n</code></pre>"},{"location":"tags-releases/#release-workflows","title":"Release Workflows","text":""},{"location":"tags-releases/#gitflow-release-workflow","title":"GitFlow Release Workflow","text":"<p>Using GitFlow for structured releases:</p> <pre><code>gitGraph\n    commit\n    branch develop\n    checkout develop\n    commit\n    commit\n    branch release/v1.0\n    checkout release/v1.0\n    commit\n    checkout main\n    merge release/v1.0\n    commit tag: \"v1.0.0\"\n    checkout develop\n    merge release/v1.0\n    branch hotfix/v1.0.1\n    checkout hotfix/v1.0.1\n    commit\n    checkout main\n    merge hotfix/v1.0.1\n    commit tag: \"v1.0.1\"\n    checkout develop\n    merge hotfix/v1.0.1\n    commit\n</code></pre>"},{"location":"tags-releases/#step-1-create-a-release-branch","title":"Step 1: Create a release branch","text":"<pre><code>git checkout -b release/v1.0 develop\n</code></pre>"},{"location":"tags-releases/#step-2-prepare-the-release","title":"Step 2: Prepare the release","text":"<pre><code>git commit -m \"Bump version numbers\"\n</code></pre>"},{"location":"tags-releases/#step-3-tag-the-release","title":"Step 3: Tag the release","text":"<pre><code>git tag -a v1.0.0 -m \"Version 1.0.0\"\n</code></pre>"},{"location":"tags-releases/#step-4-merge-to-main","title":"Step 4: Merge to main","text":"<pre><code>git checkout main\ngit merge --no-ff release/v1.0\n</code></pre>"},{"location":"tags-releases/#step-5-merge-back-to-develop","title":"Step 5: Merge back to develop","text":"<pre><code>git checkout develop\ngit merge --no-ff release/v1.0\n</code></pre>"},{"location":"tags-releases/#simple-tag-based-releases","title":"Simple Tag-Based Releases","text":"<p>Simpler workflow using tags directly:</p> <pre><code>gitGraph\n    commit\n    commit\n    commit\n    commit tag: \"v0.1.0\"\n    commit\n    commit\n    commit tag: \"v0.2.0\"\n    commit\n    commit\n    commit tag: \"v1.0.0\"\n</code></pre>"},{"location":"tags-releases/#step-1-ensure-main-branch-is-stable","title":"Step 1: Ensure main branch is stable","text":"<pre><code>git checkout main\n</code></pre>"},{"location":"tags-releases/#step-2-tag-the-release","title":"Step 2: Tag the release","text":"<pre><code>git tag -a v1.0.0 -m \"Version 1.0.0\"\n</code></pre>"},{"location":"tags-releases/#step-3-push-the-tag","title":"Step 3: Push the tag","text":"<pre><code>git push origin v1.0.0\n</code></pre>"},{"location":"tags-releases/#github-release-workflow","title":"GitHub Release Workflow","text":"<p>Creating releases on GitHub:</p>"},{"location":"tags-releases/#step-1-create-and-push-a-tag","title":"Step 1: Create and push a tag","text":"<pre><code>git tag -a v1.0.0 -m \"Version 1.0.0\"\ngit push origin v1.0.0\n</code></pre>"},{"location":"tags-releases/#step-2-create-the-release-on-github","title":"Step 2: Create the release on GitHub","text":"<ol> <li>Go to your repository on GitHub</li> <li>Navigate to \"Releases\" section</li> <li>Click \"Create a new release\"</li> <li>Select your tag</li> <li>Add release notes and artifacts</li> <li>Publish the release</li> </ol>"},{"location":"tags-releases/#automating-releases-with-cicd","title":"Automating Releases with CI/CD","text":"<p>Using CI/CD pipelines for automated releases:</p> <pre><code># Example GitHub Actions workflow\nname: Create Release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: |\n          npm install\n          npm run build\n      - name: Create Release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n</code></pre> <p>\ud83d\udca1 Tip: Automated release processes can include building, testing, creating release notes, and publishing artifacts.</p>"},{"location":"tags-releases/#command-summary","title":"Command Summary","text":"Operation Command Description Create tag <code>git tag v1.0.0</code> Create lightweight tag Create annotated <code>git tag -a v1.0.0 -m \"msg\"</code> Create annotated tag List tags <code>git tag</code> Show all tags Show tag <code>git show v1.0.0</code> Display tag details Push tags <code>git push origin v1.0.0</code> Push specific tag Push all tags <code>git push --tags</code> Push all tags Delete tag <code>git tag -d v1.0.0</code> Remove local tag Delete remote tag <code>git push origin --delete v1.0.0</code> Remove remote tag Checkout tag <code>git checkout v1.0.0</code> Examine tagged version Tag old commit <code>git tag v0.9.0 &lt;commit-hash&gt;</code> Tag previous commit"},{"location":"tags-releases/#related-topics","title":"Related Topics","text":"<ul> <li>Creating, managing, and navigating branches</li> <li>Viewing project history and comparing changes</li> <li>Working with remote repositories (push, pull, fetch)</li> <li>Established Git workflows for teams</li> </ul>"},{"location":"troubleshooting/","title":"Solving Common Git Problems","text":"<p>Master the art of diagnosing and fixing Git issues to recover from mistakes and keep your workflow smooth.</p>"},{"location":"troubleshooting/#understanding-git-error-messages","title":"Understanding Git Error Messages","text":""},{"location":"troubleshooting/#common-error-messages","title":"Common Error Messages","text":"<p>Git error messages often contain valuable information for troubleshooting:</p> Error Message Likely Cause Solution <code>fatal: not a git repository</code> Command run outside of git repo Navigate to repo directory or initialize one <code>error: failed to push some refs</code> Remote contains work you don't have locally Pull or fetch before pushing <code>fatal: refusing to merge unrelated histories</code> Trying to merge repositories with no common ancestor Use <code>--allow-unrelated-histories</code> flag <code>fatal: remote origin already exists</code> Attempting to add a remote that's already defined Use <code>git remote set-url</code> instead <code>error: Your local changes would be overwritten</code> Uncommitted changes conflict with pull Commit, stash, or discard changes first"},{"location":"troubleshooting/#reading-git-error-output","title":"Reading Git Error Output","text":"<p>Git errors typically follow this pattern:</p> <pre><code>error/fatal: &lt;specific error message&gt;\nhint: &lt;helpful suggestion on what to do next&gt;\n</code></pre> <p>When troubleshooting:</p> <ol> <li>Read the entire error message carefully</li> <li>Look for hints that Git provides</li> <li>Check for any file paths or refs mentioned in the error</li> </ol> <p>\ud83d\udca1 Tip: Run <code>git status</code> immediately after encountering an error for additional context about the state of your repository.</p>"},{"location":"troubleshooting/#fixing-commit-mistakes","title":"Fixing Commit Mistakes","text":""},{"location":"troubleshooting/#amending-commits","title":"Amending Commits","text":"<p>Fix the most recent commit:</p> <pre><code># Change the commit message of the last commit\ngit commit --amend -m \"New commit message\"\n\n# Add forgotten files to the last commit without changing the message\ngit add forgotten-file.txt\ngit commit --amend --no-edit\n\n# Change author information for the last commit\ngit commit --amend --author=\"New Name &lt;email@example.com&gt;\"\n</code></pre> <p>\u26a0\ufe0f Warning: Never amend commits that have been pushed to a shared repository unless you're absolutely sure no one has based work on them.</p>"},{"location":"troubleshooting/#resetting-commits","title":"Resetting Commits","text":"<p>Undo commits with different levels of aggressiveness:</p> <pre><code># Soft reset - keep changes staged\ngit reset --soft HEAD~1       # Undo last commit, keep changes staged\n\n# Mixed reset (default) - keep changes but unstaged\ngit reset HEAD~1              # Undo last commit, keep changes unstaged\n\n# Hard reset - discard changes completely\ngit reset --hard HEAD~1       # \u26a0\ufe0f Undo last commit AND discard changes\n\n# Reset to a specific commit\ngit reset --hard 7abc123      # \u26a0\ufe0f Reset to specific commit and discard changes\n\n# Reset a single file to a previous version\ngit reset 7abc123 -- path/to/file.txt\n</code></pre> <p>\u26a0\ufe0f Warning: <code>--hard</code> permanently discards changes. However, you can still recover commits with reflog (see below).</p>"},{"location":"troubleshooting/#reverting-commits","title":"Reverting Commits","text":"<p>Create new commits that undo previous changes:</p> <pre><code># Revert the most recent commit\ngit revert HEAD\n\n# Revert a specific commit\ngit revert 7abc123\n\n# Revert multiple commits\ngit revert 7abc123..9def456\n\n# Revert a merge commit\ngit revert -m 1 merge_commit_hash\n</code></pre> <p>\ud83d\udca1 Tip: Use revert when you need to undo changes that have already been shared with others.</p>"},{"location":"troubleshooting/#cherry-picking-commits","title":"Cherry-Picking Commits","text":"<p>Apply specific commits from one branch to another:</p> <pre><code># Apply a single commit to current branch\ngit cherry-pick 7abc123\n\n# Cherry-pick without committing changes\ngit cherry-pick -n 7abc123\n\n# Cherry-pick a range of commits\ngit cherry-pick 7abc123^..9def456\n</code></pre>"},{"location":"troubleshooting/#interactive-rebase","title":"Interactive Rebase","text":"<p>Modify multiple commits in sequence:</p> <pre><code># Interactively rebase the last 3 commits\ngit rebase -i HEAD~3\n\n# Rebase onto a specific commit\ngit rebase -i 7abc123\n</code></pre> <p>Interactive rebase commands:</p> <ul> <li><code>pick</code> - Keep the commit as is</li> <li><code>reword</code> - Change the commit message</li> <li><code>edit</code> - Pause to amend the commit</li> <li><code>squash</code> - Combine with previous commit (keeps both messages)</li> <li><code>fixup</code> - Combine with previous commit (discard this message)</li> <li><code>drop</code> - Remove the commit entirely</li> </ul> <p>\ud83d\udca1 Tip: Interactive rebase can solve many complex problems but use with caution on public history.</p>"},{"location":"troubleshooting/#recovering-lost-work","title":"Recovering Lost Work","text":""},{"location":"troubleshooting/#using-reflog","title":"Using Reflog","text":"<p>Git keeps a log of all reference updates (reflog) for typically 90 days:</p> <pre><code># View reflog for HEAD\ngit reflog\n\n# View reflog for a specific branch\ngit reflog show branch-name\n\n# Restore to a specific reflog entry\ngit checkout HEAD@{2}          # Go to where HEAD was 2 moves ago\ngit branch recovered-branch HEAD@{2}   # Create branch at that point\n</code></pre> <p>Example reflog output:</p> <pre><code>734713b HEAD@{0}: commit: Fix typo in README\na72f9c4 HEAD@{1}: reset: moving to HEAD~1\nd29eb23 HEAD@{2}: commit: Work that was undone by reset\n</code></pre>"},{"location":"troubleshooting/#recovering-deleted-commits","title":"Recovering Deleted Commits","text":"<p>Recover work after an accidental reset:</p> <pre><code># Find the SHA of the deleted commit in the reflog\ngit reflog\n\n# Create a new branch pointing to the lost commit\ngit branch recovered-work d29eb23  # SHA from reflog\n\n# Or reset your current branch to the lost commit\ngit reset --hard d29eb23\n</code></pre>"},{"location":"troubleshooting/#recovering-deleted-branches","title":"Recovering Deleted Branches","text":"<p>Restore a branch that was accidentally deleted:</p> <pre><code># Find the SHA of the branch's last commit \ngit reflog\n\n# Recreate the branch at that commit\ngit branch deleted-branch d29eb23  # SHA from reflog\n</code></pre>"},{"location":"troubleshooting/#finding-dangling-commits","title":"Finding Dangling Commits","text":"<p>Find commits that aren't referenced by any branch or tag:</p> <pre><code># Find dangling commits\ngit fsck --lost-found\n\n# Examine a specific dangling commit\ngit show &lt;sha&gt;\n\n# Create a branch to rescued dangling commit\ngit branch rescued-work &lt;sha&gt;\n</code></pre>"},{"location":"troubleshooting/#rescuing-stashed-changes","title":"Rescuing Stashed Changes","text":"<p>Recover stashed work:</p> <pre><code># List all stashes\ngit stash list\n\n# Recover a dropped stash (if it's still in reflog)\ngit fsck --no-reflog | grep commit | cut -d' ' -f3 | xargs git show --summary\n\n# Apply a specific stash\ngit stash apply stash@{n}\n\n# Create a branch from a stash\ngit stash branch new-branch stash@{0}\n</code></pre>"},{"location":"troubleshooting/#resolving-merge-conflicts","title":"Resolving Merge Conflicts","text":""},{"location":"troubleshooting/#understanding-conflict-markers","title":"Understanding Conflict Markers","text":"<p>When Git can't automatically merge changes, it marks conflicts in files like this:</p> <pre><code>  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n  This is the change in the current branch\n  =======\n  This is the incoming change from the other branch\n  &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch\n</code></pre> <p>Understanding conflict markers:</p> <ul> <li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> - Beginning of changes in your current branch</li> <li><code>=======</code> - Separator between the conflicting changes</li> <li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch</code> - End of changes from the branch being merged in</li> </ul>"},{"location":"troubleshooting/#resolving-conflicts-manually","title":"Resolving Conflicts Manually","text":"<p>Steps to manually resolve conflicts:</p> <pre><code># 1. Identify conflicted files\ngit status\n\n# 2. Open and edit the files to fix conflicts\n# 3. Remove conflict markers and keep what you want\n\n# 4. Mark conflicts as resolved\ngit add resolved-file.txt\n\n# 5. Continue the merge\ngit merge --continue\n# Or for older Git versions\ngit commit\n</code></pre>"},{"location":"troubleshooting/#using-merge-tools","title":"Using Merge Tools","text":"<p>Resolve conflicts using visual tools:</p> <pre><code># Configure your preferred merge tool (one-time setup)\ngit config --global merge.tool kdiff3\n\n# Launch configured merge tool for all conflicts\ngit mergetool\n\n# Launch for specific file\ngit mergetool path/to/file.txt\n</code></pre> <p>Popular merge tools:</p> <ul> <li>VS Code</li> <li>KDiff3</li> <li>Meld</li> <li>Beyond Compare</li> <li>P4Merge</li> </ul>"},{"location":"troubleshooting/#aborting-a-merge","title":"Aborting a Merge","text":"<p>Cancel a merge in progress:</p> <pre><code># Abort the current merge and restore pre-merge state\ngit merge --abort\n</code></pre>"},{"location":"troubleshooting/#resolving-rebase-conflicts","title":"Resolving Rebase Conflicts","text":"<p>Handle conflicts during a rebase:</p> <pre><code># During a rebase with conflicts:\n\n# 1. Resolve the conflicts manually in the files\n\n# 2. Add resolved files\ngit add resolved-file.txt\n\n# 3. Continue the rebase\ngit rebase --continue\n\n# Or to skip the current commit\ngit rebase --skip\n\n# Or to abort the entire rebase\ngit rebase --abort\n</code></pre>"},{"location":"troubleshooting/#working-with-large-repositories","title":"Working with Large Repositories","text":""},{"location":"troubleshooting/#git-performance-issues","title":"Git Performance Issues","text":"<p>Diagnose and improve Git performance:</p> <pre><code># Check repository size\ngit count-objects -vH\n\n# Run garbage collection to optimize repository\ngit gc\n\n# Aggressively optimize the repository\ngit gc --aggressive\n\n# Prune all unreachable objects\ngit prune\n</code></pre>"},{"location":"troubleshooting/#handling-large-files","title":"Handling Large Files","text":"<p>Strategies for large files:</p> <pre><code># Configure Git LFS (Large File Storage)\ngit lfs install\n\n# Track large file patterns with LFS\ngit lfs track \"*.psd\"\ngit lfs track \"*.zip\"\n\n# Verify tracking\ngit lfs ls-files\n\n# Clone a repository with LFS objects\ngit lfs clone &lt;repository-url&gt;\n</code></pre>"},{"location":"troubleshooting/#reducing-repository-size","title":"Reducing Repository Size","text":"<p>Remove large files from history:</p> <pre><code># Find the largest objects in your repository\ngit rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort -k2nr | head -10\n\n# Use git-filter-repo to remove large files\n# First, install git-filter-repo\ngit filter-repo --path path/to/large/file --invert-paths --force\n\n# Garbage collect after filtering\ngit gc --aggressive --prune=now\n</code></pre> <p>\u26a0\ufe0f Warning: Rewriting history with tools like <code>git filter-repo</code> will change all commit hashes. Only use on repositories where you can force-push and other collaborators can handle the change.</p>"},{"location":"troubleshooting/#shallow-and-partial-clones","title":"Shallow and Partial Clones","text":"<p>Reduce clone size and time:</p> <pre><code># Shallow clone with limited history\ngit clone --depth=1 &lt;repository-url&gt;\n\n# Clone only specific branches\ngit clone --single-branch --branch main &lt;repository-url&gt;\n\n# Fetch additional history later\ngit fetch --unshallow\n\n# Partial clone (Git 2.22+)\ngit clone --filter=blob:none &lt;repository-url&gt;\n</code></pre>"},{"location":"troubleshooting/#fixing-branch-issues","title":"Fixing Branch Issues","text":""},{"location":"troubleshooting/#detached-head-state","title":"Detached HEAD State","text":"<p>Fix the \"detached HEAD\" state:</p> <pre><code># Check if you're in detached HEAD state\ngit status\n\n# Create a new branch at current position\ngit branch new-branch-name\n\n# Switch to the new branch to save your work\ngit checkout new-branch-name\n\n# Alternative: create and switch in one command\ngit checkout -b new-branch-name\n</code></pre>"},{"location":"troubleshooting/#repairing-broken-branches","title":"Repairing Broken Branches","text":"<p>Fix branches pointing to invalid commits:</p> <pre><code># Reset branch to a known good commit\ngit checkout broken-branch\ngit reset --hard 7abc123\n\n# Force update a remote branch\ngit push --force-with-lease origin broken-branch\n</code></pre>"},{"location":"troubleshooting/#recovering-from-bad-merges","title":"Recovering from Bad Merges","text":"<p>Undo a problematic merge:</p> <pre><code># Revert a merge commit\ngit revert -m 1 &lt;merge-commit-hash&gt;\n\n# Reset to before the merge (if not yet pushed)\ngit reset --hard HEAD~1\n</code></pre>"},{"location":"troubleshooting/#cleaning-up-branches","title":"Cleaning Up Branches","text":"<p>Manage obsolete branches:</p> <pre><code># List merged branches that can be safely deleted\ngit branch --merged\n\n# Delete local branches that have been merged\ngit branch -d branch-name\n\n# Force delete a branch regardless of merge status\ngit branch -D branch-name\n\n# Delete remote branch\ngit push origin --delete branch-name\n\n# Prune tracking branches no longer on remote\ngit fetch --prune\n</code></pre>"},{"location":"troubleshooting/#remote-repository-problems","title":"Remote Repository Problems","text":""},{"location":"troubleshooting/#push-and-pull-errors","title":"Push and Pull Errors","text":"<p>Handle common remote operation issues:</p> <pre><code># Fix \"non-fast-forward\" push rejection\ngit pull --rebase origin main\ngit push origin main\n\n# Force push when necessary (use with caution!)\ngit push --force-with-lease origin main\n\n# Set upstream for current branch\ngit branch --set-upstream-to=origin/main main\n\n# Retrieve changes without merging\ngit fetch origin\n</code></pre> <p>\u26a0\ufe0f Warning: Force pushing (<code>git push --force</code>) overwrites the remote history and can cause serious problems for collaborators. Prefer using <code>--force-with-lease</code> which fails if there are upstream changes you don't have.</p>"},{"location":"troubleshooting/#remote-connection-issues","title":"Remote Connection Issues","text":"<p>Diagnose and fix connection problems:</p> <pre><code># Test SSH connection to GitHub\nssh -T git@github.com\n\n# Test connection with verbose output\nssh -vT git@github.com\n\n# Set higher timeout for slow connections\ngit config --global http.lowSpeedLimit 1000\ngit config --global http.lowSpeedTime 60\n</code></pre>"},{"location":"troubleshooting/#diverged-branches","title":"Diverged Branches","text":"<p>Handle divergent branches:</p> <pre><code># See how branches have diverged\ngit log --graph --oneline --all\n\n# For diverged branches, pull with rebase\ngit pull --rebase\n\n# Pull with specific strategy\ngit pull --strategy recursive --strategy-option theirs\n</code></pre>"},{"location":"troubleshooting/#fixing-remote-references","title":"Fixing Remote References","text":"<p>Repair invalid remote settings:</p> <pre><code># Update remote URL\ngit remote set-url origin https://github.com/username/repo.git\n\n# Remove and add remote\ngit remote remove origin\ngit remote add origin https://github.com/username/repo.git\n\n# Prune deleted remote branches\ngit remote prune origin\n\n# Reset to exactly match remote branch\ngit fetch origin\ngit reset --hard origin/main\n</code></pre>"},{"location":"troubleshooting/#authentication-and-access","title":"Authentication and Access","text":""},{"location":"troubleshooting/#ssh-key-issues","title":"SSH Key Issues","text":"<p>Troubleshoot and fix SSH key problems:</p> <pre><code># Verify your SSH key is being used\nssh -vT git@github.com\n\n# Start SSH agent\neval \"$(ssh-agent -s)\"\n\n# Add private key to the agent\nssh-add ~/.ssh/id_rsa\n\n# Create a new SSH key\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# Copy public key to clipboard (Linux)\ncat ~/.ssh/id_ed25519.pub | xclip -selection clipboard\n\n# Copy public key to clipboard (macOS)\ncat ~/.ssh/id_ed25519.pub | pbcopy\n\n# Windows (PowerShell)\nGet-Content ~/.ssh/id_ed25519.pub | Set-Clipboard\n</code></pre>"},{"location":"troubleshooting/#credential-helper-problems","title":"Credential Helper Problems","text":"<p>Fix password caching issues:</p> <pre><code># View current credential helper\ngit config --global --get credential.helper\n\n# Reset credential helper\ngit config --global --unset credential.helper\n\n# Set a new credential helper\n# For Windows\ngit config --global credential.helper manager-core\n\n# For macOS\ngit config --global credential.helper osxkeychain\n\n# For Linux\ngit config --global credential.helper 'cache --timeout=3600'\n\n# For plaintext storage (not secure but simple)\ngit config --global credential.helper store\n</code></pre>"},{"location":"troubleshooting/#permissions-errors","title":"Permissions Errors","text":"<p>Fix permission-related problems:</p> <pre><code># Check your access level on a repository\nssh git@github.com info\n\n# Fix permissions for SSH key files\nchmod 600 ~/.ssh/id_rsa\nchmod 644 ~/.ssh/id_rsa.pub\n\n# Fix \"Permission denied\" errors\nssh -T git@github.com\n\n# Switch from SSH to HTTPS temporarily\ngit remote set-url origin https://github.com/username/repo.git\n</code></pre>"},{"location":"troubleshooting/#fixing-file-mode-and-permission-issues","title":"Fixing File Mode and Permission Issues","text":""},{"location":"troubleshooting/#executable-file-bit-problems","title":"Executable File Bit Problems","text":"<p>Handle issues with executable permission bit changes:</p> <pre><code># Prevent Git from tracking file permission changes\ngit config core.fileMode false\n\n# Fix specific file permissions\ngit update-index --chmod=+x script.sh   # Make executable\ngit update-index --chmod=-x script.sh   # Remove executable bit\n</code></pre>"},{"location":"troubleshooting/#line-ending-issues","title":"Line Ending Issues","text":"<p>Fix line ending conversion problems:</p> <pre><code># Configure line endings appropriately\n# For Windows\ngit config --global core.autocrlf true\n\n# For macOS/Linux\ngit config --global core.autocrlf input\n\n# Fix EOL issues for a specific file\ngit add --renormalize file.txt\n\n# Renormalize the entire repo\ngit add --renormalize .\ngit commit -m \"Normalize line endings\"\n</code></pre>"},{"location":"troubleshooting/#file-permission-changes","title":"File Permission Changes","text":"<p>Handle permission changes showing as modifications:</p> <pre><code># Make Git ignore permission changes\ngit config core.filemode false\n\n# Reset file permissions without changing content\ngit checkout-index --force --all\n</code></pre>"},{"location":"troubleshooting/#command-summary","title":"Command Summary","text":"Problem Command Description Fix Last Commit <code>git commit --amend</code> Change last commit Undo Last Commit <code>git reset HEAD~1</code> Undo commit, keep changes Discard All Changes <code>git reset --hard HEAD</code> Remove all uncommitted changes View History Log <code>git reflog</code> Show reference history Recover Deleted Work <code>git branch recover-branch HEAD@{n}</code> Create branch from reflog Abort Merge <code>git merge --abort</code> Cancel current merge Fix Detached HEAD <code>git checkout -b new-branch</code> Create branch at current position Force Push Safely <code>git push --force-with-lease</code> Force push with safeguard Clean Repo <code>git gc --aggressive</code> Optimize repository"},{"location":"troubleshooting/#related-topics","title":"Related Topics","text":"<ul> <li>Git configuration and command shortcuts</li> <li>Advanced Git techniques and features</li> <li>Combining branches with merge and rebase operations</li> <li>Working with remote repositories (push, pull, fetch)</li> </ul> <p>Next: Advanced Git techniques and features</p>"}]}